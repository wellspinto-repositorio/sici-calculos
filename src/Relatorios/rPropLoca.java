package Relatorios;

import Funcoes.Db;
import Funcoes.FuncoesGlobais;
import Funcoes.LerValor;
import Funcoes.VariaveisGlobais;
import Funcoes.jTableControl;
import Funcoes.tempFile;
import Funcoes.toPreview;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.AWTKeyStroke;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.regex.PatternSyntaxException;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.JRPdfExporter;

public class rPropLoca extends javax.swing.JInternalFrame {
    Db conn = VariaveisGlobais.conexao;
    jTableControl tabela = new jTableControl(true);    
    TableRowSorter<TableModel> sorter;

    boolean bExecNomei = false, bExecCodigoi = false;
    boolean bExecNomef = false, bExecCodigof = false;

    /** Creates new form rSeguros */
    public rPropLoca() {
        initComponents();

        // Icone da tela
        FlatSVGIcon icone = new FlatSVGIcon("menuIcons/proprietariosImoveis.svg",16,16);
        setFrameIcon(icone);        
        
        // Colocando enter para pular de campo
        HashSet conj = new HashSet(this.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));
        conj.add(AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_ENTER, 0));
        this.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, conj);
    }
   
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtnPreview = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jcbStatus = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Proprietarios = new javax.swing.JTable();
        jBtnListar = new javax.swing.JButton();
        jLabel_SelectAll = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        btnClear = new javax.swing.JLabel();
        filtro = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setTitle(".:: Relatório de Proprietários e Locatarios ... ::.");
        setMaximumSize(new java.awt.Dimension(701, 254));
        setMinimumSize(new java.awt.Dimension(701, 254));
        setPreferredSize(new java.awt.Dimension(701, 254));
        setVisible(true);

        jbtnPreview.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Actions-document-print-preview-icon.png"))); // NOI18N
        jbtnPreview.setText("Preview");
        jbtnPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPreviewActionPerformed(evt);
            }
        });

        jLabel6.setText("Proprietário Inicial:");

        jcbStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ativo", "inativo" }));

        jLabel7.setText("Status:");

        jTable_Proprietarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable_Proprietarios);

        jBtnListar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/webmaster_2531_text_align_justify.png"))); // NOI18N
        jBtnListar.setText("Listar");
        jBtnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnListarActionPerformed(evt);
            }
        });

        jLabel_SelectAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/plus.png"))); // NOI18N
        jLabel_SelectAll.setText("Selecionar todos.");
        jLabel_SelectAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel_SelectAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel_SelectAllMouseClicked(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel3.setOpaque(false);

        jLabel8.setText("Filtro:");

        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Figuras/Clean_16x16.jpeg"))); // NOI18N
        btnClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnClearMouseClicked(evt);
            }
        });

        filtro.setBorder(null);
        filtro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filtroKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filtro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(filtro)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel_SelectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(10, 10, 10)
                                .addComponent(jbtnPreview)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnListar)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jcbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jBtnListar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbtnPreview)
                        .addComponent(jLabel_SelectAll))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPreviewActionPerformed
        jbtnPreview.setEnabled(false);

        if (jTable_Proprietarios.getSelectedRows().length == 0) {
            JOptionPane.showMessageDialog(this, "Você deve selecionar pelo menos um proprietário na lista.");
            return;
        }
        
        List<cPropImov> data = new ArrayList();
        for (int i=0; i <= jTable_Proprietarios.getSelectedRows().length - 1; i++) {
            int selRow = jTable_Proprietarios.getSelectedRows()[i];
            String rgprp = jTable_Proprietarios.getValueAt(selRow, 0).toString();
            
            // Monta a Liista para visualização
            String selectSQL = "SELECT p.rgprp, p.nome, p.cpfcnpj, i.rgimv, CONCAT(i.end,',',i.num,' ',i.compl) AS endereco, " +
            "i.bairro, i.cidade, i.estado, l.contrato, l.nomerazao, c.dtvencimento, c.dtinicio, c.dttermino, " +
            "c.dtultrecebimento, StrVal(Mid(c.campo,6,10)) AS aluguel FROM proprietarios p, " +
            "imoveis i, locatarios l, carteira c WHERE i.rgprp = p.rgprp and (l.rgprp = p.rgprp and l.rgimv = i.rgimv) AND " +
            "(c.rgprp = p.rgprp AND c.rgimv = i.rgimv AND c.contrato = l.contrato) AND (Mid(c.campo,1,5) = '01:1:') AND " +
            "(p.rgprp = :rgprp) ORDER BY i.rgimv;";

            ResultSet rs = conn.OpenTable(selectSQL, new Object[][] {{"string", "rgprp", rgprp}});
            try {
                String _rgprp = null; String _nome = null; String _cpfcnpj = null;
                String _rgimv = null; String _endereco = null; String _bairro = null; 
                String _cidade = null; String _estado = null; 
                String _contrato = null; String _nomerazao = null; 
                String _dtvencimento; String _dtinicio = null; String _dttermino = null;
                String _dtultrecebimento = null; String _aluguel = null;

                while (rs.next()) {
                    // Dados do Proprietário
                    try { _rgprp = rs.getString("rgprp"); } catch (SQLException e) { _rgprp = null; };
                    try { _nome = rs.getString("nome"); } catch (SQLException e) { _nome = null; };
                    try { _cpfcnpj = rs.getString("cpfcnpj"); } catch (SQLException e) { _cpfcnpj = null; };

                    // Dados do Imovel
                    try { _rgimv = rs.getString("rgimv"); } catch (SQLException e) { _rgimv = null; };
                    try { _endereco = rs.getString("endereco"); } catch (SQLException e) { _endereco = null; };
                    try { _bairro = rs.getString("bairro"); } catch (SQLException e) { _bairro = null; };
                    try { _cidade = rs.getString("cidade"); } catch (SQLException e) { _cidade = null; };
                    try { _estado = rs.getString("estado"); } catch (SQLException e) { _estado = null; };
                    try { _contrato = rs.getString("contrato"); } catch (SQLException e) { _contrato = null; };
                    try { _nomerazao = rs.getString("nomerazao"); } catch (SQLException e) { _nomerazao = null; };

                    // Dados da carteira
                    try { _dtvencimento = rs.getString("dtvencimento"); } catch (SQLException e) { _dtvencimento = null; };
                    try { _dtinicio = rs.getString("dtinicio"); } catch (SQLException e) { _dtinicio = null; };
                    try { _dttermino = rs.getString("dttermino"); } catch (SQLException e) { _dttermino = null; };
                    try { _dtultrecebimento = rs.getString("dtultrecebimento"); } catch (SQLException e) { _dtultrecebimento = null; };
                    try { _aluguel = LerValor.FormatPattern(rs.getString("aluguel"),"#,##0.00"); } catch (SQLException e) { _aluguel = null; };

                    cPropImov dado = new cPropImov(_rgprp, _nome, _cpfcnpj,
                                     _rgimv, _endereco, _bairro, _cidade, _estado, _contrato, _nomerazao,
                                     _dtvencimento, _dtinicio, _dttermino, _dtultrecebimento, _aluguel);
                    data.add(dado);
                }
            } catch (SQLException sqlEx) {}
            conn.CloseTable(rs);
        }
        
        String tAtivo = jcbStatus.getSelectedItem().toString().trim().toLowerCase();
        RelPropLoca(data, tAtivo);
        jbtnPreview.setEnabled(true);
    }//GEN-LAST:event_jbtnPreviewActionPerformed

    private void jBtnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnListarActionPerformed
        try {
            filtro.setText("");
            sorter.setRowFilter(null);
        } catch (Exception ex) {}
        
        String selectSQL = "SELECT p.rgprp, p.nome, p.cpfcnpj FROM proprietarios p " +
                           "WHERE Upper(Trim(p.status)) = :ativo ORDER BY Upper(p.nome);";
        
        ResultSet rs = conn.OpenTable(selectSQL, new Object[][] {
                {"string", "ativo", jcbStatus.getSelectedItem().toString().toUpperCase().trim()}
            }
        );
        Object[][] data = {};
        try {
            String _rgprp = null; String _nome = null; String _cpfcnpj = null;
            while (rs.next()) {
                // Dados do Proprietário
                try { _rgprp = rs.getString("rgprp"); } catch (SQLException e) { _rgprp = null; };
                try { _nome = rs.getString("nome"); } catch (SQLException e) { _nome = null; };
                try { _cpfcnpj = rs.getString("cpfcnpj"); } catch (SQLException e) { _cpfcnpj = null; };
                
                Object[] dado = {_rgprp, _nome, _cpfcnpj};
                data = FuncoesGlobais.ObjectsAdd(data, dado);
            }
        } catch (SQLException sqlEx) {}
        conn.CloseTable(rs);
        
        BuildTable(jTable_Proprietarios, data);        
    }//GEN-LAST:event_jBtnListarActionPerformed

    private void btnClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearMouseClicked
        filtro.setText(null);
        filtro.requestFocus();
    }//GEN-LAST:event_btnClearMouseClicked

    private void filtroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtroKeyReleased
        if ("".equals(filtro.getText().trim())) {
            sorter.setRowFilter(null);
        } else {
            try {
                sorter.setRowFilter(RowFilter.regexFilter(filtro.getText().trim()));
            } catch (PatternSyntaxException pse) {
                System.err.println("Bad regex pattern");
            }
        }
    }//GEN-LAST:event_filtroKeyReleased

    private void jLabel_SelectAllMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel_SelectAllMouseClicked
        jTable_Proprietarios.selectAll();
    }//GEN-LAST:event_jLabel_SelectAllMouseClicked

      private void RelPropLoca(List<cPropImov> lista, String pAtivo) {
        JRBeanCollectionDataSource jrds = new JRBeanCollectionDataSource(lista);

        Map parametros = new HashMap();
        parametros.put("propstatus", pAtivo.toUpperCase());
        parametros.put("logo", "resources/logos/boleta/" + VariaveisGlobais.marca.trim() + ".gif");
        
        try {
            String fileName = System.getProperty("user.dir") + "/" + "reports/PropLoca.jasper";
            JasperPrint print = JasperFillManager.fillReport(fileName, parametros, jrds);

            // Create a PDF exporter
            JRExporter exporter = new JRPdfExporter();

            String sFileName = new tempFile("pdf").getsPathNameExt();
            String pathName = new tempFile().getTempPath();
            String docName = new tempFile().getTempFileName(sFileName);
            
            // Configure the exporter (set output file name and print object)
            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, docName);
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);

            // Export the PDF file
            exporter.exportReport();
            
            new toPreview(docName);
        } catch (JRException e) {
            e.printStackTrace();
            System.exit(1);
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }        
    }

    private void BuildTable(JTable grade, Object[][] data) {
        // Limpa grade
        try { tabela.Clear(grade); } catch (Exception e) {}
        
        Integer[] tam = {30,300,100};
        String[] col = {"rgprp","nome","cpf/cnpj"};
        Boolean[] edt = {false,false,false};
        String[] aln = {"C","L","C"};
        
        for (Object[] dado : data) {
            tabela.insert(data, dado);
        }
        
        if (data.length > 0) tabela.Show(grade, data, tam, aln, col, edt);
        
        sorter = new TableRowSorter<TableModel>(grade.getModel());
        grade.setRowSorter(sorter);        
    }
 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnClear;
    private javax.swing.JTextField filtro;
    private javax.swing.JButton jBtnListar;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel_SelectAll;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_Proprietarios;
    private javax.swing.JButton jbtnPreview;
    private javax.swing.JComboBox jcbStatus;
    // End of variables declaration//GEN-END:variables
}