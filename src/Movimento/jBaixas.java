/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Movimento;

import Funcoes.*;
import Protocolo.Calculos;
import Protocolo.DepuraCampos;
import Protocolo.DivideCC;
import Protocolo.ReCalculos;
import boleta.Baixa;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.AWTKeyStroke;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.JRPdfExporter;

/**
 *
 * @author supervisor
 */
public class jBaixas extends javax.swing.JInternalFrame {
    Db conn = VariaveisGlobais.conexao;
    String rcampo = "";
    
    int[] santander = {41,53,70,77,78,92,78,92,138,145};
    int[] caixa     = {47,57,74,81,82,96,78,92,146,153};
    
    int[] banco = null;

    /**
     * Creates new form jBaixas
     */
    public jBaixas() {
        initComponents();
        
        // Icone da tela
        ImageIcon icone = new FlatSVGIcon("menuIcons/baixaBoletas.svg",16,16);
        setFrameIcon(icone);
        
        // Colocando enter para pular de campo
        HashSet conj = new HashSet(this.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));
        conj.add(AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_ENTER, 0));
        this.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, conj);
        
        jDtLancado.setDate(new Date());
        
        String[][] cab = new String[][] {{"nnumero","vencimento","recebimento","vr do recibo","vr recebido","diferenca","campos","rgprp","rgimv","contrato"},
                                         {"80","80","80","80","100","100","0","0","0","0"}};
        TableControl.header(jLancamentos, cab);
        
        ListaBancos();
        
        banco = santander;
        
    }

    private void ListaBancos() {
        jcbxbanco.removeAllItems();
        String sql = "SELECT b.codigo, b.nome FROM bancos b WHERE (SELECT b.nbanco FROM contas_boletas b WHERE b.nbanco = b.codigo UNION SELECT d.nbanco FROM bancos_digital d WHERE d.nbanco = b.codigo) ORDER BY lower(b.codigo);";
        ResultSet rs = conn.OpenTable(sql, null);
        try {
            while (rs.next()) {
                String tbanco = rs.getString("codigo");
                String tnome = rs.getString("nome");
                
                jcbxbanco.addItem(tbanco + " - " + tnome);
            }
        } catch (Exception e) {}
        conn.CloseTable(rs);
    }
    
    private void adcBol(String[] boleta) {
        boolean achei = false;
        for (int i = 0;i<jLancamentos.getRowCount();i++) {
            if (jLancamentos.getModel().getValueAt(i, 0).toString().equalsIgnoreCase(boleta[0])) {
                achei = true; break;
            }
        }
        if (!achei) {
            String[] align = new String[] {"C","C","C","R","R","C","L","L","L","L"};
            TableControl.add(jLancamentos, new String[][]{boleta,align}, true);

            float vrrecebido = 0;
            for (int i = 0;i<jLancamentos.getRowCount();i++) {
                vrrecebido += LerValor.StringToFloat(jLancamentos.getModel().getValueAt(i, 4).toString());
            }
            jVrBordero.setText(LerValor.floatToCurrency(vrrecebido,2));
        } else  JOptionPane.showMessageDialog(null, "Nosso Número já lançado!!!", "Atenção", JOptionPane.INFORMATION_MESSAGE);        
    }
    
    private void delBol(int row) {
        TableControl.del(jLancamentos, row);
        float vrrecebido = 0;
        for (int i = 0;i<jLancamentos.getRowCount();i++) {
            vrrecebido += LerValor.StringToFloat(jLancamentos.getModel().getValueAt(i, 4).toString());
        }
        jVrBordero.setText(LerValor.floatToCurrency(vrrecebido,2));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    private float CalcularRecibo(String rgprp, String rgimv, String contrato, String vecto, String recto) {
        float exp = 0, multa = 0, juros = 0, correcao = 0;
        

        if ("".equals(vecto.trim())) { return 0; }

        ReCalculos rc = new ReCalculos();
        try {
            rc.Inicializa(rgprp, rgimv, contrato);
        } catch (SQLException ex) { return 0; }

        // Seta data do recebimento no calculo
        rc.setCalcDate(Dates.StringtoDate(recto, "dd/MM/yyyy"));
        
        String campo = "";
        String sql = "SELECT * FROM recibo WHERE contrato = '" + contrato +
                     "' AND dtvencimento = '" + Dates.DateFormata("yyyy-MM-dd", 
                     Dates.StringtoDate(vecto, "dd-MM-yyyy")) + "';";
        ResultSet pResult = conn.OpenTable(sql, null);
        try {
            if (pResult.first()) {
                campo = pResult.getString("campo");
                rcampo = campo;
            }
        } catch (SQLException ex) {
            rcampo = "";
        }
        conn.CloseTable(pResult);

        try {
            exp = rc.TaxaExp(campo);
        } catch (SQLException ex) {}

        try {
            multa = rc.Multa(campo, vecto, false);
        } catch (SQLException ex) {}

        try {
            juros = rc.Juros(campo, vecto);
        } catch (SQLException ex) {}

        try {
            correcao = rc.Correcao(campo, vecto);
        } catch (SQLException ex) {}

        float tRecibo = 0;
        tRecibo = ReCalculos.RetValorCampos(campo);

        return tRecibo + exp + multa + juros + correcao;
    }
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jnnumero = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jDtvecto = new com.toedter.calendar.JDateChooser("dd/MM/yyyy", "##/##/#####", '_');
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jVrBoleta = new javax.swing.JFormattedTextField();
        jVrRecebido = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jLancar = new javax.swing.JButton();
        jAutomatico = new javax.swing.JCheckBox();
        jDtRecto = new javax.swing.JTextField();
        try{
            javax.swing.text.MaskFormatter tdtrecto= new javax.swing.text.MaskFormatter("##/##/####");
            jDtRecto = new javax.swing.JFormattedTextField(tdtrecto);
        }
        catch (Exception e){
        }
        jScrollPane1 = new javax.swing.JScrollPane();
        jLancamentos = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jDtBordero = new com.toedter.calendar.JDateChooser("dd/MM/yyyy", "##/##/#####", '_');
        jLabel7 = new javax.swing.JLabel();
        jDtLancado = new com.toedter.calendar.JDateChooser("dd/MM/yyyy", "##/##/#####", '_');
        jLabel8 = new javax.swing.JLabel();
        jVrBordero = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jcbxbanco = new javax.swing.JComboBox();
        btRetorno = new javax.swing.JButton();
        jBaixar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle(".:: Baixa de Boletas");
        setVisible(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("NNumero:");

        jnnumero.setToolTipText("Pressione <F2> para gerar o numero completo...");
        jnnumero.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jnnumeroFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jnnumeroFocusLost(evt);
            }
        });
        jnnumero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jnnumeroKeyReleased(evt);
            }
        });

        jLabel2.setText("Dt.Recebto:");

        jDtvecto.setDate(new java.util.Date(-2208977612000L));

        jLabel3.setText("Dt.Vencimento:");

        jLabel4.setText("Valor Calculado:");

        jVrBoleta.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        jVrBoleta.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jVrBoleta.setText("0,00");

        jVrRecebido.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        jVrRecebido.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jVrRecebido.setText("0,00");
        jVrRecebido.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jVrRecebidoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jVrRecebidoFocusLost(evt);
            }
        });
        jVrRecebido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jVrRecebidoActionPerformed(evt);
            }
        });

        jLabel5.setText("Valor Recebido:");

        jLancar.setText("Lançar");
        jLancar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLancarActionPerformed(evt);
            }
        });

        jAutomatico.setText("Lançar Diferença (Encargos) automaticamente no próximo mês.");
        jAutomatico.setEnabled(false);

        jDtRecto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDtRectoFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jVrBoleta, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jVrRecebido, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLancar, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jAutomatico)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jnnumero, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDtRecto, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDtvecto, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jnnumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jDtRecto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDtvecto, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLancar)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jVrRecebido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jVrBoleta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jAutomatico)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLancamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jLancamentos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jLancamentosKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jLancamentos);

        jLabel6.setText("Dt.Borderô:");

        jLabel7.setText("Dt.Lançamento::");

        jDtLancado.setEnabled(false);

        jLabel8.setText("Total Boletas:");

        jVrBordero.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        jVrBordero.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jVrBordero.setText("0,00");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Selecione o banco das baixas:"));

        btRetorno.setText("Retorno");
        btRetorno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRetornoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jcbxbanco, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btRetorno)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbxbanco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btRetorno))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        jBaixar.setText("Baixar Boletas");
        jBaixar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBaixarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDtBordero, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDtLancado, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jVrBordero, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jBaixar, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDtBordero, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDtLancado, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(jVrBordero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBaixar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jnnumeroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jnnumeroFocusLost
        try {
            String[] aCampos = {"rgprp","rgimv","contrato","dtvencimento","nnumero"};

            String banco = jcbxbanco.getSelectedItem().toString().substring(0, 3).trim();
            String leitura = jnnumero.getText().trim();
            String nnumero = leitura;
            
            Object[][] boleto = conn.ReadFieldsTable(aCampos, "recibo", "tag <> 'X' and not isnull(nnumero) AND nnumero regexp '" + nnumero + "$'");
            
            if (boleto != null) {
                String rgprp = boleto[0][3].toString();
                String rgimv = boleto[1][3].toString();
                String contrato = boleto[2][3].toString();
                String vencimento = boleto[3][3].toString();
                String tnumero = boleto[4][3].toString().substring(0, 3);
                
                // Acha banco
                for (int i=0;i<jcbxbanco.getItemCount();i++) {
                    if (jcbxbanco.getItemAt(i).toString().substring(0, 3).equalsIgnoreCase(tnumero)) {
                        jcbxbanco.setSelectedIndex(i);
                        break;
                    }
                }
                
                jDtvecto.setDate(Dates.StringtoDate(vencimento, "yyyy/MM/dd"));
                jDtRecto.setText(Dates.DateFormata("dd/MM/yyyy", 
                        Dates.StringtoDate(vencimento,"yyyy-MM-dd")));
                
            }
        } catch (Exception ex) {}
    }//GEN-LAST:event_jnnumeroFocusLost

    private void jDtRectoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDtRectoFocusLost
        try {
            String[] aCampos = {"rgprp","rgimv","contrato","dtvencimento"};
            String banco = jcbxbanco.getSelectedItem().toString().substring(0, 3).trim();
            String leitura = jnnumero.getText().trim();
            String nnumero = leitura;
            Object[][] boleto = conn.ReadFieldsTable(aCampos, "recibo", "tag <> 'X' and not isnull(nnumero) AND nnumero regexp '" + nnumero + "$'");
            if (boleto != null) {
                String rgprp = boleto[0][3].toString();
                String rgimv = boleto[1][3].toString();
                String contrato = boleto[2][3].toString();
                String vencimento = boleto[3][3].toString();
                
                String recto = jDtRecto.getText();
                String vecto = Dates.DateFormata("dd/MM/yyyy", Dates.StringtoDate(vencimento, "yyyy-MM-dd"));
                float vrboleta = CalcularRecibo(rgprp, rgimv, contrato, vecto, recto);
                jVrBoleta.setValue(vrboleta);
                jVrRecebido.setValue(vrboleta);
            }
        } catch (Exception ex) {}
    }//GEN-LAST:event_jDtRectoFocusLost

    private void jLancarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLancarActionPerformed
        try {    
            String[] aCampos = {"rgprp","rgimv","contrato"};
            String nnumero = jnnumero.getText().trim();
            String banco = jcbxbanco.getSelectedItem().toString().substring(0, 3).trim();
            Object[][] boleto = conn.ReadFieldsTable(aCampos, "recibo", "tag <> 'X' AND not isnull(nnumero) and nnumero regexp '" + nnumero + "$'");
            if (boleto != null) {
                String rgprp = boleto[0][3].toString();
                String rgimv = boleto[1][3].toString();
                String contrato = boleto[2][3].toString();
        
                Float vrrecibo = LerValor.StringToFloat(jVrBoleta.getText());
                Float vrrecebido = LerValor.StringToFloat(jVrRecebido.getText());
                String vrdifdesc = LerValor.floatToCurrency(Math.abs(vrrecebido - vrrecibo),2);
                String[] bol = new String[] {nnumero,
                                            Dates.DatetoString(jDtvecto.getDate()),
                                            jDtRecto.getText(),
                                            jVrBoleta.getText(),
                                            jVrRecebido.getText(),
                                            vrdifdesc,
                                            rcampo,
                                            rgprp,
                                            rgimv,
                                            contrato
                                            };
                adcBol(bol);
            }
        } catch (Exception ex) {}
        
        Limpar();
        jcbxbanco.setEnabled(true);
        jnnumero.requestFocus();
    }//GEN-LAST:event_jLancarActionPerformed

    private void Limpar() {
        jnnumero.setText("");
        jDtRecto.setText("");
        jDtvecto.setDate(null);
        jVrBoleta.setText("0,00");
        jVrRecebido.setText("0,00");
        jLancar.setEnabled(false);        
    }
    
    private void jLancamentosKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLancamentosKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) { 
            delBol(jLancamentos.getSelectedRow());
        }
    }//GEN-LAST:event_jLancamentosKeyReleased

    private void jBaixarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBaixarActionPerformed
        String[][] lcto = new String[][] {{"",
                                           "",
                                           "",
                                           "",
                                           String.valueOf(LerValor.StringToFloat(LerValor.floatToCurrency(LerValor.StringToFloat(jVrBordero.getText()), 2))),
                                           "CT",
                                           "CRE",
                                           "BO",
                                           "BORDERO"}};
        float nAut = 0;
        
        nAut = (float)Autenticacao.getAut();
        if (!Autenticacao.setAut((double)nAut, 1)) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar autenticacão!!!\nChane o suporte técnico...", "Atenção", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        conn.LancarCaixa(new String[] {"", "", ""}, lcto,LerValor.FloatToString((int)nAut).replace(",0", ""));

        for (int i = 0;i<jLancamentos.getRowCount();i++) {
            TableModel md = jLancamentos.getModel();
            String trgprp = md.getValueAt(i, 7).toString();
            String trgimv = md.getValueAt(i, 8).toString();
            String tcontrato = md.getValueAt(i, 9).toString();
            String tvecto = md.getValueAt(i, 1).toString();
            String trecto = md.getValueAt(i, 2).toString();
            String tcampo = md.getValueAt(i, 6).toString().trim();
            String tdifer = md.getValueAt(i, 5).toString().trim();
            
            try {
                boolean sucesso = Distribuicao(trgprp, trgimv, tcontrato, LerValor.FloatToString((int)nAut).replace(",0", ""),tvecto, tcampo);
                if (!sucesso) { 
                    ExtornaRecibo(LerValor.FloatToString((int)nAut).replace(",0", "")); 
                    JOptionPane.showMessageDialog(null, "Banco de dados ocupado!!!\nOperação sem sucesso...\nInultilize o Recibo e tente novamente...", "Atenção", JOptionPane.ERROR_MESSAGE);
                } else {
                    try {
                        String sql = "UPDATE recibo SET tag = 'X', autenticacao = '" + LerValor.FloatToString((int)nAut).replace(",0", "") + "' WHERE contrato = '" + tcontrato + "' AND dtvencimento = '" + Dates.DateFormata("yyyy-MM-dd", Dates.StringtoDate(tvecto, "dd/MM/yyyy")) + "';";
                        conn.CommandExecute(sql);

                        sql = "UPDATE carteira SET dtultrecebimento = '" + Dates.DateFormata("yyyy-MM-dd",Dates.StringtoDate(tvecto,"dd-MM-yyyy")) + "' WHERE contrato = '" + tcontrato + "';";
                        conn.CommandExecute(sql);
                        
                        //if (jAutomatico.isSelected()) {
                        //    LancDif(tcontrato, "ENCARGOS", tdifer, tcampo, tvecto);
                        //}
                    
                    } catch (Exception e) {}
                }
            } catch (Exception err) {}
        }       
        

        Map parametros = new HashMap();
        parametros.put("logo", "resources/logos/boleta/" + VariaveisGlobais.marca.trim() + ".gif");
        parametros.put("aut", FuncoesGlobais.StrZero(String.valueOf((int)nAut), 7));
        
        List<Baixa> lista = new ArrayList<Baixa>();        
        Baixa Bean1 = new Baixa();
        for (int i = 0;i<jLancamentos.getRowCount();i++) {
            TableModel md = jLancamentos.getModel();
            String tnnum  = md.getValueAt(i, 0).toString();
            String tcontrato = md.getValueAt(i, 9).toString();
            Date tvecto = Dates.StringtoDate(md.getValueAt(i, 1).toString(),"dd-MM-yyyy");
            Date tpagto = Dates.StringtoDate(md.getValueAt(i, 2).toString(),"dd-MM-yyyy");
            float tvrrcb = LerValor.StringToFloat(md.getValueAt(i, 3).toString().trim());
            float tvrpgo = LerValor.StringToFloat(md.getValueAt(i, 4).toString().trim());
            String trgprp = md.getValueAt(i, 7).toString();
            float tdifer = LerValor.StringToFloat(md.getValueAt(i, 5).toString());

            Object[][] prop = null;
            try { prop = conn.ReadFieldsTable(new String[] {"nome"}, "proprietarios", "rgprp = '" + trgprp + "'"); } catch (Exception e) {}
            Object[][] inq = null;
            try { inq = conn.ReadFieldsTable(new String[] {"nomerazao"}, "locatarios", "contrato = '" + tcontrato + "'"); } catch (Exception e) {}
            
            Bean1 = new Baixa();
            Bean1.setrgprp(trgprp);
            Bean1.setnomep(prop[0][3].toString());
            Bean1.setcontrato(tcontrato);
            Bean1.setnomei(inq[0][3].toString());
            Bean1.setnnumero(tnnum);
            Bean1.setvencimento(tvecto);
            Bean1.setvrboleta(tvrrcb);
            Bean1.setpagamento(tpagto);
            Bean1.setvrrecebido(tvrpgo);
            Bean1.setdiferenca(tdifer);

            lista.add(Bean1);
        }            
        JRDataSource jrds = new JRBeanCollectionDataSource(lista);

        try {
            String fileName = "reports/rBaixas.jasper";
            JasperPrint print = JasperFillManager.fillReport(fileName, parametros, jrds);

            // Create a PDF exporter
            JRExporter exporter = new JRPdfExporter();

            new jDirectory("reports/Relatorios/" + Dates.iYear(new Date()) + "/" + Dates.Month(new Date()) + "/");
            String pathName = "reports/Relatorios/" + Dates.iYear(new Date()) + "/" + Dates.Month(new Date()) + "/";
            
            // Configure the exporter (set output file name and print object)
            String outFileName = pathName + "Baixas_" + Dates.DateFormata("ddMMyyyy", new Date()) + 
                   "_" + FuncoesGlobais.StrZero(String.valueOf((int)nAut), 7) + ".pdf";
            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName);
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);

            // Export the PDF file
            exporter.exportReport();
            
            new toPreview(outFileName);
        } catch (JRException e) {
            e.printStackTrace();
            System.exit(1);
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }        
        
        this.dispose();
    }//GEN-LAST:event_jBaixarActionPerformed

    private void LancDif(String contrato, String descr, String valor, String campo, String vecto) {
        String mContrato = contrato;
        Object[][] aDados = null;
        try {
            aDados = this.conn.ReadFieldsTable(new String[] {"rgprp", "rgimv"}, "locatarios", "contrato = '" + mContrato + "'");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        String rgprp = "";
        String rgimv = "";
        if (aDados != null) {
            rgprp = aDados[0][3].toString();
            rgimv = aDados[1][3].toString();
        }

        SimpleDateFormat fmt = new SimpleDateFormat("yyyy/MM/dd");
        int i=0;

        int qtde = 1;

        String mTipo = "";
        mTipo = "AL:LQ"; 
        mTipo += ":IP";
        String mTipo2 = mTipo;
        try {if (":".equals(mTipo.substring(0, 1))) mTipo = mTipo.substring(1);} catch (Exception e) {}
        String mCpoDesc = ";DF:2:" + FuncoesGlobais.GravaValor(valor) + ":0000:DF:RZ:" + mTipo + ":DS" + FuncoesGlobais.CriptaNome(descr.trim().toUpperCase());
        
        // Proximo Vecto 02/06/2014
        String sqlx = "SELECT ProxVecto('" + campo + "','" + vecto +"') AS PVecto";
        String PVecto = null;
        try {
            ResultSet rs = conn.OpenTable(sqlx, null);
            while (rs.next()) {
                PVecto = rs.getString("PVecto");
            }
            conn.CloseTable(rs);
        } catch (Exception e) {}
        String mes = PVecto.substring(3, 5);
        String ano = PVecto.substring(6);
        
        String mMes = mes;
        String mAno = FuncoesGlobais.StrZero(ano, 4);

        ResultSet hRs = this.conn.OpenTable("SELECT * FROM recibo WHERE contrato = '" + mContrato + "' AND dtvencimento >= CONCAT('" + mAno + "','-','" + mMes + "','-',DAY(dtvencimento)) ORDER BY dtvencimento;", null);

        try {
            while (hRs.next()) {
                String newCampo = hRs.getString("campo").trim().toUpperCase();
                newCampo += mCpoDesc;

                java.sql.Date venc = (java.sql.Date) hRs.getDate("dtvencimento");
                String gDtVecto = "0000-00-00";
                try {
                    gDtVecto = fmt.format(venc);
                } catch (Exception ex) { ex.printStackTrace(); }

                if (!"X".equals(hRs.getString("tag"))) {
                    this.conn.CommandExecute("UPDATE recibo SET campo = '" + newCampo + "' WHERE contrato = '" + mContrato + "' AND dtvencimento = '" + gDtVecto + "';");
                    i += 1;
                }
                mMes = hRs.getString("dtvencimento").substring(5, 7);
                mAno = hRs.getString("dtvencimento").substring(0, 4);
                if (i == qtde) break;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        conn.CloseTable(hRs);

        if (i < qtde) {
            int j = qtde;
            int k = (i <=0 ? 1 : i + 1);
            int iMes = Integer.parseInt(mMes);
            int iAno = Integer.parseInt(mAno);
            String mValor = FuncoesGlobais.GravaValor(valor);
            String mDesc = descr.trim().toUpperCase(); 
            for (;k<=j; k += 1) {
                ++iMes;
                if (iMes > 12) {
                    iAno++;
                    mAno = FuncoesGlobais.StrZero(String.valueOf(iAno), 4);
                    iMes = 1;
                }
                String mRef = FuncoesGlobais.StrZero(String.valueOf(iMes), 2) + "/" + mAno;
                String sql = "INSERT INTO diferenca (rgprp, rgimv, contrato, descricao, valor, referencia, sigla) VALUES ('" +
                        rgprp + "','" + rgimv + "','" + mContrato + "','" + mDesc + "','" + mValor + "','" + mRef + "','" + mTipo2 + "');";

                conn.CommandExecute(sql);
            }
        }
    }
    
    private void jVrRecebidoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jVrRecebidoFocusGained
        jVrRecebido.selectAll();
    }//GEN-LAST:event_jVrRecebidoFocusGained

    private void jVrRecebidoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jVrRecebidoFocusLost
        jLancar.setEnabled(LerValor.StringToFloat(jVrRecebido.getText()) > 0);
    }//GEN-LAST:event_jVrRecebidoFocusLost

    private void jnnumeroFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jnnumeroFocusGained
        jLancar.setEnabled(false);
    }//GEN-LAST:event_jnnumeroFocusGained

    private void btRetornoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRetornoActionPerformed
        String[] retorno = {};
        
        String caminho = null;  
        JFileChooser dFC = new JFileChooser();
        dFC.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);  
        int resposta = dFC.showOpenDialog(null);  
        if (resposta == JFileChooser.APPROVE_OPTION) {  
           caminho = dFC.getSelectedFile().getPath();  
        }
        if (caminho != null) {
              try {
                  retorno = Ler(caminho);
              } catch (IOException ex) {
                  Logger.getLogger(jBaixas.class.getName()).log(Level.SEVERE, null, ex);
              }
        }
        String msg = "";
        if (retorno.length > 0) {
            if (FuncoesGlobais.IndexOf(retorno, "Banco a baixar incorreto!!!") > -1) {
                JOptionPane.showMessageDialog(null, "Banco a baixar incorreto!!!", "Atenção", JOptionPane.INFORMATION_MESSAGE);
            } else {
                for (int i =0;i<retorno.length;i++) {
                    msg += retorno[i] + "\n";
                }
                JOptionPane.showMessageDialog(null, msg, "Atenção", JOptionPane.INFORMATION_MESSAGE);
            }
        } 
    }//GEN-LAST:event_btRetornoActionPerformed

    private void jnnumeroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jnnumeroKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            PegaNNumero pnn = new PegaNNumero(null, true);
            pnn.SetaBanco(jcbxbanco.getSelectedItem().toString());
            pnn.setVisible(true);
            String wNnumero = pnn.GetNNumero();
            if (wNnumero != null) jnnumero.setText(wNnumero);
            jnnumero.requestFocus();
        }
    }//GEN-LAST:event_jnnumeroKeyReleased

    private void jVrRecebidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jVrRecebidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jVrRecebidoActionPerformed

    private String[] Ler(String file) throws FileNotFoundException, IOException {
        String[] retorno = {};
        FileReader fileReader = new FileReader(file);
        BufferedReader reader = new BufferedReader(fileReader);
        String data = null; String[][] lote = {};
        while((data = reader.readLine()) != null){
            if (!data.substring(0, 3).equalsIgnoreCase(jcbxbanco.getSelectedItem().toString().substring(0, 3))) {
                retorno = FuncoesGlobais.ArrayAdd(retorno, "Banco a baixar incorreto!!!");
                break;
            }
            
            //System.out.println(data);
            if (data.substring(7, 8).equalsIgnoreCase("3") && data.substring(13, 14).equalsIgnoreCase("T")) {
                lote = processaT(lote, data);
            }
            if (data.substring(7, 8).equalsIgnoreCase("3") && data.substring(13, 14).equalsIgnoreCase("U")) {
                lote = processaU(lote, data);
            }
        }
        fileReader.close();
        reader.close();        
        
        for (int i=0;i<lote.length;i++) {
            //                 nnumro               vencimento           recebimento          vr do recibo          vr recebido
            System.out.println(lote[i][0] + " - " + lote[i][1] + " / " + lote[i][4] + " = " + lote[i][2] + " => " + lote[i][3]); 
            try {    
                String[] aCampos = {"rgprp","rgimv","contrato","campo","dtvencimento"};
                String nnumero = lote[i][0];
                String banco = jcbxbanco.getSelectedItem().toString().substring(0, 3).trim();
                Object[][] boleto = conn.ReadFieldsTable(aCampos, "recibo", "tag <> 'X' AND not isnull(nnumero) and nnumero regexp '" + nnumero + "$'");
                if (boleto != null) {
                    String rgprp = boleto[0][3].toString();
                    String rgimv = boleto[1][3].toString();
                    String contrato = boleto[2][3].toString();
                    String tcampo = boleto[3][3].toString();
                    String tdtrcvcto = Dates.StringtoString(boleto[4][3].toString(),"yyyy-MM-dd","dd/MM/yyyy");
                    
                    String tdtvcto = Dates.StringtoString(lote[i][1], "ddMMyyyy", "dd/MM/yyyy");
                    String tdtpagt = Dates.StringtoString(lote[i][4], "ddMMyyyy", "dd/MM/yyyy");
                    String tvrrecibo = LerValor.FormatNumber(StringManager.Right(lote[i][3],10), 2);
                    String tvrpago = LerValor.FormatNumber(StringManager.Right(lote[i][3],10), 2);
                    
                    if (tdtvcto.equalsIgnoreCase(tdtrcvcto)) {
                        Float vrrecibo = CalcularRecibo(rgprp, rgimv, contrato, tdtrcvcto, tdtpagt);
                                         //LerValor.StringToFloat(LerValor.FormatNumber(StringManager.Right(lote[i][3],10),2));
                        Float vrrecebido = LerValor.StringToFloat(tvrpago);
                        String vrdifdesc = LerValor.floatToCurrency(Math.abs(vrrecebido - vrrecibo),2);
                        String[] bol = new String[] {nnumero,
                                                    tdtvcto,
                                                    tdtpagt,
                                                    LerValor.floatToCurrency(vrrecibo, 2),
                                                    LerValor.floatToCurrency(vrrecebido, 2),
                                                    vrdifdesc,
                                                    tcampo,
                                                    rgprp,
                                                    rgimv,
                                                    contrato
                                                    };
                        adcBol(bol);
                    } else {
                        retorno = FuncoesGlobais.ArrayAdd(retorno, nnumero + " Data de Vencimento é diferente!!!");
                    }
                } else {
                    retorno = FuncoesGlobais.ArrayAdd(retorno, nnumero + " Inexistente!!!");
                }
            } catch (Exception ex) {retorno = FuncoesGlobais.ArrayAdd(retorno, "Erro ao ler recibo!!!");}
        }        
        
        return retorno;
    }

    private String[][] processaT(String[][] lote, String linha) {
        // posicao 41-53 - nosso numero
        String tnn = linha.substring(banco[0] - 1, banco[1]).toString();
        // pocicao 70-77 - vencimento
        String tvc = linha.substring(banco[2] - 1, banco[3]).toString();
        // posicao 78-92 - valor
        String tvr = linha.substring(banco[4] - 1, banco[5]).toString();
        
        //System.out.print(tnn + " - " + tvc + " => " + tvr);
        
        return FuncoesGlobais.ArraysAdd(lote, new String[] {tnn, tvc, tvr});
    }

    private String[][] processaU(String[][] lote, String linha) {
        // posicao 78-92 - Valor pago
        String tvp = linha.substring(banco[6] - 1,banco[7]).toString();
        String[] slote = lote[lote.length - 1];
        slote = FuncoesGlobais.ArrayAdd(slote, tvp);
        lote[lote.length - 1] = slote;

        // pocição 146-153 - Data pagto/Ocorrencia
        String tdp = linha.substring(banco[8] - 1, banco[9]).toString();
        String[] nlote = lote[lote.length - 1];
        nlote = FuncoesGlobais.ArrayAdd(nlote, tdp);
        lote[lote.length - 1] = nlote;
        
        return lote;
    }
    
    private void ExtornaRecibo(String nAut) {
        try {
            String sql = "";
            sql = FuncoesGlobais.Subst("DELETE FROM cheques WHERE ch_autenticacao = '&1.'", new String[] {nAut});
            conn.CommandExecute(sql);

            sql = FuncoesGlobais.Subst("DELETE FROM razao WHERE rc_aut = '&1.'", new String[] {nAut});
            conn.CommandExecute(sql);

            sql = FuncoesGlobais.Subst("DELETE FROM retencao WHERE rc_aut = '&1.'", new String[] {nAut});
            conn.CommandExecute(sql);

            sql = FuncoesGlobais.Subst("DELETE FROM imposto WHERE rc_aut = '&1.'", new String[] {nAut});
            conn.CommandExecute(sql);

            sql = FuncoesGlobais.Subst("DELETE FROM extrato WHERE rc_aut = '&1.'", new String[] {nAut});
            conn.CommandExecute(sql);

            sql = FuncoesGlobais.Subst("UPDATE recibo SET TAG = ' ', autenticacao = '0' WHERE autenticacao = '&1.'", new String[] {nAut});
            conn.CommandExecute(sql);        
        } catch (Exception e) {}
    }
    
//    private boolean Distribuicao(String rgprp, String rgimv, String contrato, String nAut, String vencto, String campo) throws SQLException {
//        DepuraCampos zCampos; String[] zCampo;
//
//        String[][] aCC = DivideCC.Divisao(rgimv);
//        String[][] jCampo;
//        String[] gmpCampo, difCampo;
//        String[][] tmpCampo;
//        String[][] divaCampo = {};
//        String[] admValores = {};
//        String[][] gCampo = {};
//
//        String[] admPer = null;
//        admPer = new ReCalculos().percADM(rgprp, rgimv);
//
//        String[][] dvCampo;
//
//        float fDC = 0, fDF = 0;
//
//        float fComissao = new ReCalculos().percComissao(rgprp, rgimv);
//        String sComissao = FuncoesGlobais.GravaValores(String.valueOf(fComissao).replace(".", ","), 3);
//
//        String[] sVenctos = {vencto};
//
//        int i = 0;
//
//        String tCampo = CriticaCampo(rgprp, rgimv, contrato, sVenctos[i], campo);
//
//        String[] aCampo = tCampo.split(";");
//
//        // Captura descontas/diferencas
//        jCampo = FuncoesGlobais.treeArray(FuncoesGlobais.join(aCampo, ";"), false);
//        gmpCampo = null; fDC = 0; 
//        difCampo = null; fDF = 0;
//        for (int w=0;w<jCampo.length;w++) {
//            gmpCampo = null;
//            gmpCampo = FuncoesGlobais.treeSeekArray2(jCampo, "DC", w, w);
//            if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
//                fDC += ("LQ".equals(gmpCampo[4]) ? LerValor.StringToFloat(gmpCampo[3]) : 0);
//            } else fDC += 0;
//
//            difCampo = null;
//            difCampo = FuncoesGlobais.treeSeekArray2(jCampo, "DF", w, w);                        
//            if (Integer.valueOf(difCampo[0]) > -1 && Integer.valueOf(difCampo[1]) > -1) {
//                fDF += ("LQ".equals(difCampo[4]) ? LerValor.StringToFloat(difCampo[3]) : 0);
//            } else fDF += 0;
//        }
//        // ------------- FIM Descontos/Diferenças
//
//        for (int j=0; j < aCampo.length; j++) {
//            int k = aCampo[j].indexOf("AL");
//            if (k > -1) {
//                //zCampos = new DepuraCampos(aCampo[j]);
//                zCampos = new DepuraCampos(tCampo);
//                VariaveisGlobais.ccampos = aCampo[j];
//                zCampos.SplitCampos();
//                zCampo = zCampos.Depurar(j); 
//
//                if ("AL".equals(aCampo[j].split(":")[4])) {
//                    float calc1 = LerValor.StringToFloat(zCampo[1]) + fDF - fDC;
//                    float calc2 = fComissao / 100;
//                    float reslt = calc1 * calc2;
//                    String valor = String.valueOf(reslt).replace(".", ",");
//                    aCampo[j] += ":CM" + FuncoesGlobais.GravaValores(valor, 2);
//                }
////                }
//                tmpCampo = FuncoesGlobais.treeArray(FuncoesGlobais.join(aCampo, ";"),false);
//
//                if (!"DC".equals(aCampo[j].split(":")[4]) || !"DF".equals(aCampo[j].split(":")[4]) || !"SG".equals(aCampo[j].split(":")[4])) {
//                    admValores = new String[] {};
//                    // Separa valores da ADM
//                    // Separa Multa
//                    gmpCampo = FuncoesGlobais.treeSeekArray(tmpCampo, "MU", 0);
//                    if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
//                        float valor1 = LerValor.StringToFloat(gmpCampo[3]) - (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(admPer[0]) / 100));
//                        String valor = String.valueOf(valor1).replace(".", ",");
//                        if (valor1 > 0) {
//                            tmpCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "MU" + FuncoesGlobais.GravaValores(valor, 2);
//                        } else {
//                            tmpCampo = FuncoesGlobais.ArraysDelSub(tmpCampo, Integer.valueOf(gmpCampo[0]), Integer.valueOf(gmpCampo[1]));
//                        }
//                        float valor3 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(admPer[0]) / 100));
//                        String valor_mu = String.valueOf(valor3).replace(".", ",");
//                        admValores = FuncoesGlobais.ArrayAdd(admValores, valor_mu);
//                    } else {
//                        admValores = FuncoesGlobais.ArrayAdd(admValores, "0");
//                    }
//
//                    // Juros
//                    gmpCampo = FuncoesGlobais.treeSeekArray(tmpCampo, "JU", 0);
//                    if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
//                        float valor1 = LerValor.StringToFloat(gmpCampo[3]) - (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(admPer[1]) / 100));
//                        String valor = String.valueOf(valor1).replace(".", ",");
//                        if (valor1 > 0) {
//                            tmpCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "JU" + FuncoesGlobais.GravaValores(valor, 2);
//                        } else {
//                            tmpCampo = FuncoesGlobais.ArraysDelSub(tmpCampo, Integer.valueOf(gmpCampo[0]), Integer.valueOf(gmpCampo[1]));
//                        }
//                        float valor3 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(admPer[1]) / 100));
//                        String valor_ju = String.valueOf(valor3).replace(".", ",");
//                        admValores = FuncoesGlobais.ArrayAdd(admValores, valor_ju);
//                    } else {
//                        admValores = FuncoesGlobais.ArrayAdd(admValores, "0");
//                    }
//
//                    // Correção
//                    gmpCampo = FuncoesGlobais.treeSeekArray(tmpCampo, "CO", 0);
//                    if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
//                        float valor1 = LerValor.StringToFloat(gmpCampo[3]) - (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(admPer[2]) / 100));
//                        String valor = String.valueOf(valor1).replace(".", ",");
//                        if (valor1 > 0) {
//                            tmpCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "CO" + FuncoesGlobais.GravaValores(valor, 2);
//                        } else {
//                            tmpCampo = FuncoesGlobais.ArraysDelSub(tmpCampo, Integer.valueOf(gmpCampo[0]), Integer.valueOf(gmpCampo[1]));
//                        }
//                        float valor3 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(admPer[2]) / 100));
//                        String valor_co = String.valueOf(valor3).replace(".", ",");
//                        admValores = FuncoesGlobais.ArrayAdd(admValores, valor_co);
//                    } else admValores = FuncoesGlobais.ArrayAdd(admValores, "0");
//
//                    // Expediente
//                    gmpCampo = FuncoesGlobais.treeSeekArray(tmpCampo, "EP", 0);
//                    if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
//                        float valor1 = LerValor.StringToFloat(gmpCampo[3]) - (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(admPer[3]) / 100));
//                        String valor = String.valueOf(valor1).replace(".", ",");
//                        if (valor1 > 0) {
//                            tmpCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "EP" + FuncoesGlobais.GravaValores(valor, 2);
//                        } else {
//                            tmpCampo = FuncoesGlobais.ArraysDelSub(tmpCampo, Integer.valueOf(gmpCampo[0]), Integer.valueOf(gmpCampo[1]));
//                        }
//                        float valor3 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(admPer[3]) / 100));
//                        String valor_ep = String.valueOf(valor3).replace(".", ",");
//                        admValores = FuncoesGlobais.ArrayAdd(admValores, valor_ep);
//                    } else admValores = FuncoesGlobais.ArrayAdd(admValores, "0");
//
//                    // Separa comissão
//                    gmpCampo = FuncoesGlobais.treeSeekArray(tmpCampo, "CM", 0);
//                    if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
//                        admValores = FuncoesGlobais.ArrayAdd(admValores, gmpCampo[3]);
//                    } else admValores = FuncoesGlobais.ArrayAdd(admValores, "0");
//
//                    aCampo[j] = FuncoesGlobais.join(tmpCampo[j], ":");
//
//                    // Envio dos Valores da ADM
//                    if (LerValor.StringToFloat(admValores[0]) + LerValor.StringToFloat(admValores[1]) + LerValor.StringToFloat(admValores[2]) + LerValor.StringToFloat(admValores[3]) > 0) {
//                        gCampo = FuncoesGlobais.ArraysAdd(gCampo, new String[] {admValores[0], admValores[1], admValores[2], admValores[3], sVenctos[i]});
//                    }
//                }
//            }
//        }
//
//        // Clona Variavel
//        String[] oCampo = aCampo;
//
//        for (int l=0;l<aCC.length;l++) {
//            dvCampo = FuncoesGlobais.treeArray(FuncoesGlobais.join(aCampo, ";"), false);
//            for (int m=0;m<dvCampo.length;m++){
//                //';
//                float part1 = LerValor.StringToFloat(LerValor.FormatNumber(dvCampo[m][2], 2));
//                float part2 = LerValor.StringToFloat(aCC[l][1].replace(".", ",")) / 100;
//                if (FuncoesGlobais.IndexOf(dvCampo[m], "AL") < 0) part2 = 1;
//                String vrfinal = LerValor.FloatToString(part1 * part2);
//
//                //dvCampo[m][2] = winger.GravarValor(winger.LerValor(dvCampo[m][2]) * If(FuncoesGlobais.ArraFind(dvCampo[m], "AL") < 0, 1, (aCC[l][1] / 100)))
//
//                if (aCC[l][2].trim().toUpperCase().equalsIgnoreCase("TRUE")) {
//                    //'; divide tudo
//                    float fValor1 = LerValor.StringToFloat(LerValor.FormatNumber(dvCampo[m][2], 2));
//                    float fValor2 = Float.valueOf(aCC[l][1].replace(",", ".")) / 100;
//                    dvCampo[m][2] = FuncoesGlobais.GravaValores(LerValor.FloatToString(fValor1 * fValor2),2);
//                } else {
//                    dvCampo[m][2] = FuncoesGlobais.GravaValores(vrfinal, 2);                    
//                }
//
//                if ("AL".equals(dvCampo[m][4])) {
//                    // Separa Multa
//                    gmpCampo = new String[] {};
//                    gmpCampo = FuncoesGlobais.treeSeekArray(dvCampo, "MU", 0);
//                    if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
//                        float valor1 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(aCC[l][1]) / 100));
//                        String valor = String.valueOf(valor1).replace(".", ",");
//                        dvCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "MU" + FuncoesGlobais.GravaValores(valor, 2);
//                    }
//
//
//                    // Separa juros
//                    gmpCampo = new String[] {};
//                    gmpCampo = FuncoesGlobais.treeSeekArray(dvCampo, "JU", 0);
//                    if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
//                        float valor1 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(aCC[l][1]) / 100));
//                        String valor = String.valueOf(valor1).replace(".", ",");
//                        dvCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "JU" + FuncoesGlobais.GravaValores(valor, 2);
//                    }
//
//                    // Separa Correção
//                    gmpCampo = new String[] {};
//                    gmpCampo = FuncoesGlobais.treeSeekArray(dvCampo, "CO", 0);
//                    if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
//                        float valor1 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(aCC[l][1]) / 100));
//                        String valor = String.valueOf(valor1).replace(".", ",");
//                        dvCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "CO" + FuncoesGlobais.GravaValores(valor, 2);
//                    }
//
//                    // Separa Expediente
//                    gmpCampo = new String[] {};
//                    gmpCampo = FuncoesGlobais.treeSeekArray(dvCampo, "EP", 0);
//                    if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
//                        float valor1 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(aCC[l][1]) / 100));
//                        String valor = String.valueOf(valor1).replace(".", ",");
//                        dvCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "EP" + FuncoesGlobais.GravaValores(valor, 2);
//                    }
//
//                    // Separa Comissao
//                    gmpCampo = new String[] {};
//                    gmpCampo = FuncoesGlobais.treeSeekArray(dvCampo, "CM", 0);
//                    if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
//                        float valor1 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(aCC[l][1].replace(".", ",")) / 100));
//                        String valor = String.valueOf(valor1).replace(".", ",");
//                        dvCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "CM" + FuncoesGlobais.GravaValores(valor, 2);
//                    }
//                }
//            }
//
//            String[] tpCampo = {contrato.trim(), aCC[l][0], rgimv, FuncoesGlobais.SuperJoin(dvCampo, l == 0)};
//            divaCampo = FuncoesGlobais.ArraysAdd(divaCampo, tpCampo);
//        }
//
//        for (int l=0; l<aCC.length; l++) {
//            aCampo = null; aCampo = divaCampo[l][3].split(";");
//
//            String[] rCampo = {};
//            String[] eCampo = {};
//            String[] iCampo = {};
//
//            String[] lCampo = {};
//            String[] xCampo = {};
//            String[] pCampo = {};
//            String[] sCampo = {};
//
//            for (int j=0; j<aCampo.length; j++) {
//                String[] wCampo = aCampo[j].split(":");
//
//                int k = aCampo[j].indexOf("AL");
//                if (k > -1) lCampo = FuncoesGlobais.ArrayAdd(lCampo, aCampo[j]);
//
//                // Retenção
//                k = aCampo[j].indexOf("RT");
//                if (k > -1) sCampo = FuncoesGlobais.ArrayAdd(sCampo, aCampo[j]);
//
//                // Expediente
//                k = FuncoesGlobais.IndexOf(wCampo, "EP");
//                if (k > -1) pCampo = FuncoesGlobais.ArrayAdd(pCampo, "EP" + wCampo[k].substring(wCampo[k].length() - 10, wCampo[k].length()) + ":0000:EP");
//
//                // Taxas
//                k = aCampo[j].indexOf("AL");
//                if (k < 0) xCampo = FuncoesGlobais.ArrayAdd(xCampo, aCampo[j]);
//
//                // Campos Razao
//                k = aCampo[j].indexOf("RZ");
//                if (k > -1) rCampo = FuncoesGlobais.ArrayAdd(rCampo, aCampo[j]);
//
//                k = aCampo[j].indexOf("ET");
//                if (k > -1) eCampo = FuncoesGlobais.ArrayAdd(eCampo, aCampo[j]);
//
//                k = aCampo[j].indexOf("IP");
//                if (k > -1) iCampo = FuncoesGlobais.ArrayAdd(iCampo, aCampo[j]);
//            }
//
//            //String[] tpCampo = {lCampo, pCampo, xCampo, rCampo, eCampo, iCampo, sCampo};
//            String slCampo = "", spCampo = "", sxCampo = "", srCampo = "", seCampo = "", siCampo = "", ssCampo = "";
//            try {slCampo = FuncoesGlobais.join(lCampo, ";");} catch (Exception ex) {slCampo = "";}
//            try {spCampo = FuncoesGlobais.join(pCampo, ";");} catch (Exception ex) {spCampo = "";}
//            try {sxCampo = FuncoesGlobais.join(rCampo, ";");} catch (Exception ex) {sxCampo = "";}
//            try {srCampo = FuncoesGlobais.join(rCampo, ";");} catch (Exception ex) {srCampo = "";}
//            try {seCampo = FuncoesGlobais.join(eCampo, ";");} catch (Exception ex) {seCampo = "";}
//            try {siCampo = FuncoesGlobais.join(iCampo, ";");} catch (Exception ex) {siCampo = "";}
//            try {ssCampo = FuncoesGlobais.join(sCampo, ";");} catch (Exception ex) {ssCampo = "";}
//            String finalCampos = slCampo + "," + spCampo + "," + sxCampo + "," + srCampo + "," + seCampo + "," + siCampo + "," + ssCampo;
//            divaCampo[l] = FuncoesGlobais.ArrayAdd(divaCampo[l], finalCampos);
//        }
//
//        boolean sucesso = true;
//        for (int l=0;l<gCampo.length;l++) {
//            String sADMCPOS = "";
//            for (int p=0;p<gCampo[l].length - 1;p++) {
//                if (LerValor.StringToFloat(gCampo[l][p]) != 0) {
//                    String sSql = "INSERT INTO razao (rgprp, campo, dtvencimento, dtrecebimento, rc_aut, tag) VALUES ('&1.','&2.','&3.','&4.','&5.',' ')";
//
//                    String par1 = "GG";
//                    String par2 = "GG:9:" +
//                                    FuncoesGlobais.GravaValores(gCampo[l][p],2) +
//                                    ":000000:GG:ET:" +
//                                    FuncoesGlobais.StrZero(nAut.trim(), 6) +
//                                    VariaveisGlobais.cContas.get("GG") +
//                                    FuncoesGlobais.Choose(p + 1,new String[] {"", "MU", "JU", "CO", "EP"}) +
//                                    ":" + Dates.DateFormata("yyyyMMdd", new Date()) +
//                                    ":CRE:DN:656877:" +
//                                    VariaveisGlobais.usuario;
//                    String par3 = Dates.DateFormata("yyyy-MM-dd", Dates.StringtoDate(sVenctos[i], "dd/MM/yyyy"));
//                    String par4 = Dates.DateFormata("yyyy-MM-dd", new Date());
//                    String par5 = nAut;
//                    sSql = FuncoesGlobais.Subst(sSql, new String[] {par1, par2, par3, par4, par5});
//
//                    try {
//                        // Grava no Razao
//                        conn.CommandExecute(sSql);
//                    } catch (Exception e) { sucesso = false; }
//
//                    sADMCPOS += FuncoesGlobais.Choose(p + 1, new String[] {"", "MU", "JU", "CO", "EP"}) + FuncoesGlobais.GravaValores(gCampo[l][p].replace(".", ","),2) + ":";
//                }
//            }
//            if (!"".equals(sADMCPOS)) {
//                sADMCPOS = sADMCPOS.substring(0, sADMCPOS.length() - 1);
//                conn.CreateArqAux();
//                String sSql = "INSERT INTO auxiliar (contrato, rgprp, rgimv, campo, dtvencimento, dtrecebimento, rc_aut, conta) VALUES ('&1.','&2.','&3.','&4.','&5.','&6.','&7.','&8.')";
//                String[] variavel = new String[] {contrato, rgprp, rgimv, sADMCPOS,
//                        Dates.DateFormata("yyyy-MM-dd",Dates.StringtoDate(gCampo[l][gCampo[l].length - 1],"dd/MM/yyyy")),
//                        Dates.DateFormata("yyyy-MM-dd", new Date()),
//                        nAut,
//                        "ADM"};
//                sSql = FuncoesGlobais.Subst(sSql, variavel);
//
//                try {
//                    conn.CommandExecute(sSql);
//                } catch (Exception e) { sucesso = false; }
//            }
//        }
//
//        for (int l=0;l<divaCampo.length;l++) {
//            // Splitar Itens do DivaCampos Elemento (4)
//            String[] divaSplit = divaCampo[l][4].split(",");
//
//            // gravar no arquivo auxiliar
//            conn.CreateArqAux();
//            String sSql = "INSERT INTO auxiliar (contrato, rgprp, rgimv, campo, dtvencimento, dtrecebimento, rc_aut, conta) VALUES ('&1.','&2.','&3.','&4.','&5.','&6.','&7.','&8.')";
//            sSql = FuncoesGlobais.Subst(sSql, new String[] {
//                    divaCampo[l][0],
//                    divaCampo[l][1],
//                    divaCampo[l][2],
//                    divaCampo[l][3],
//                    Dates.DateFormata("yyyy-MM-dd", Dates.StringtoDate(sVenctos[i], "dd/MM/yyyy")),
//                    Dates.DateFormata("yyyy-MM-dd", new Date()), nAut, "REC"});
//
//            try {
//                conn.CommandExecute(sSql);
//            } catch (Exception e) { sucesso = false; }
//
//            // gravar gravar razao na tabela
//            if (!"".equals(divaSplit[3].trim())) {
//                sSql = "INSERT INTO razao (contrato, rgprp, rgimv, campo, dtvencimento, dtrecebimento, rc_aut, tag) VALUES ('&1.','&2.','&3.','&4.','&5.','&6.','&7.', ' ')";
//                String[] par1 = {divaCampo[l][0],
//                                    divaCampo[l][1],
//                                    divaCampo[l][2],
//                                    divaSplit[3],
//                                    Dates.DateFormata("yyyy-MM-dd", Dates.StringtoDate(sVenctos[i], "dd/MM/yyyy")),
//                                    Dates.DateFormata("yyyy-MM-dd", new Date()),
//                                    nAut};
//                sSql = FuncoesGlobais.Subst(sSql, par1);
//
//                try {
//                    conn.CommandExecute(sSql);
//                } catch (Exception e) { sucesso = false; }
//            }
//
//            // gravar extrato na tabela
//            if (!"".equals(divaSplit[4].trim())) {
//                sSql = "INSERT INTO extrato (contrato, rgprp, rgimv, campo, dtvencimento, dtrecebimento, rc_aut, tag) VALUES ('&1.','&2.','&3.','&4.','&5.','&6.','&7.', ' ')";
//                String[] par1 = {divaCampo[l][0],
//                                    divaCampo[l][1],
//                                    divaCampo[l][2],
//                                    divaSplit[4],
//                                    Dates.DateFormata("yyyy-MM-dd", Dates.StringtoDate(sVenctos[i], "dd/MM/yyyy")),
//                                    Dates.DateFormata("yyyy-MM-dd", new Date()),
//                                    nAut};
//                sSql = FuncoesGlobais.Subst(sSql, par1);
//
//                try {
//                    conn.CommandExecute(sSql);
//                } catch (Exception e) { sucesso = false; }
//            }
//
//            // Grava imposto na tabela
//            if (!"".equals(divaSplit[5].trim())) {
//                sSql = "INSERT INTO imposto (contrato, rgprp, rgimv, campo, dtvencimento, dtrecebimento, rc_aut, tag) VALUES ('&1.','&2.','&3.','&4.','&5.','&6.','&7.',' ')";
//                String[] par1 = {divaCampo[l][0],
//                                    divaCampo[l][1],
//                                    divaCampo[l][2],
//                                    divaSplit[5],
//                                    Dates.DateFormata("yyyy-MM-dd", Dates.StringtoDate(sVenctos[i], "dd/MM/yyyy")),
//                                    Dates.DateFormata("yyyy-MM-dd", new Date()),
//                                    nAut};
//                sSql = FuncoesGlobais.Subst(sSql, par1);
//
//                try {
//                    conn.CommandExecute(sSql);
//                } catch (Exception e) { sucesso = false; }
//            }
//
//            // Grava Retenções na tabela
//            if (divaSplit.length > 6) {
//                String[] retencaoSplit = divaSplit[6].split(";");
//                for (int n=0;n<retencaoSplit.length;n++) {
//                    sSql = "INSERT INTO retencao (contrato, rgprp, rgimv, campo, vencimento, rc_aut, tag, gat, rt_aut) VALUES ('&1.','&2.','&3.','&4.','&5.','&6.','&7.','&8.','&9.')";
//                    String[] par1 = {divaCampo[l][0],
//                                        divaCampo[l][1],
//                                        divaCampo[l][2],
//                                        retencaoSplit[n],
//                                        Dates.DateFormata("yyyy-MM-dd", Dates.StringtoDate(sVenctos[i], "dd/MM/yyyy")),
//                                        nAut,"0"," ","0"};
//                    sSql = FuncoesGlobais.Subst(sSql, par1);
//
//                    try {
//                        conn.CommandExecute(sSql);
//                    } catch (Exception e) { sucesso = false; }
//                }
//            }
//        }
//        return sucesso;
//    }

        private String IPTU(String rgimv, String vecto, String campo) {
        String pIptu = ""; Integer pant = 0;
        try { pIptu = conn.ReadParameters("IPTU"); } catch (Exception e) {}
        try { pant = Integer.valueOf(conn.ReadParameters("IPTUANT"));  } catch (Exception e) {}
        if (pIptu == null || pIptu.equalsIgnoreCase("")) return campo;
        
        Boolean eiptu = campo.contains(pIptu + ":");
        if (eiptu) return campo;
        
        String[] meses = {"","jan","fev","mar","abr","mai","jun","jul","ago","set","out","nov","dez"};
        String ddia = Dates.StringtoString(vecto, "dd-MM-yyyy", "dd-MM-yyyy").substring(0, 2);
        String dmes = Dates.StringtoString(vecto, "dd-MM-yyyy", "dd-MM-yyyy").substring(3, 5);
        String dano  = Dates.StringtoString(vecto, "dd-MM-yyyy", "dd-MM-yyyy").substring(6, 10);
        String umes = Dates.DateFormata("dd-MM-yyyy", new Date()).substring(3, 5);
        String uano = Dates.DateFormata("dd-MM-yyyy", new Date()).substring(6, 10);
        
        String wmes = ""; String wValor = "0000000000";
        
        String wSql = "SELECT p.* FROM iptu p, imoveis i WHERE InStr(i.matriculas,p.matricula) > 0 AND p.ano = '" + dano + "' AND i.rgimv = '" + rgimv + "';";
        ResultSet ws = conn.OpenTable(wSql, null);
        try {
            while (ws.next()) {
                wmes = ws.getString(meses[Integer.valueOf(dmes)]);
                String[] avar = wmes.split(";");
                if (avar.length > 0) {
                    for (int i=0;i<avar.length;i++) {
                        String[] rvar = avar[i].split(",");
                        if (!rvar[0].trim().equalsIgnoreCase("")) {
                            if (Dates.DateDiff(Dates.DIA, new Date(), Dates.DateAdd(Dates.DIA, (pant * -1), Dates.StringtoDate(rvar[0], "dd-MM-yyyy"))) > 0) {
                                wValor = rvar[1];
                                break;
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {}
        conn.CloseTable(ws);
        return campo + ";" + (!wValor.equalsIgnoreCase("0000000000") ? pIptu + ":2:" + wValor + ":0000:NT:RZ:ET:IP" : "");
    }

    private boolean Distribuicao(String rgprp, String rgimv, String contrato, String nAut, String vencto, String campo) throws SQLException {
        DepuraCampos zCampos; String[] zCampo;

        String[][] aCC = DivideCC.Divisao(rgimv);
        String[][] jCampo;
        String[] gmpCampo, difCampo;
        String[][] tmpCampo;
        String[][] divaCampo = {};
        String[] admValores = {};
        String[][] gCampo = {};

        String[] admPer = null;
        admPer = new Calculos().percADM(rgprp, rgimv);

        String[][] dvCampo;

        float fDC = 0, fDF = 0;

        float[] aComissao = null;
        try {aComissao = new Calculos().percComissao(rgprp, rgimv);} catch (Exception e) {}
        float fComissao = aComissao[0]; float rComissao = aComissao[1];
        String sComissao = FuncoesGlobais.GravaValores(String.valueOf(fComissao).replace(".", ","), 3);

        String[] sVenctos = {vencto};

        int i = 0;
        //for (int i=0; i<sVenctos.length; i++) {
            String tCampo = CriticaCampo(rgprp, rgimv, contrato, sVenctos[i], campo);
            
            // Checa IPTU Automático
            tCampo = IPTU(rgimv, sVenctos[i], tCampo);
            
            String[] aCampo = tCampo.split(";");

            // Captura descontas/diferencas
            jCampo = FuncoesGlobais.treeArray(FuncoesGlobais.join(aCampo, ";"), false);
            gmpCampo = null; fDC = 0; 
            difCampo = null; fDF = 0;
            for (int w=0;w<jCampo.length;w++) {
                gmpCampo = null;
                gmpCampo = FuncoesGlobais.treeSeekArray2(jCampo, "DC", w, w);
                if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
                    fDC += ("LQ".equals(gmpCampo[4]) ? LerValor.StringToFloat(gmpCampo[3]) : 0);
                } else fDC += 0;

                difCampo = null;
                difCampo = FuncoesGlobais.treeSeekArray2(jCampo, "DF", w, w);                        
                if (Integer.valueOf(difCampo[0]) > -1 && Integer.valueOf(difCampo[1]) > -1) {
                    fDF += ("LQ".equals(difCampo[4]) ? LerValor.StringToFloat(difCampo[3]) : 0);
                } else fDF += 0;
            }
            // ------------- FIM Descontos/Diferenças
            
            for (int j=0; j < aCampo.length; j++) {
                int k = aCampo[j].indexOf("AL");
                if (k > -1) {
                    //zCampos = new DepuraCampos(aCampo[j]);
                    zCampos = new DepuraCampos(tCampo);
                    VariaveisGlobais.ccampos = aCampo[j];
                    zCampos.SplitCampos();
                    zCampo = zCampos.Depurar(j); 

                    if ("AL".equals(aCampo[j].split(":")[4])) {
                        float calc1 = LerValor.StringToFloat(zCampo[1]) + fDF - fDC;
                        float calc2 = fComissao / 100;
                        float reslt = calc1 * calc2;
                        
                        String valor = "";
                        if (fComissao != 0 && rComissao == 0) {
                            valor = String.valueOf(reslt).replace(".", ",");
                        } else if (fComissao == 0 && rComissao != 0) {
                            valor = String.valueOf(rComissao).replace(".", ",");
                        } else {
                            valor = String.valueOf(reslt).replace(".", ",");
                        }
                        aCampo[j] += ":CM" + FuncoesGlobais.GravaValores(valor, 2);
                    }
//                }
                    tmpCampo = FuncoesGlobais.treeArray(FuncoesGlobais.join(aCampo, ";"),false);

                    // Ja foi adiantado
                    boolean bad = (FuncoesGlobais.treeSeekArray(tmpCampo, "AD", 0)[0].equalsIgnoreCase("-1") ? false : true);
                        
                    if (!"DC".equals(aCampo[j].split(":")[4]) || !"DF".equals(aCampo[j].split(":")[4]) || !"SG".equals(aCampo[j].split(":")[4])) {
                        admValores = new String[] {};
                        // Separa valores da ADM
                        // Separa Multa
                        gmpCampo = FuncoesGlobais.treeSeekArray(tmpCampo, "MU", 0);
                        if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
                            float valor1 = LerValor.StringToFloat(gmpCampo[3]) - (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat((bad ? "100" : admPer[0])) / 100));
                            String valor = String.valueOf(valor1).replace(".", ",");
                            if (valor1 > 0) {
                                tmpCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "MU" + FuncoesGlobais.GravaValores(valor, 2);
                            } else {
                                tmpCampo = FuncoesGlobais.ArraysDelSub(tmpCampo, Integer.valueOf(gmpCampo[0]), Integer.valueOf(gmpCampo[1]));
                            }
                            float valor3 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat((bad ? "100" : admPer[0])) / 100));
                            String valor_mu = String.valueOf(valor3).replace(".", ",");
                            admValores = FuncoesGlobais.ArrayAdd(admValores, valor_mu);
                        } else {
                            admValores = FuncoesGlobais.ArrayAdd(admValores, "0");
                        }

                        // Juros
                        gmpCampo = FuncoesGlobais.treeSeekArray(tmpCampo, "JU", 0);
                        if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
                            float valor1 = LerValor.StringToFloat(gmpCampo[3]) - (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat((bad ? "100" : admPer[1])) / 100));
                            String valor = String.valueOf(valor1).replace(".", ",");
                            if (valor1 > 0) {
                                tmpCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "JU" + FuncoesGlobais.GravaValores(valor, 2);
                            } else {
                                tmpCampo = FuncoesGlobais.ArraysDelSub(tmpCampo, Integer.valueOf(gmpCampo[0]), Integer.valueOf(gmpCampo[1]));
                            }
                            float valor3 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat((bad ? "100" : admPer[1])) / 100));
                            String valor_ju = String.valueOf(valor3).replace(".", ",");
                            admValores = FuncoesGlobais.ArrayAdd(admValores, valor_ju);
                        } else {
                            admValores = FuncoesGlobais.ArrayAdd(admValores, "0");
                        }

                        // Correção
                        gmpCampo = FuncoesGlobais.treeSeekArray(tmpCampo, "CO", 0);
                        if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
                            float valor1 = LerValor.StringToFloat(gmpCampo[3]) - (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat((bad ? "100" : admPer[2])) / 100));
                            String valor = String.valueOf(valor1).replace(".", ",");
                            if (valor1 > 0) {
                                tmpCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "CO" + FuncoesGlobais.GravaValores(valor, 2);
                            } else {
                                tmpCampo = FuncoesGlobais.ArraysDelSub(tmpCampo, Integer.valueOf(gmpCampo[0]), Integer.valueOf(gmpCampo[1]));
                            }
                            float valor3 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat((bad ? "100" : admPer[2])) / 100));
                            String valor_co = String.valueOf(valor3).replace(".", ",");
                            admValores = FuncoesGlobais.ArrayAdd(admValores, valor_co);
                        } else admValores = FuncoesGlobais.ArrayAdd(admValores, "0");

                        // Expediente
                        gmpCampo = FuncoesGlobais.treeSeekArray(tmpCampo, "EP", 0);
                        if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
                            float valor1 = LerValor.StringToFloat(gmpCampo[3]) - (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat((bad ? "100" : admPer[3])) / 100));
                            String valor = String.valueOf(valor1).replace(".", ",");
                            if (valor1 > 0) {
                                tmpCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "EP" + FuncoesGlobais.GravaValores(valor, 2);
                            } else {
                                tmpCampo = FuncoesGlobais.ArraysDelSub(tmpCampo, Integer.valueOf(gmpCampo[0]), Integer.valueOf(gmpCampo[1]));
                            }
                            float valor3 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat((bad ? "100" : admPer[3])) / 100));
                            String valor_ep = String.valueOf(valor3).replace(".", ",");
                            admValores = FuncoesGlobais.ArrayAdd(admValores, valor_ep);
                        } else admValores = FuncoesGlobais.ArrayAdd(admValores, "0");

                        // Separa comissão
                        gmpCampo = FuncoesGlobais.treeSeekArray(tmpCampo, "CM", 0);
                        if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
                            admValores = FuncoesGlobais.ArrayAdd(admValores, gmpCampo[3]);
                        } else admValores = FuncoesGlobais.ArrayAdd(admValores, "0");

                        aCampo[j] = FuncoesGlobais.join(tmpCampo[j], ":");

                        // Envio dos Valores da ADM
                        if (LerValor.StringToFloat(admValores[0]) + LerValor.StringToFloat(admValores[1]) + LerValor.StringToFloat(admValores[2]) + LerValor.StringToFloat(admValores[3]) > 0) {
                            gCampo = FuncoesGlobais.ArraysAdd(gCampo, new String[] {admValores[0], admValores[1], admValores[2], admValores[3], sVenctos[i]});
                        }
                    }
                }
            }

            // Clona Variavel
            String[] oCampo = aCampo;

            for (int l=0;l<aCC.length;l++) {
                dvCampo = FuncoesGlobais.treeArray(FuncoesGlobais.join(aCampo, ";"), false);
                for (int m=0;m<dvCampo.length;m++){
                    //';
                    float part1 = LerValor.StringToFloat(LerValor.FormatNumber(dvCampo[m][2], 2));
                    float part2 = LerValor.StringToFloat(aCC[l][1].replace(".", ",")) / 100;
                    if (FuncoesGlobais.IndexOf(dvCampo[m], "AL") < 0) part2 = 1;

                    // 15-12-2016 12h30m
                    if (l==0) {
                        if (FuncoesGlobais.IndexOf(dvCampo[m], "AL") < 0) part2 = 1;
                    } else {
                        if (FuncoesGlobais.IndexOf(dvCampo[m], "AL") < 0) {
                            part2 = 0;
                        } else part2 = 1;
                    }

                    String vrfinal = LerValor.FloatToString(part1 * part2);
                    
                    //dvCampo[m][2] = winger.GravarValor(winger.LerValor(dvCampo[m][2]) * If(FuncoesGlobais.ArraFind(dvCampo[m], "AL") < 0, 1, (aCC[l][1] / 100)));
                    
                    if (aCC[l][2].trim().toUpperCase().equalsIgnoreCase("TRUE")) {
                        //'; divide tudo
                        float fValor1 = LerValor.StringToFloat(LerValor.FormatNumber(dvCampo[m][2], 2));
                        float fValor2 = Float.valueOf(aCC[l][1].replace(",", ".")) / 100;
                        dvCampo[m][2] = FuncoesGlobais.GravaValores(LerValor.FloatToString(fValor1 * fValor2),2);
                    } else {
                        // 06/01/2017 8h10m
                        if ("AL".equals(dvCampo[m][4])) {
                            float fValor1 = LerValor.StringToFloat(LerValor.FormatNumber(dvCampo[m][2], 2));
                            float fValor2 = Float.valueOf(aCC[l][1].replace(",", ".")) / 100;
                            dvCampo[m][2] = FuncoesGlobais.GravaValores(LerValor.FloatToString(fValor1 * fValor2),2);
                        } else {
                            dvCampo[m][2] = FuncoesGlobais.GravaValores(vrfinal, 2);                    
                        }
                    }

                    if ("AL".equals(dvCampo[m][4])) {
                        // Separa Multa
                        gmpCampo = new String[] {};
                        gmpCampo = FuncoesGlobais.treeSeekArray(dvCampo, "MU", 0);
                        if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
                            float valor1 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(aCC[l][1]) / 100));
                            String valor = String.valueOf(valor1).replace(".", ",");
                            dvCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "MU" + FuncoesGlobais.GravaValores(valor, 2);
                        }


                        // Separa juros
                        gmpCampo = new String[] {};
                        gmpCampo = FuncoesGlobais.treeSeekArray(dvCampo, "JU", 0);
                        if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
                            float valor1 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(aCC[l][1]) / 100));
                            String valor = String.valueOf(valor1).replace(".", ",");
                            dvCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "JU" + FuncoesGlobais.GravaValores(valor, 2);
                        }

                        // Separa Correção
                        gmpCampo = new String[] {};
                        gmpCampo = FuncoesGlobais.treeSeekArray(dvCampo, "CO", 0);
                        if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
                            float valor1 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(aCC[l][1]) / 100));
                            String valor = String.valueOf(valor1).replace(".", ",");
                            dvCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "CO" + FuncoesGlobais.GravaValores(valor, 2);
                        }

                        // Separa Expediente
                        gmpCampo = new String[] {};
                        gmpCampo = FuncoesGlobais.treeSeekArray(dvCampo, "EP", 0);
                        if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
                            float valor1 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(aCC[l][1]) / 100));
                            String valor = String.valueOf(valor1).replace(".", ",");
                            dvCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "EP" + FuncoesGlobais.GravaValores(valor, 2);
                        }

                        // Separa Comissao
                        gmpCampo = new String[] {};
                        gmpCampo = FuncoesGlobais.treeSeekArray(dvCampo, "CM", 0);
                        if (Integer.valueOf(gmpCampo[0]) > -1 && Integer.valueOf(gmpCampo[1]) > -1) {
                            float valor1 = (LerValor.StringToFloat(gmpCampo[3]) * (LerValor.StringToFloat(aCC[l][1].replace(".", ",")) / 100));
                            String valor = String.valueOf(valor1).replace(".", ",");
                            dvCampo[Integer.valueOf(gmpCampo[0])][Integer.valueOf(gmpCampo[1])] = "CM" + FuncoesGlobais.GravaValores(valor, 2);
                        }
                    }
                }

                //String[] tpCampo = {contrato.trim(), aCC[l][0], rgimv, FuncoesGlobais.SuperJoin(dvCampo, l == 0)};
                String[] tpCampo = {contrato.trim(), aCC[l][0], rgimv, FuncoesGlobais.SuperJoin(dvCampo, true)};
                divaCampo = FuncoesGlobais.ArraysAdd(divaCampo, tpCampo);
            }

            for (int l=0; l<aCC.length; l++) {
                aCampo = null; aCampo = divaCampo[l][3].split(";");

                String[] rCampo = {};
                String[] eCampo = {};
                String[] iCampo = {};

                String[] lCampo = {};
                String[] xCampo = {};
                String[] pCampo = {};
                String[] sCampo = {};
                String[] hCampo = {};

                for (int j=0; j<aCampo.length; j++) {
                    String[] wCampo = aCampo[j].split(":");

                    int k = aCampo[j].indexOf("AL");
                    if (k > -1) lCampo = FuncoesGlobais.ArrayAdd(lCampo, aCampo[j]);

                    // Retenção
                    k = aCampo[j].indexOf("RT");
                    if (k > -1) sCampo = FuncoesGlobais.ArrayAdd(sCampo, aCampo[j]);

                    // Antecipados
                    k = aCampo[j].indexOf("AT");
                    if (k > -1) hCampo = FuncoesGlobais.ArrayAdd(hCampo, aCampo[j]);

                    // Expediente
                    k = FuncoesGlobais.IndexOf(wCampo, "EP");
                    if (k > -1) pCampo = FuncoesGlobais.ArrayAdd(pCampo, "EP" + wCampo[k].substring(wCampo[k].length() - 10, wCampo[k].length()) + ":0000:EP");

                    // Taxas -------------
                    k = aCampo[j].indexOf("AL");
                    if (k < 0) xCampo = FuncoesGlobais.ArrayAdd(xCampo, aCampo[j]);

                    // Campos Razao
                    k = aCampo[j].indexOf("RZ");
                    if (k > -1) rCampo = FuncoesGlobais.ArrayAdd(rCampo, aCampo[j]);

                    k = aCampo[j].indexOf("ET");
                    if (k > -1) eCampo = FuncoesGlobais.ArrayAdd(eCampo, aCampo[j]);

                    k = aCampo[j].indexOf("IP");
                    if (k > -1) iCampo = FuncoesGlobais.ArrayAdd(iCampo, aCampo[j]);
                }

                //String[] tpCampo = {lCampo, pCampo, xCampo, rCampo, eCampo, iCampo, sCampo};
                String slCampo = "", spCampo = "", sxCampo = "", srCampo = "", seCampo = "", siCampo = "", ssCampo = "", waCampo = "";
                try {slCampo = FuncoesGlobais.join(lCampo, ";");} catch (Exception ex) {slCampo = "";}
                try {spCampo = FuncoesGlobais.join(pCampo, ";");} catch (Exception ex) {spCampo = "";}
                try {sxCampo = FuncoesGlobais.join(rCampo, ";");} catch (Exception ex) {sxCampo = "";}
                try {srCampo = FuncoesGlobais.join(rCampo, ";");} catch (Exception ex) {srCampo = "";}
                try {seCampo = FuncoesGlobais.join(eCampo, ";");} catch (Exception ex) {seCampo = "";}
                try {siCampo = FuncoesGlobais.join(iCampo, ";");} catch (Exception ex) {siCampo = "";}
                try {ssCampo = FuncoesGlobais.join(sCampo, ";");} catch (Exception ex) {ssCampo = "";}
                
                // 29/09/2014 11h
                try {waCampo = FuncoesGlobais.join(hCampo, ";");} catch (Exception ex) {waCampo = "";}
                String finalCampos = slCampo + "," + spCampo + "," + sxCampo + "," + srCampo + "," + seCampo + "," + siCampo + "," + ssCampo; // + "," + waCampo;
                divaCampo[l] = FuncoesGlobais.ArrayAdd(divaCampo[l], finalCampos);
            }

            boolean sucesso = true;
            for (int l=0;l<gCampo.length;l++) {
                String sADMCPOS = "";
                for (int p=0;p<gCampo[l].length - 1;p++) {
                    if (LerValor.StringToFloat(gCampo[l][p]) != 0) {
                        String sSql = "INSERT INTO razao (rgprp, campo, dtvencimento, dtrecebimento, rc_aut, tag) VALUES ('&1.','&2.','&3.','&4.','&5.',' ')";

                        String par1 = "GG";
                        String par2 = "GG:9:" +
                                      FuncoesGlobais.GravaValores(gCampo[l][p],2) +
                                      ":000000:GG:ET:" +
                                      FuncoesGlobais.StrZero(nAut.trim(), 6) +
                                      VariaveisGlobais.cContas.get("GG") +
                                      FuncoesGlobais.Choose(p + 1,new String[] {"", "MU", "JU", "CO", "EP"}) +
                                      ":" + Dates.DateFormata("yyyyMMdd", new Date()) +
                                      ":CRE:DN:656877:" +
                                      VariaveisGlobais.usuario;
                        String par3 = Dates.DateFormata("yyyy-MM-dd", Dates.StringtoDate(sVenctos[i], "dd/MM/yyyy"));
                        String par4 = Dates.DateFormata("yyyy-MM-dd", new Date());
                        String par5 = nAut;
                        sSql = FuncoesGlobais.Subst(sSql, new String[] {par1, par2, par3, par4, par5});
                        
                        try {
                            // Grava no Razao
                            conn.CommandExecute(sSql);
                        } catch (Exception e) { sucesso = false; }
                        
                        sADMCPOS += FuncoesGlobais.Choose(p + 1, new String[] {"", "MU", "JU", "CO", "EP"}) + FuncoesGlobais.GravaValores(gCampo[l][p].replace(".", ","),2) + ":";
                    }
                }
                if (!"".equals(sADMCPOS)) {
                    sADMCPOS = sADMCPOS.substring(0, sADMCPOS.length() - 1);
                    conn.CreateArqAux();
                    String sSql = "INSERT INTO auxiliar (contrato, rgprp, rgimv, campo, dtvencimento, dtrecebimento, rc_aut, conta) VALUES ('&1.','&2.','&3.','&4.','&5.','&6.','&7.','&8.')";
                    String[] variavel = new String[] {contrato, rgprp, rgimv, sADMCPOS,
                           Dates.DateFormata("yyyy-MM-dd",Dates.StringtoDate(gCampo[l][gCampo[l].length - 1],"dd/MM/yyyy")),
                           Dates.DateFormata("yyyy-MM-dd", new Date()),
                           nAut,
                           "ADM"};
                    sSql = FuncoesGlobais.Subst(sSql, variavel);
                    
                    try {
                        conn.CommandExecute(sSql);
                    } catch (Exception e) { sucesso = false; }
                }
            }

            for (int l=0;l<divaCampo.length;l++) {
                // Splitar Itens do DivaCampos Elemento (4)
                String[] divaSplit = divaCampo[l][4].split(",");

                // gravar no arquivo auxiliar
                conn.CreateArqAux();
                String sSql = "INSERT INTO auxiliar (contrato, rgprp, rgimv, campo, dtvencimento, dtrecebimento, rc_aut, conta) VALUES ('&1.','&2.','&3.','&4.','&5.','&6.','&7.','&8.')";
                sSql = FuncoesGlobais.Subst(sSql, new String[] {
                       divaCampo[l][0],
                       divaCampo[l][1],
                       divaCampo[l][2],
                       divaCampo[l][3],
                       Dates.DateFormata("yyyy-MM-dd", Dates.StringtoDate(sVenctos[i], "dd/MM/yyyy")),
                       Dates.DateFormata("yyyy-MM-dd", new Date()), nAut, "REC"});
                
                try {
                    conn.CommandExecute(sSql);
                } catch (Exception e) { sucesso = false; }

                // gravar gravar razao na tabela
                if (!"".equals(divaSplit[3].trim())) {
                    sSql = "INSERT INTO razao (contrato, rgprp, rgimv, campo, dtvencimento, dtrecebimento, rc_aut, tag) VALUES ('&1.','&2.','&3.','&4.','&5.','&6.','&7.', ' ')";
                    String[] par1 = {divaCampo[l][0],
                                     divaCampo[l][1],
                                     divaCampo[l][2],
                                     divaSplit[3],
                                     Dates.DateFormata("yyyy-MM-dd", Dates.StringtoDate(sVenctos[i], "dd/MM/yyyy")),
                                     Dates.DateFormata("yyyy-MM-dd", new Date()),
                                     nAut};
                    sSql = FuncoesGlobais.Subst(sSql, par1);
                    
                    try {
                        conn.CommandExecute(sSql);
                    } catch (Exception e) { sucesso = false; }
                }

                // gravar extrato na tabela
                if (!"".equals(divaSplit[4].trim())) {
                    sSql = "INSERT INTO extrato (contrato, rgprp, rgimv, campo, dtvencimento, dtrecebimento, rc_aut, tag) VALUES ('&1.','&2.','&3.','&4.','&5.','&6.','&7.', ' ')";
                    String[] par1 = {divaCampo[l][0],
                                     divaCampo[l][1],
                                     divaCampo[l][2],
                                     divaSplit[4],
                                     Dates.DateFormata("yyyy-MM-dd", Dates.StringtoDate(sVenctos[i], "dd/MM/yyyy")),
                                     Dates.DateFormata("yyyy-MM-dd", new Date()),
                                     nAut};
                    sSql = FuncoesGlobais.Subst(sSql, par1);
                    
                    try {
                        conn.CommandExecute(sSql);
                    } catch (Exception e) { sucesso = false; }
                }

                // Grava imposto na tabela
                if (divaSplit.length >= 6) {
                        if (!"".equals(divaSplit[5].trim())) {
                            sSql = "INSERT INTO imposto (contrato, rgprp, rgimv, campo, dtvencimento, dtrecebimento, rc_aut, tag) VALUES ('&1.','&2.','&3.','&4.','&5.','&6.','&7.',' ')";
                            String[] par1 = {divaCampo[l][0],
                                             divaCampo[l][1],
                                             divaCampo[l][2],
                                             divaSplit[5],
                                             Dates.DateFormata("yyyy-MM-dd", Dates.StringtoDate(sVenctos[i], "dd/MM/yyyy")),
                                             Dates.DateFormata("yyyy-MM-dd", new Date()),
                                             nAut};
                            sSql = FuncoesGlobais.Subst(sSql, par1);

                            try {
                                conn.CommandExecute(sSql);
                            } catch (Exception e) { sucesso = false; }
                    }
                }
                
                // Grava Retenções na tabela
                if (divaSplit.length > 6) {
                    String[] retencaoSplit = divaSplit[6].split(";");
                    for (int n=0;n<retencaoSplit.length;n++) {
                        sSql = "INSERT INTO retencao (contrato, rgprp, rgimv, campo, vencimento, rc_aut, tag, gat, rt_aut) VALUES ('&1.','&2.','&3.','&4.','&5.','&6.','&7.','&8.','&9.')";
                        String[] par1 = {divaCampo[l][0],
                                         divaCampo[l][1],
                                         divaCampo[l][2],
                                         retencaoSplit[n],
                                         Dates.DateFormata("yyyy-MM-dd", Dates.StringtoDate(sVenctos[i], "dd/MM/yyyy")),
                                         nAut,"0"," ","0"};
                        sSql = FuncoesGlobais.Subst(sSql, par1);
                        
                        try {
                            conn.CommandExecute(sSql);
                        } catch (Exception e) { sucesso = false; }
                    }
                }
            }
            
            // Atualiza Antecipados 29/09/2014
            for (int h=0;h<jCampo.length;h++) {
                if (jCampo[h][jCampo[h].length - 1].equalsIgnoreCase("AT")) {
                    if (Dates.isDateValid(jCampo[h][4], "ddMMyyyy")) {
                        String sSql = "UPDATE antecipados SET dtrecebimento = '&1.', rc_aut = '&2.' WHERE contrato = '&3.' AND dtvencimento = '&4.' AND Mid(campo,1,2) = '&5.';";
                        sSql = FuncoesGlobais.Subst(sSql, new String[] {
                                Dates.DateFormata("yyyy-MM-dd", new Date()),
                            nAut, contrato, Dates.DateFormata("yyyy-MM-dd", Dates.StringtoDate(jCampo[h][4], "ddMMyyyy")), jCampo[h][0]});
                        
                        System.out.println(sSql);
                        try {
                            conn.CommandExecute(sSql);
                        } catch (Exception e) { sucesso = false; }
                    }
                }
            }
        //}
        return sucesso;
    }

    private String CriticaCampo(String rgprp, String rgimv, String contrato, String recto, String campo) throws SQLException {
        String[] aCampo; int tCampo = 0; String ctCampo = "";
        float tbTaxa, tbMulta, tbJurosxt, tbCorrecao = 0;

        String tmpCampo = campo.trim();
        if (!"".equalsIgnoreCase(tmpCampo)) {
            aCampo = tmpCampo.split(";");
            aCampo = FuncoesGlobais.OrdenaMatriz(aCampo, 3, 1, true);
            tCampo = aCampo.length - 1;

            ReCalculos rc = new ReCalculos();
            rc.Inicializa(rgprp, rgimv, contrato);
            rc.setCalcDate(Dates.StringtoDate(recto, "dd/MM/yyyy"));      
            tbTaxa = rc.TaxaExp(tmpCampo);
            tbMulta = rc.Multa(tmpCampo, recto, false);
            tbJurosxt = rc.Juros(tmpCampo, recto);
            tbCorrecao = rc.Correcao(tmpCampo, recto);

            for (int nConta=0; nConta <= tCampo; nConta++) {
                ctCampo = aCampo[nConta];
                String[] rCampos = ctCampo.split(":");

                if ("AL".equals(rCampos[4])) {
                    int iMulta = FuncoesGlobais.IndexOf(rCampos,"MU");
                    if (iMulta > -1) {
                        rCampos[iMulta] = "MU" + FuncoesGlobais.GravaValores(String.valueOf(tbMulta).replace(".", ","), 2);
                    } else {
                        rCampos = FuncoesGlobais.ArrayAdd(rCampos, "MU" + FuncoesGlobais.GravaValores(String.valueOf(tbMulta).replace(".", ","), 2));
                    }

                    int iJuros = FuncoesGlobais.IndexOf(rCampos,"JU");
                    if (iJuros > -1) {
                        rCampos[iJuros] = "JU" + FuncoesGlobais.GravaValores(String.valueOf(tbJurosxt).replace(".", ","), 2);
                    } else {
                        rCampos = FuncoesGlobais.ArrayAdd(rCampos, "JU" + FuncoesGlobais.GravaValores(String.valueOf(tbJurosxt).replace(".", ","), 2));
                    }

                    int iCorrecao = FuncoesGlobais.IndexOf(rCampos,"CO");
                    if (iCorrecao > -1) {
                        rCampos[iCorrecao] = "CO" + FuncoesGlobais.GravaValores(String.valueOf(tbCorrecao).replace(".", ","), 2);
                    } else {
                        rCampos = FuncoesGlobais.ArrayAdd(rCampos, "CO" + FuncoesGlobais.GravaValores(String.valueOf(tbCorrecao).replace(".", ","), 2));
                    }

                    int iExp = FuncoesGlobais.IndexOf(rCampos,"EP");
                    if (iExp > -1) {
                        rCampos[iExp] = "EP" + FuncoesGlobais.GravaValores(String.valueOf(tbTaxa).replace(".", ","), 2);
                    } else {
                        rCampos = FuncoesGlobais.ArrayAdd(rCampos, "EP" + FuncoesGlobais.GravaValores(String.valueOf(tbTaxa).replace(".", ","), 2));
                    }
                }
                aCampo[nConta] = FuncoesGlobais.join(rCampos, ":");
            }
            tmpCampo = FuncoesGlobais.join(aCampo, ";");
        }
        return tmpCampo;
    }
    
        private void AlteraMUJUCOEP(String campos, String jMulta, String jJuros) {
        String auxCpo = campos;
        
        String vMulta = ""; String vJuros = ""; 
        
        // Multa
        if (LerValor.StringToFloat(jMulta) > 0) {
            vMulta = "MU" + FuncoesGlobais.GravaValor(jMulta);
        } else {
            vMulta = "MU";
        }
        
        // Juros
        if (LerValor.StringToFloat(jJuros) > 0) {
            vJuros = "JU" + FuncoesGlobais.GravaValor(jJuros);
        } else {
            vJuros = "JU";
        }
        
        // Limpar Ocorrencias
        String oldMU = BuscaXX(auxCpo, "MU");
        String oldJU = BuscaXX(auxCpo, "JU");
        
        auxCpo = auxCpo.replace(oldMU, "");
        auxCpo = auxCpo.replace(oldJU, "");
        
        // Grava Novas Ocorrencias
        String mujucoep = "";
        if (!"".equals(vMulta)) {
            mujucoep += vMulta + ":";
        }
        if (!"".equals(vJuros)) {
            mujucoep += vJuros + ":"; 
        }
        
        int pos = auxCpo.indexOf("AL:");
        auxCpo = auxCpo.substring(0, pos + 3) + mujucoep + auxCpo.substring(pos + 3);
        
        // TODO - revisar 
        ///String SQLtxt = "UPDATE recibo SET CAMPO = '" + auxCpo + "' WHERE CONTRATO = '" + this.contrato +
        ///                "' AND DTVENCIMENTO = '" + Dates.DateFormata("yyyy/MM/dd", Dates.StringtoDate(jVencimentos.getSelectedItem().toString(),"dd/MM/yyyy")) + "';";

        ///conn.CommandExecute(SQLtxt);

        this.rcampo = auxCpo;
    }
    
    private String BuscaXX(String zcampo, String oque) {
        String zRet = "";
        int i = zcampo.indexOf(oque);
        if (i >= 0) {
            // Achou
            String auxCpo = zcampo.substring(i + 2);
            if (auxCpo.length() > 0) {
                if (":".equals(auxCpo.substring(0,1))) {
                    zRet = oque + ":";
                } else {
                    zRet = oque + auxCpo.substring(0,10) + ":";
                }
            } else zRet = oque + ":";
        }
        
        return zRet;
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btRetorno;
    private javax.swing.JCheckBox jAutomatico;
    private javax.swing.JButton jBaixar;
    private com.toedter.calendar.JDateChooser jDtBordero;
    private com.toedter.calendar.JDateChooser jDtLancado;
    private javax.swing.JTextField jDtRecto;
    private com.toedter.calendar.JDateChooser jDtvecto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTable jLancamentos;
    private javax.swing.JButton jLancar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField jVrBoleta;
    private javax.swing.JFormattedTextField jVrBordero;
    private javax.swing.JFormattedTextField jVrRecebido;
    private javax.swing.JComboBox jcbxbanco;
    private javax.swing.JTextField jnnumero;
    // End of variables declaration//GEN-END:variables
}

//        Collections gVar = VariaveisGlobais.dCliente;
//        String docID = ".smc";
//        String docName = "reports/Recibos/" + "BO_" + Dates.DateFormata("ddMMyyyy", new Date()) + "_" + FuncoesGlobais.StrZero(String.valueOf((int)nAut), 7) + docID;
//        PrinterPOS printer = new PrinterPOS(docName);
//        // Imprime lamina das baixas
//        printer.Print(JavaPOS.ESC_ARROBA + "", 1);
//        //printer.setDocName(docName);
//
//        // Imprime logomarca
//        //printer.PrintBitMap("resources/logos/boleta/" + VariaveisGlobais.dCliente.get("marca").trim() + ".gif",0);
//        //printer.Print("", 1);
//
//        // cabeçário
//        printer.Print(JavaPOS.ESCLAMATION(65) + JavaPOS.ESC_E(1) + gVar.get("empresa"), 1);
//        printer.Print(JavaPOS.ESCLAMATION(65) + gVar.get("endereco") + ", " + gVar.get("numero") + " " + gVar.get("complemento"), 1);
//        printer.Print(JavaPOS.ESCLAMATION(65) + gVar.get("bairro") + " - " + gVar.get("cidade") + " - " + gVar.get("estado") + " - " + gVar.get("cep"), 1);
//        printer.Print(JavaPOS.ESCLAMATION(65) + "Tel/Fax:" + gVar.get("telefone") + JavaPOS.ESC_E(0), 1);
//        printer.Print("", 1);
//
//        printer.Print(JavaPOS.ESCLAMATION(70) + JavaPOS.ESC_A(1) + JavaPOS.REVERSO + "BAIXA DE BOLETOS" + JavaPOS.NORMAL, 1);
//        printer.Print(JavaPOS.ESCLAMATION(70) + JavaPOS.ESC_A(1) + JavaPOS.REVERSO + Dates.DateFormata("dd-MM-yyyy",jDtBordero.getDate()) + JavaPOS.NORMAL, 1);
//        printer.Print(JavaPOS.ESCLAMATION(65) + JavaPOS.ESC_A(0) + "", 1);
//
//        printer.Print(JavaPOS.ESCLAMATION(65) + "CAIXA: " + new Pad(VariaveisGlobais.usuario,15).RPad() + "       Data/Hora: " + Dates.DateFormata("dd/MM/yyyy HH:mm", new Date()) ,1);
//
//        printer.Print(JavaPOS.ESCLAMATION(65) + "========================================================",1);
//
//        // imprime aviso aqui
//        for (int i = 0;i<jLancamentos.getRowCount();i++) {
//            TableModel md = jLancamentos.getModel();
//            String tnnum  = md.getValueAt(i, 0).toString();
//            String tcontrato = md.getValueAt(i, 9).toString();
//            String tvecto = md.getValueAt(i, 1).toString();
//            String trecto = md.getValueAt(i, 2).toString();
//            String tvrrcb = md.getValueAt(i, 3).toString().trim();
//            String tvrrcd = md.getValueAt(i, 4).toString().trim();
//
//            printer.Print(JavaPOS.ESCLAMATION(65) + JavaPOS.DWIDTH + tnnum + JavaPOS.NORMAL + "  " + tcontrato + "   " + tvecto + "   " + tvrrcb + "   " + trecto + "  " + JavaPOS.DWIDTH + tvrrcd + JavaPOS.NORMAL , 1);
//        }            
//
//        printer.Print("",1);
//        printer.Print(JavaPOS.ESCLAMATION(65) + JavaPOS.ESC_A(2) + "Total do Bodero.....................  ",0);
//        printer.Print(JavaPOS.ESCLAMATION(65) + jVrBordero.getText(),1);
//        printer.Print(JavaPOS.ESCLAMATION(65) + JavaPOS.ESC_A(0) + "",1);
//        printer.Print(JavaPOS.ESCLAMATION(65) + "========================================================",1);
//
//        if (nAut > 0) {
//            printer.Print(JavaPOS.GS_EXC(0) + JavaPOS.ESC_A(0) + "",1);
//            // Imprimir Autenticação
//            printer.Print(JavaPOS.ESC_A(1) + JavaPOS.ESCLAMATION(65) + 
//                          JavaPOS.REVERSO + VariaveisGlobais.dCliente.get("marca").trim() + 
//                          JavaPOS.NORMAL + "BO" + FuncoesGlobais.StrZero(String.valueOf((int)nAut), 7) + 
//                          "-1" + Dates.DateFormata("ddMMyyyyHHmmss", new Date()) + 
//                          FuncoesGlobais.GravaValores(jVrBordero.getText(), 2) + VariaveisGlobais.usuario,1);
//            // Codigo de barra
//            //printer.PrintBarCode(FuncoesGlobais.StrZero(String.valueOf((int)nAut), 12));
//        }
//
//        // Pula linhas (6) / corta papel
//        for (int k=1;k<=6;k++) { printer.Print(JavaPOS.ESCLAMATION(65) + "", 1); }
//        printer.Print(JavaPOS.FULLCUT, 0);
//
//        printer.Close();
//        printer.setDocName("");
