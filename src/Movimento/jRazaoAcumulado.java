package Movimento;

import Funcoes.Convert;
import Funcoes.Dates;
import Funcoes.Db;
import Funcoes.FuncoesGlobais;
import Funcoes.LerValor;
import Funcoes.VariaveisGlobais;
import Funcoes.jDirectory;
import Funcoes.toPreview;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.util.logging.Level;
import java.util.logging.Logger;
import razao.Razao;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.SwingWorker;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import org.apache.commons.lang.NumberUtils;

public class jRazaoAcumulado extends javax.swing.JInternalFrame {
    Db conn = VariaveisGlobais.conexao;
    String where = "";
    
    /** Creates new form jRazao */
    public jRazaoAcumulado() {
        initComponents();
        
        // Icone da tela
        FlatSVGIcon icone = new FlatSVGIcon("menuIcons/razao.svg",16,16);
        setFrameIcon(icone);        
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jDtRazao = new com.toedter.calendar.JDateChooser("dd/MM/yyyy", "##/##/#####", '_');
        jLabel1 = new javax.swing.JLabel();
        jbarra1 = new javax.swing.JProgressBar();
        jbarra2 = new javax.swing.JProgressBar();
        processo = new javax.swing.JLabel();

        setClosable(true);
        setTitle(".:: Raz√£o Acumulado ::.");
        setPreferredSize(new java.awt.Dimension(338, 150));
        setVisible(true);

        jButton1.setText("Imprimir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Data:");
        jLabel1.setPreferredSize(new java.awt.Dimension(37, 30));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDtRazao, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jDtRazao, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jbarra1.setStringPainted(true);

        jbarra2.setStringPainted(true);

        processo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        processo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbarra1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbarra2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(processo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jbarra1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jbarra2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(processo, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        where = "AND (dtrecebimento >= '&1.' AND dtrecebimento <= '&2.')";
//        where = FuncoesGlobais.Subst(where, new String[] {Dates.DateFormata("yyyy/MM/dd", Dates.StringtoDate(jInicio.getText(), "dd/MM/yyyy")),
//                Dates.DateFormata("yyyy/MM/dd", Dates.StringtoDate(jFinal.getText(), "dd/MM/yyyy"))});
        
        jButton1.setEnabled(false);
        printRazao();
        jButton1.setEnabled(true);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private float[] PegaAluguel(String tmpCampo) throws SQLException {        
        if ("".equals(tmpCampo.trim())) return new float[] {0, 0, 0};
        
        String[][] rCampos = FuncoesGlobais.treeArray(tmpCampo, true);
        float fTotAL = 0; 
        float fTotDC = 0; float ftdcal = 0; float ftdcir = 0;
        float fTotDF = 0; float ftdfal = 0; float ftdfir = 0;
        for (int j = 0; j<rCampos.length; j++) {
            if ("AL".equals(rCampos[j][4])) {
                if (LerValor.isNumeric(rCampos[j][0])) {
                    fTotAL += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));
                } else {
                    fTotAL += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));
                }
            } else if ("DC".equals(rCampos[j][4])) {
                if (rCampos[j][rCampos[j].length - 1].toUpperCase().contains("ALUG")) {
                    if (LerValor.isNumeric(rCampos[j][0])) {
                        ftdcal += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));
                    } else {
                        ftdcal += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));
                    }
                } else if (rCampos[j][rCampos[j].length - 1].toUpperCase().contains("IR")) {
                    if (LerValor.isNumeric(rCampos[j][0])) {
                        ftdcir += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));
                    } else {
                        ftdcir += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));
                    }
                } else {
                    fTotDC +=  LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));
                }
            } else if ("DF".equals(rCampos[j][4])) {
                if (rCampos[j][rCampos[j].length - 1].toUpperCase().contains("ALUG")) {
                    if (LerValor.isNumeric(rCampos[j][0])) {
                        ftdfal += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));
                    } else {
                        ftdfal += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));
                    }
                } else if (rCampos[j][rCampos[j].length - 1].toUpperCase().contains("IR")) {
                    if (LerValor.isNumeric(rCampos[j][0])) {
                        ftdfir += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));
                    } else {
                        ftdfir += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));
                    }
                } else {
                    fTotDF +=  LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));
                }
            }
        }
        return new float[] {fTotAL, fTotDC, fTotDF, ftdcal, ftdcir, ftdfal, ftdfir};
    }
    
    private void printRazao() {
        final List<Razao> lista = new ArrayList<Razao>();

        // Atual
        where = "AND (dtrecebimento = '&1.')";
        where = FuncoesGlobais.Subst(where, new String[] {Dates.DateFormata("yyyy/MM/dd", jDtRazao.getDate())});
        
        SwingWorker worker = new SwingWorker(){  
               @Override  
               protected Object doInBackground() throws Exception {  
                   jDtRazao.setEnabled(false); jButton1.setEnabled(false);
                   
                    processo.setText("Avisos de Disponivel Corrente");
                    jbarra1.setValue((100 * 1) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float[] pAVIDISP = fAVI_DISP();

                    processo.setText("Recibos Corrente");
                    jbarra1.setValue((100 * 2) / 26);
                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float[] pRECIBO = CalcRecAux();

                    processo.setText("Taxa Extra Corrente");
                    jbarra1.setValue((100 * 3) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float pEXT = tEXT(fEXT());

                    processo.setText("Avisos de Locat√°rios Corrente");
                    jbarra1.setValue((100 * 4) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float[] pAVILOC = fAVI_LOC();

                    processo.setText("Avisos de S√≥cios Corrente");
                    jbarra1.setValue((100 * 5) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float[] pAVISOC = fAVI_SOC();

//                    processo.setText("Avisos de Reten√ß√£o Corrente");
//                    jbarra1.setValue((100 * 6) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
//                    float[] pAVIRET = fAVI_RET();

                    processo.setText("Caixa Corrente");
                    jbarra1.setValue((100 * 7) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float[] pCXA = fCXA();

                    processo.setText("Dep√≥sitos Corrente");
                    jbarra1.setValue((100 * 8) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float pDEP = tDEP(fDEP());

                    processo.setText("Despesas Corrente");
                    jbarra1.setValue((100 * 9) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float pDES = tDES(fDES());

                    processo.setText("Passagens de Caixa Corrente");
                    jbarra1.setValue((100 * 10) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float[] pcCXA = fPCX();

                    processo.setText("Adm Corrente");
                    jbarra1.setValue((100 * 11) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float[] oADM = tADM(fADM());

                    processo.setText("Campos Corrente");
                    jbarra1.setValue((100 * 12) / 26);
                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    Object[][] lcampos = ListaCampos();

                    processo.setText("Campos Adm Corrente");
                    jbarra1.setValue((100 * 13) / 26);
                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    Object[][] acampos = ListaCamposAdm();

                    float valor_com = pRECIBO[9];
                    float valor_mul = oADM[0];
                    float valor_jur = oADM[1];
                    float valor_cor = oADM[2];
                    float valor_exp = oADM[3];

                    float valor_dep = pDEP;
                    float valor_des = pDES;

                    processo.setText("Adiantamentos Corrente");
                    float pADI = tADI();

                    // Anterior
                    String iniDate = Dates.DateFormata("yyyy/MM/dd", jDtRazao.getDate()).substring(0, 8) + "01";
                    where = "AND (dtrecebimento >= '&1.' AND dtrecebimento < '&2.')";
                    where = FuncoesGlobais.Subst(where, new String[] {Dates.DateFormata("yyyy/MM/dd", Dates.StringtoDate(iniDate, "yyyy/MM/dd")), Dates.DateFormata("yyyy/MM/dd", jDtRazao.getDate())});

                    processo.setText("Avisos de Disponivel Auxiliar");
                    jbarra1.setValue((100 * 14) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float[] pAVIDISP_ANT = fAVI_DISP();

                    processo.setText("Recibos Auxiliar");
                    jbarra1.setValue((100 * 15) / 26);
                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float[] pRECIBO_ANT = CalcRecAux();

                    processo.setText("Taxas Extras Auxiliar");
                    jbarra1.setValue((100 * 16) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float pEXT_ANT = tEXT(fEXT());

                    processo.setText("Avisos de Locatarios Auxiliar");
                    jbarra1.setValue((100 * 17) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float[] pAVILOC_ANT = fAVI_LOC();

                    processo.setText("Avisos de S√≥cios Auxiliar");
                    jbarra1.setValue((100 * 18) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float[] pAVISOC_ANT = fAVI_SOC();

//                    processo.setText("Avisos de Reten√ß√£o Auxiliar");
//                    jbarra1.setValue((100 * 19) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
//                    float[] pAVIRET_ANT = fAVI_RET();

                    processo.setText("Caixa Auxiliar");
                    jbarra1.setValue((100 * 20) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float[] pCXA_ANT = fCXA();

                    processo.setText("Dep√≥sitos Auxiliar");
                    jbarra1.setValue((100 * 21) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float pDEP_ANT = tDEP(fDEP());

                    processo.setText("Despesas Auxiliar");
                    jbarra1.setValue((100 * 22) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float pDES_ANT = tDES(fDES());

                    processo.setText("Passagens de Caixa Auxiliar");
                    jbarra1.setValue((100 * 23) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float[] pcCXA_ANT = fPCX();

                    processo.setText("Adm Auxiliar");
                    jbarra1.setValue((100 * 24) / 26);
//                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    float[] oADM_ANT = tADM(fADM());

                    processo.setText("Campos Auxiliar");
                    jbarra1.setValue((100 * 25) / 26);
                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
//                    Object[][] lcampos_ant = ListaCampos();

                    processo.setText("Campos Adm Auxiliar");
                    jbarra1.setValue((100 * 26) / 26);
                    try {Thread.sleep(1000);} catch (InterruptedException e) {}
                    Object[][] acampos_ant = ListaCamposAdm();

                    processo.setText("Adiantamento Auxiliar");
                    float aADI = tADI();

                    // Saldo final acumulado
                    float sfinal = 0;

                    float sd_cr =0; float sd_db = 0;
                    Razao Bean1 = new Razao();
                    Bean1.set_dsLinha01("PROPRIETARIOS");
                    Bean1.set_crLinha01(LerValor.floatToCurrency(pRECIBO[0] + pRECIBO[10] - pRECIBO[1] + pAVIDISP[0] - pRECIBO[9], 2));
                    Bean1.set_dbLinha01(LerValor.floatToCurrency(pAVIDISP[1] + pEXT, 2));
                    Bean1.set_sdLinha01(LerValor.floatToCurrency(pRECIBO[0] + pRECIBO[10] - pRECIBO[1] + pAVIDISP[0] - pRECIBO[9] - pAVIDISP[1] - pEXT, 2));
                    sd_cr = pRECIBO_ANT[0] + pRECIBO_ANT[10] - pRECIBO[1] + pAVIDISP_ANT[0] - pRECIBO_ANT[9];
                    sd_db = pAVIDISP_ANT[1] + pEXT_ANT;
                    Bean1.set_saLinha01(LerValor.floatToCurrency(sd_cr - sd_db, 2)); // SALDO ANTERIOR
                    Bean1.set_sfLinha01(LerValor.floatToCurrency(pRECIBO[0] + pRECIBO[10] - pRECIBO[1] + pAVIDISP[0] - pRECIBO[9] - pAVIDISP[1] - pEXT + (sd_cr - sd_db), 2));
                    lista.add(Bean1);

                    Bean1 = new Razao();
                    Bean1.set_dsLinha01("ADIANTAMENTOS");
                    Bean1.set_crLinha01(LerValor.floatToCurrency(0, 2));
                    Bean1.set_dbLinha01(LerValor.floatToCurrency(pADI, 2));
                    Bean1.set_sdLinha01(LerValor.floatToCurrency(pADI * -1, 2));
                    Bean1.set_saLinha01(LerValor.floatToCurrency(aADI * -1, 2));
                    Bean1.set_sfLinha01(LerValor.floatToCurrency((pADI + aADI) * -1, 2));
                    lista.add(Bean1);

                    // acumula sfinal
                    sfinal = pRECIBO[0] + pRECIBO[10] + pAVIDISP[0] - pRECIBO[9] - pAVIDISP[1] - pEXT + (sd_cr - sd_db);

                    Bean1 = new Razao();
                    Bean1.set_dsLinha01("LOCAT√ÅRIOS");
                    Bean1.set_crLinha01(LerValor.floatToCurrency(pAVILOC[0], 2));
                    Bean1.set_dbLinha01(LerValor.floatToCurrency(pAVILOC[1], 2));
                    Bean1.set_sdLinha01(LerValor.floatToCurrency(pAVILOC[0] - pAVILOC[1], 2));
                    sd_cr = pAVILOC_ANT[0];
                    sd_db = pAVILOC_ANT[1];
                    Bean1.set_saLinha01(LerValor.floatToCurrency(sd_cr - sd_db, 2));
                    Bean1.set_sfLinha01(LerValor.floatToCurrency(pAVILOC[0] - pAVILOC[1] + (sd_cr - sd_db), 2));
                    lista.add(Bean1);

                    // acumula sfinal
                    sfinal += pAVILOC[0] - pAVILOC[1] + (sd_cr - sd_db);

                    Bean1 = new Razao();
                    Bean1.set_dsLinha01("S√ìCIOS");
                    Bean1.set_crLinha01(LerValor.floatToCurrency(pAVISOC[0], 2));
                    Bean1.set_dbLinha01(LerValor.floatToCurrency(pAVISOC[1], 2));
                    Bean1.set_sdLinha01(LerValor.floatToCurrency(pAVISOC[0] - pAVISOC[1], 2));
                    sd_cr = pAVISOC_ANT[0];
                    sd_db = pAVISOC_ANT[1];
                    Bean1.set_saLinha01(LerValor.floatToCurrency(sd_cr - sd_db, 2));
                    Bean1.set_sfLinha01(LerValor.floatToCurrency(pAVISOC[0] - pAVISOC[1] + (sd_cr - sd_db), 2));
                    lista.add(Bean1);

                    // acumula sfinal
                    sfinal += pAVISOC[0] - pAVISOC[1] + (sd_cr - sd_db);

//                    19/11/2014
//                    Bean1 = new Razao();
//                    Bean1.set_dsLinha01("RETEN√á√ÉO");
//                    Bean1.set_crLinha01(LerValor.floatToCurrency(pAVIRET[0], 2));
//                    Bean1.set_dbLinha01(LerValor.floatToCurrency(pAVIRET[1], 2));
//                    Bean1.set_sdLinha01(LerValor.floatToCurrency(pAVIRET[0] - pAVIRET[1], 2));
//                    sd_cr = pAVIRET_ANT[0];
//                    sd_db = pAVIRET_ANT[1];
//                    Bean1.set_saLinha01(LerValor.floatToCurrency(sd_cr - sd_db, 2));
//                    Bean1.set_sfLinha01(LerValor.floatToCurrency(pAVIRET[0] - pAVIRET[1] + (sd_cr - sd_db), 2));
//                    lista.add(Bean1);
//
//                    // acumula sfinal
//                    sfinal += pAVIRET[0] - pAVIRET[1] + (sd_cr - sd_db);

            //        Bean1 = new Razao();
            //        Bean1.set_dsLinha01("CAIXA DO DIA");
            //        Bean1.set_crLinha01(LerValor.floatToCurrency(pCXA[0], 2));
            //        Bean1.set_dbLinha01(LerValor.floatToCurrency(pCXA[1], 2));
            //        Bean1.set_sdLinha01(LerValor.floatToCurrency(pCXA[0] - pCXA[1], 2));
            //        sd_cr = pCXA_ANT[0];
            //        sd_db = pCXA_ANT[1];
            //        Bean1.set_saLinha01(LerValor.floatToCurrency(sd_cr - sd_db, 2));
            //        Bean1.set_sfLinha01(LerValor.floatToCurrency(pCXA[0] - pCXA[1] + (sd_cr - sd_db), 2));
            //        lista.add(Bean1);
            //        
                    // acumula sfinal
                    sfinal = 0;
                    Bean1 = new Razao();
                    Bean1.set_dsLinha01("");
                    Bean1.set_crLinha01("");
                    Bean1.set_dbLinha01("");        
                    Bean1.set_sfLinha01("");
                    lista.add(Bean1);

                    Bean1 = new Razao();
                    Bean1.set_dsLinha01("COMISSAO");
                    Bean1.set_crLinha01(LerValor.floatToCurrency(valor_com, 2));
                    Bean1.set_dbLinha01("0,00");        
                    Bean1.set_sdLinha01(LerValor.floatToCurrency(valor_com, 2));
                    float valor_com_ant = pRECIBO_ANT[9];
                    sd_cr = valor_com_ant;
                    sd_db = 0;
                    Bean1.set_saLinha01(LerValor.floatToCurrency(sd_cr - sd_db, 2));
                    Bean1.set_sfLinha01(LerValor.floatToCurrency(valor_com + (sd_cr - sd_db), 2));
                    lista.add(Bean1);

                    // acumula sfinal
                    sfinal += valor_com + (sd_cr - sd_db);

                    Bean1 = new Razao();
                    Bean1.set_dsLinha01("MULTA");
                    Bean1.set_crLinha01(LerValor.floatToCurrency(valor_mul, 2));
                    Bean1.set_dbLinha01("0,00");        
                    Bean1.set_sdLinha01(LerValor.floatToCurrency(valor_mul, 2));
                    float valor_mul_ant = oADM_ANT[0];
                    sd_cr = valor_mul_ant;
                    sd_db = 0;
                    Bean1.set_saLinha01(LerValor.floatToCurrency(sd_cr - sd_db, 2));
                    Bean1.set_sfLinha01(LerValor.floatToCurrency(valor_mul + (sd_cr - sd_db), 2));
                    lista.add(Bean1);

                    // acumula sfinal
                    sfinal += valor_mul + (sd_cr - sd_db);

                    Bean1 = new Razao();
                    Bean1.set_dsLinha01("JUROS");
                    float valor_jur_ant = oADM_ANT[1];
                    Bean1.set_crLinha01(LerValor.floatToCurrency(valor_jur, 2));
                    Bean1.set_dbLinha01("0,00");        
                    Bean1.set_sdLinha01(LerValor.floatToCurrency(valor_jur, 2));
                    sd_cr = valor_jur_ant;
                    sd_db = 0;
                    Bean1.set_saLinha01(LerValor.floatToCurrency(sd_cr - sd_db, 2));
                    Bean1.set_sfLinha01(LerValor.floatToCurrency(valor_jur + (sd_cr - sd_db), 2));
                    lista.add(Bean1);

                    // acumula sfinal
                    sfinal += valor_jur + (sd_cr - sd_db);

                    Bean1 = new Razao();
                    Bean1.set_dsLinha01("CORRE√á√ÉO");
                    float valor_cor_ant = oADM_ANT[2];
                    Bean1.set_crLinha01(LerValor.floatToCurrency(valor_cor, 2));
                    Bean1.set_dbLinha01("0,00");  
                    Bean1.set_sdLinha01(LerValor.floatToCurrency(valor_cor, 2));
                    sd_cr = valor_cor_ant;
                    sd_db = 0;
                    Bean1.set_saLinha01(LerValor.floatToCurrency(sd_cr - sd_db, 2));
                    Bean1.set_sfLinha01(LerValor.floatToCurrency(valor_cor + (sd_cr - sd_db), 2));        
                    lista.add(Bean1);

                    // acumula sfinal
                    sfinal += valor_cor + (sd_cr - sd_db);

                    Bean1 = new Razao();
                    Bean1.set_dsLinha01("EXPEDIENTE");
                    float valor_exp_ant = oADM_ANT[3];
                    Bean1.set_crLinha01(LerValor.floatToCurrency(valor_exp, 2));
                    Bean1.set_dbLinha01("0,00");        
                    Bean1.set_sdLinha01(LerValor.floatToCurrency(valor_exp, 2));
                    sd_cr = valor_exp_ant;
                    sd_db = 0;
                    Bean1.set_saLinha01(LerValor.floatToCurrency(sd_cr - sd_db, 2));
                    Bean1.set_sfLinha01(LerValor.floatToCurrency(valor_exp + (sd_cr - sd_db), 2));
                    lista.add(Bean1);

                    // acumula sfinal
                    sfinal += valor_exp + (sd_cr - sd_db);

                    Bean1 = new Razao();
                    Bean1.set_dsLinha01("T O T A I S = = = >");
                    float valor_fim = sfinal;
                    Bean1.set_crLinha01("");
                    Bean1.set_dbLinha01("");        
                    Bean1.set_sfLinha01(LerValor.floatToCurrency(valor_fim, 2));
                    lista.add(Bean1);

                    Bean1 = new Razao();
                    Bean1.set_dsLinha01("");
                    Bean1.set_crLinha01("");
                    Bean1.set_dbLinha01("");        
                    Bean1.set_sfLinha01("");
                    lista.add(Bean1);

                    sfinal = 0; boolean bprint = false;
                    Object[][] acampos_tot = Concatena(acampos, acampos_ant);        
                    for (int i=0;i<acampos_tot.length;i++) {
                        Bean1 = new Razao();
                        Bean1.set_dsLinha01(acampos_tot[i][1].toString());
                        Bean1.set_crLinha01(LerValor.floatToCurrency(Convert.toFloat(acampos_tot[i][2]),2));
                        Bean1.set_dbLinha01(LerValor.floatToCurrency(Convert.toFloat(acampos_tot[i][3]),2));
                        Bean1.set_sdLinha01(LerValor.floatToCurrency(Convert.toFloat(acampos_tot[i][2]) - Convert.toFloat(acampos_tot[i][3]), 2));
                        Bean1.set_saLinha01(LerValor.floatToCurrency(Convert.toFloat(acampos_tot[i][4]) - Convert.toFloat(acampos_tot[i][5]), 2));
                        Bean1.set_sfLinha01(LerValor.floatToCurrency(Convert.toFloat(acampos_tot[i][2]) - Convert.toFloat(acampos_tot[i][3]) + Convert.toFloat(acampos_tot[i][4]) - Convert.toFloat(acampos_tot[i][5]), 2));
                        sfinal += Convert.toFloat(acampos_tot[i][2]) - Convert.toFloat(acampos_tot[i][3]) + Convert.toFloat(acampos_tot[i][4]) - Convert.toFloat(acampos_tot[i][5]);
                        lista.add(Bean1);    
                        bprint = true;
                    }

                    if (bprint) {
                        Bean1 = new Razao();
                        Bean1.set_dsLinha01("T O T A I S = = = >");
                        valor_fim = sfinal;
                        Bean1.set_crLinha01("");
                        Bean1.set_dbLinha01("");        
                        Bean1.set_sfLinha01(LerValor.floatToCurrency(valor_fim, 2));
                        lista.add(Bean1);
                    }

                    Bean1 = new Razao();
                    Bean1.set_dsLinha01("");
                    Bean1.set_crLinha01("");
                    Bean1.set_dbLinha01("");        
                    Bean1.set_sfLinha01("");
                    lista.add(Bean1);

                    // Depositos
                    Bean1 = new Razao();
                    Bean1.set_dsLinha01("DEPOSITOS");
                    float valor_dep_ant = pDEP_ANT;
                    Bean1.set_crLinha01("0,00");
                    Bean1.set_dbLinha01(LerValor.floatToCurrency(valor_dep, 2));        

                    Bean1.set_sdLinha01(LerValor.floatToCurrency(valor_dep * -1, 2));
                    Bean1.set_saLinha01(LerValor.floatToCurrency(valor_dep_ant * -1, 2));
                    Bean1.set_sfLinha01(LerValor.floatToCurrency((valor_dep + valor_dep_ant) * -1, 2));
                    lista.add(Bean1);

                    Bean1 = new Razao();
                    Bean1.set_dsLinha01("DESPESAS");
                    float valor_des_ant = pDES_ANT;
                    Bean1.set_crLinha01("0,00");
                    Bean1.set_dbLinha01(LerValor.floatToCurrency(valor_des, 2));        

                    Bean1.set_sdLinha01(LerValor.floatToCurrency(valor_des * -1, 2));
                    Bean1.set_saLinha01(LerValor.floatToCurrency(valor_des_ant * -1, 2));
                    Bean1.set_sfLinha01(LerValor.floatToCurrency((valor_des + valor_des_ant) * -1, 2));
                    lista.add(Bean1);

                    Bean1 = new Razao();
                    Bean1.set_dsLinha01("");
                    Bean1.set_crLinha01("");
                    Bean1.set_dbLinha01("");        
                    Bean1.set_sfLinha01("");
                    lista.add(Bean1);

                    for (int i=0;i<lcampos.length;i++) {
                        Bean1 = new Razao();
                        Bean1.set_dsLinha01(lcampos[i][1].toString());
                        Bean1.set_crLinha01(LerValor.floatToCurrency(Convert.toFloat(lcampos[i][2]),2));
                        Bean1.set_dbLinha01("0,00");        
                        lista.add(Bean1);            
                    }

                    // Passagens de caixa
                    Bean1 = new Razao();
                    Bean1.set_dsLinha01("PASSAGEM DE CAIXA");
                    float pc_cre = pcCXA[0];
                    float pc_deb = pcCXA[1];
                    float pc_sld = pcCXA[0] - pcCXA[1];
                    Bean1.set_crLinha01(LerValor.floatToCurrency(pc_cre, 2));
                    Bean1.set_dbLinha01(LerValor.floatToCurrency(pc_deb, 2));        
                    lista.add(Bean1);

                    return null;  
               }  
               
               @Override  
               protected void done() {  
                    JRDataSource jrds = new JRBeanCollectionDataSource(lista);

                    try {
                        String fileName = "reports/reRazao.jasper";
                        JasperPrint print = JasperFillManager.fillReport(fileName, null, jrds);

                        // Create a PDF exporter
                        JRExporter exporter = new JRPdfExporter();

                        new jDirectory("reports/Relatorios/" + Dates.iYear(new Date()) + "/" + Dates.Month(new Date()) + "/");
                        String pathName = "reports/Relatorios/" + Dates.iYear(new Date()) + "/" + Dates.Month(new Date()) + "/";

                        // Configure the exporter (set output file name and print object)
                        String FileNamePdf = pathName + "razao" + Dates.DateFormata("dd-MM-yyyy_HH_mm", new Date()) + ".pdf";
                        String outFileName = FileNamePdf;
                        exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName);
                        exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);

                        // Export the PDF file
                        exporter.exportReport();

                        new toPreview(outFileName);
            //            if (!"jasper".equals(VariaveisGlobais.reader)) {
            //                ComandoExterno ce = new ComandoExterno();
            //                ComandoExterno.ComandoExterno(VariaveisGlobais.reader + " " + FileNamePdf);
            //                //ce.ComandoExterno("lp " + FileNamePdf);
            //            } else {
            //                JasperViewer viewer = new JasperViewer(print, false);
            //                viewer.show();
            //            }
                    } catch (JRException e) {
                        e.printStackTrace();
                        System.exit(1);
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.exit(1);
                    }        
                    jDtRazao.setEnabled(true); jButton1.setEnabled(true);
               }  
        };  
        worker.execute();  
    }
    
    private Object[][] fADM() {
        String sql = "SELECT conta, rgprp, rgimv, contrato, campo, dtvencimento, dtrecebimento, rc_aut FROM auxiliar WHERE Upper(conta) = 'ADM' " + where +" ORDER BY rc_aut";
        ResultSet rs = conn.OpenTable(sql, null);
        int fim = conn.RecordCount(rs); int posit = 1;
        
        Object[][] aMU = {}, aJU = {}, aCO = {}, aEP = {};
        
        try {
            while (rs.next()) {
                jbarra2.setValue((100 * posit++)/ fim);
//                try {Thread.sleep(1000);} catch (InterruptedException e) {}
                
                String srgprp = rs.getString("rgprp");
                String srgimv = rs.getString("rgimv");
                String scontrato = rs.getString("contrato");
                String svecto = rs.getString("dtvencimento");
                String srecto = rs.getString("dtrecebimento");
                String saut = rs.getString("rc_aut");
                
                String auxCpo = rs.getString("campo");
                String auxMtz[] = auxCpo.split(":");
                for (int i=0;i<auxMtz.length;i++) {
                    String subCpo1 = auxMtz[i].substring(0,2);
                    String subCpo2 = auxMtz[i].substring(2);
                    float subCpo3 = LerValor.FloatNumber(subCpo2, 2);
                    
                    if ("MU".equals(subCpo1)) {
                        int pos = FuncoesGlobais.FindinObjects(aMU, 2, scontrato);
                        if (pos > -1) {
                            float valor1 = Convert.toFloat(aMU[pos][3]) + subCpo3;
                            Object valor2 = new Float(valor1);

                            aMU[pos][3] = valor2;
                        } else {
                            Object valor = new Float(subCpo3);
                            aMU = FuncoesGlobais.ObjectsAdd(aMU, new Object[] {srgprp, srgimv, scontrato, subCpo3, svecto, srecto});
                        }
                    } else if ("JU".equals(subCpo1)) {
                        int pos = FuncoesGlobais.FindinObjects(aJU, 2, scontrato);
                        if (pos > -1) {
                            float valor1 = Convert.toFloat(aJU[pos][3]) + subCpo3;
                            Object valor2 = new Float(valor1);

                            aJU[pos][3] = valor2;
                        } else {
                            Object valor = new Float(subCpo3);
                            aJU = FuncoesGlobais.ObjectsAdd(aJU, new Object[] {srgprp, srgimv, scontrato, subCpo3, svecto, srecto});
                        }
                    } else if ("CO".equals(subCpo1)) {
                        int pos = FuncoesGlobais.FindinObjects(aCO, 2, scontrato);
                        if (pos > -1) {
                            float valor1 = Convert.toFloat(aCO[pos][3]) + subCpo3;
                            Object valor2 = new Float(valor1);

                            aCO[pos][3] = valor2;
                        } else {
                            Object valor = new Float(subCpo3);
                            aCO = FuncoesGlobais.ObjectsAdd(aCO, new Object[] {srgprp, srgimv, scontrato, subCpo3, svecto, srecto});
                        }
                    } else if ("EP".equals(subCpo1)) {
                        int pos = FuncoesGlobais.FindinObjects(aEP, 2, scontrato);
                        if (pos > -1) {
                            float valor1 = Convert.toFloat(aEP[pos][3]) + subCpo3;
                            Object valor2 = new Float(valor1);

                            aEP[pos][3] = valor2;
                        } else {
                            Object valor = new Float(subCpo3);
                            aEP = FuncoesGlobais.ObjectsAdd(aEP, new Object[] {srgprp, srgimv, scontrato, subCpo3, svecto, srecto});
                        }
                    }
                }
            }
        } catch (SQLException ex) {}
        conn.CloseTable(rs);
        
        return new Object[][] {aMU, aJU, aCO, aEP};
    }

    private float[] tADM(Object[][] value) {
        float fMU = 0, fJU = 0, fCO = 0, fEP = 0;
        
        if (value.length >= 1) {
            // Multa
            for (int mu=0; mu<value[0].length;mu++) {
                float valor = Convert.toFloat(((Object[])value[0][mu])[3]);
                fMU += valor;
            }
        }
        
        if (value.length >= 2) {
            // Juros
            for (int ju=0; ju<value[1].length;ju++) {
                float valor = Convert.toFloat(((Object[])value[1][ju])[3]);
                fJU += valor;
            }
        }
        
        if (value.length >= 3) {
            // Correcao
            for (int co=0; co<value[2].length;co++) {
                float valor = Convert.toFloat(((Object[])value[2][co])[3]);
                fCO += valor;
            }
        }
        
        if (value.length >= 4) {
            // Expediente
            for (int ep=0; ep<value[3].length;ep++) {
                float valor = Convert.toFloat(((Object[])value[3][ep])[3]);
                fEP += valor;
            }
        }
        
        return new float[] {fMU, fJU, fCO, fEP};
    }
    
    private Object[][] fEXT() {
        String sql = "SELECT conta, contrato, campo, dtvencimento, dtrecebimento, rc_aut FROM auxiliar WHERE Upper(conta) = 'EXT' " + where + " ORDER BY rc_aut";
        ResultSet rs = conn.OpenTable(sql, null);
        int fim = conn.RecordCount(rs); int posit = 1;
        
        Object[][] aPR = {};
        
        try {
            while (rs.next()) {
                jbarra2.setValue((100 * posit++)/ fim);
//                try {Thread.sleep(1000);} catch (InterruptedException e) {}

                String scontrato = rs.getString("contrato");
                
                String auxCpo = rs.getString("campo");
                String auxMtz[] = auxCpo.split(":");
                
                String subCpo1 = auxMtz[2];
                float subCpo2 = LerValor.FloatNumber(subCpo1, 2);
                    
                int pos = FuncoesGlobais.FindinObjects(aPR, 0, scontrato);
                if (pos > -1) {
                    float valor1 = Convert.toFloat(aPR[pos][1]) + subCpo2;
                    Object valor2 = new Float(valor1);

                    aPR[pos][1] = valor2;
                } else {
                    Object valor = new Float(subCpo2);
                    aPR = FuncoesGlobais.ObjectsAdd(aPR, new Object[] {scontrato, subCpo2});
                }
            }
        } catch (SQLException ex) {}
        conn.CloseTable(rs);
        
        return aPR;
    }
    
    private float tEXT(Object[][] value) {
        float total = 0;
        
        for (int i=0;i<value.length;i++) {
            total += Convert.toFloat(value[i][1]);
        }
        
        return total;
    }
    
    private Object[][] fDEP() {
        String sql = "SELECT conta, contrato, campo, dtvencimento, dtrecebimento, rc_aut FROM auxiliar WHERE Upper(conta) = 'DEP' " + where + " ORDER BY rc_aut";
        ResultSet rs = conn.OpenTable(sql, null);
        int fim = conn.RecordCount(rs); int posit = 1;
        
        Object[][] aCH = {}, aCP = {}, aCT = {}, aDN = {};
        
        try {
            while (rs.next()) {
                jbarra2.setValue((100 * posit++)/ fim);
//                try {Thread.sleep(1000);} catch (InterruptedException e) {}
                
                String scontrato = rs.getString("contrato");
                
                String auxCpo = rs.getString("campo");
                String auxMtz[] = auxCpo.split(":");
                
                String subCpo1 = auxMtz[2];
                float subCpo2 = LerValor.FloatNumber(subCpo1, 2);
                  
                if ("CH".equals(scontrato)) {
                    int pos = FuncoesGlobais.FindinObjects(aCH, 0, scontrato);
                    if (pos > -1) {
                        float valor1 = Convert.toFloat(aCH[pos][1]) + subCpo2;
                        Object valor2 = new Float(valor1);

                        aCH[pos][1] = valor2;
                    } else {
                        Object valor = new Float(subCpo2);
                        aCH = FuncoesGlobais.ObjectsAdd(aCH, new Object[] {scontrato, subCpo2});
                    }
                } else if ("CP".equals(scontrato)) {
                    int pos = FuncoesGlobais.FindinObjects(aCP, 0, scontrato);
                    if (pos > -1) {
                        float valor1 = Convert.toFloat(aCP[pos][1]) + subCpo2;
                        Object valor2 = new Float(valor1);

                        aCP[pos][1] = valor2;
                    } else {
                        Object valor = new Float(subCpo2);
                        aCP = FuncoesGlobais.ObjectsAdd(aCP, new Object[] {scontrato, subCpo2});
                    }
                } else if ("CT".equals(scontrato)) {
                    int pos = FuncoesGlobais.FindinObjects(aCT, 0, scontrato);
                    if (pos > -1) {
                        float valor1 = Convert.toFloat(aCT[pos][1]) + subCpo2;
                        Object valor2 = new Float(valor1);

                        aCT[pos][1] = valor2;
                    } else {
                        Object valor = new Float(subCpo2);
                        aCT = FuncoesGlobais.ObjectsAdd(aCT, new Object[] {scontrato, subCpo2});
                    }
                } else if ("DN".equals(scontrato)) {
                    int pos = FuncoesGlobais.FindinObjects(aDN, 0, scontrato);
                    if (pos > -1) {
                        float valor1 = Convert.toFloat(aDN[pos][1]) + subCpo2;
                        Object valor2 = new Float(valor1);

                        aDN[pos][1] = valor2;
                    } else {
                        Object valor = new Float(subCpo2);
                        aDN = FuncoesGlobais.ObjectsAdd(aDN, new Object[] {scontrato, subCpo2});
                    }
                }
            }
        } catch (SQLException ex) {}
        conn.CloseTable(rs);
        
        return new Object[][] {aCH, aCP, aCT, aDN};
    }

    private float tDEP(Object[][] value) {
        float total = 0;
        
        for (int i=0;i<value.length;i++) {
            if (value[i].length > 0) total += Convert.toFloat(((Object[])value[i][0])[1]);
        }
        
        return total;
    }
    
    private float tADI() {
        String sql = "SELECT conta, contrato, campo, dtvencimento, dtrecebimento, rc_aut FROM auxiliar WHERE Upper(conta) = 'ADI' " + where + " ORDER BY rc_aut";
        ResultSet rs = conn.OpenTable(sql, null);

        float aAD = 0;
        
        try {
            while (rs.next()) {
                String auxCpo = rs.getString("campo");
                String auxMtz[] = auxCpo.split(":");
                    
                aAD += LerValor.FloatNumber(auxMtz[1], 2);
            }
        } catch (SQLException ex) {}
        conn.CloseTable(rs);
        
        return aAD;
    }
    
    private Object[][] fDES() {
        String sql = "SELECT conta, contrato, campo, dtvencimento, dtrecebimento, rc_aut FROM auxiliar WHERE Upper(conta) = 'DES' " + where + " ORDER BY rc_aut";
        ResultSet rs = conn.OpenTable(sql, null);
        int fim = conn.RecordCount(rs); int posit = 1;
        
        Object[][] aDS = {};
        
        try {
            while (rs.next()) {
                jbarra2.setValue((100 * posit++)/ fim);
//                try {Thread.sleep(1000);} catch (InterruptedException e) {}
                
                String scontrato = rs.getString("contrato");
                
                String auxCpo = rs.getString("campo");
                String auxMtz[] = auxCpo.split(":");
                String nmeCpo = null;
                
                try { nmeCpo = conn.ReadFieldsTable(new String[] {"buffer"}, "combobuffer", "autoid = '" + scontrato + "'")[0][3].toString();} catch (Exception e) {}
                if (nmeCpo != null) {
                    String subCpo1 = auxMtz[2];
                    float subCpo2 = LerValor.FloatNumber(subCpo1, 2);

                    int pos = FuncoesGlobais.FindinObjects(aDS, 0, scontrato);
                    if (pos > -1) {
                        float valor1 = Convert.toFloat(aDS[pos][2]) + subCpo2;
                        Object valor2 = new Float(valor1);

                        aDS[pos][2] = valor2;
                    } else {
                        Object valor = new Float(subCpo2);
                        aDS = FuncoesGlobais.ObjectsAdd(aDS, new Object[] {scontrato, nmeCpo, subCpo2});
                    }
                }
            }
        } catch (SQLException ex) {}
        conn.CloseTable(rs);
        
        return aDS;
    }
    
    private float tDES(Object[][] value) {
        float total = 0;
        
        for (int i=0;i<value.length;i++) {
            total += Convert.toFloat(value[i][2]);
        }
        
        return total;
    }

    private float[] fPCX() {
        String sql = "SELECT campo FROM auxiliar WHERE Upper(conta) = 'PCX' " + where + " ORDER BY rc_aut";
        ResultSet rs = conn.OpenTable(sql, null);
        int fim = conn.RecordCount(rs); int posit = 1;
        
        float fCR = 0, fDB = 0;
        
        try {
            while (rs.next()) {
                jbarra2.setValue((100 * posit++)/ fim);
//                try {Thread.sleep(1000);} catch (InterruptedException e) {}
                
                String auxCpo = rs.getString("campo");
                String auxMtz[] = auxCpo.split(":");
                
                String sCRDB = auxMtz[7];
                
                String subCpo1 = auxMtz[2];
                float subCpo2 = LerValor.FloatNumber(subCpo1, 2);
                    
                if ("CRE".equals(sCRDB)) {
                    fCR += subCpo2;
                } else {
                    fDB += subCpo2;
                }
            }
        } catch (SQLException ex) {}
        conn.CloseTable(rs);
        
        return new float[] {fCR, fDB};
    }
    
    private float[] fAVI_DISP() {
        String sql = "SELECT campo FROM auxiliar WHERE Upper(conta) = 'AVI' " + where + " ORDER BY rc_aut";
        ResultSet rs = conn.OpenTable(sql, null);
        int fim = conn.RecordCount(rs); int posit = 1;
        
        float fCR = 0, fDB = 0;
        
        try {
            while (rs.next()) {
                jbarra2.setValue((100 * posit++)/ fim);
//                try {Thread.sleep(1000);} catch (InterruptedException e) {}
                
                String auxCpo = rs.getString("campo");
                String auxMtz[] = auxCpo.split(":");
                
                String sTipo = auxMtz[1];
                String sCRDB = auxMtz[8];
                
                if (Integer.valueOf(sTipo) == 0) {
                    String subCpo1 = auxMtz[2];
                    float subCpo2 = LerValor.FloatNumber(subCpo1, 2);

                    if ("CRE".equals(sCRDB)) {
                        fCR += subCpo2;
                    } else {
                        fDB += subCpo2;
                    }
                }
            }
        } catch (SQLException ex) {}
        conn.CloseTable(rs);
        
        return new float[] {fCR, fDB};
    }
    
    private float[] fAVI_RET() {
        String sql = "SELECT campo FROM auxiliar WHERE conta = 'REC' AND instr(campo,':RT') " + where + " ORDER BY rc_aut";
        ResultSet rs = conn.OpenTable(sql, null);
        int fim = conn.RecordCount(rs); int posit = 1;
        
        float fCR = 0;
        
        // Cr√©dito
        try {
            while (rs.next()) {
//                jbarra2.setValue((100 * posit++)/ fim);
                try {Thread.sleep(1000);} catch (InterruptedException e) {}
                
                String auxCpo = rs.getString("campo");
                String auxMtz1[] = auxCpo.split(";");
                int pos = FuncoesGlobais.IndexOf(auxMtz1, "RT");
                if (pos > -1) {
                    String auxMtz[] = auxMtz1[pos].split(":");
                    String subCpo1 = auxMtz[2];
                    float subCpo2 = LerValor.FloatNumber(subCpo1, 2);

                    fCR += subCpo2;
                }                
            }
        } catch (SQLException ex) {}
        conn.CloseTable(rs);
        
        // D√©bito
        String sql2 = "SELECT campo FROM auxiliar WHERE InStr(campo,'00RT') " + where + " ORDER BY rc_aut";
        ResultSet rs2 = conn.OpenTable(sql2, null);

        float fDB = 0;
        
        // Cr√©dito
        try {
            while (rs2.next()) {
                String auxCpo = rs2.getString("campo");
                String auxMtz[] = auxCpo.split(":");
                
                String subCpo1 = auxMtz[2];
                float subCpo2 = LerValor.FloatNumber(subCpo1, 2);
                fDB += subCpo2;
            }
        } catch (SQLException ex) {}
        conn.CloseTable(rs2);
        
        return new float[] {fCR, fDB};
    }
    
    private float[] fAVI_SOC() {
        String sql = "SELECT campo FROM auxiliar WHERE Upper(conta) = 'AVI' " + where + " ORDER BY rc_aut";
        ResultSet rs = conn.OpenTable(sql, null);
        int fim = conn.RecordCount(rs); int posit = 1;
        
        float fCR = 0, fDB = 0;
        
        try {
            while (rs.next()) {
                jbarra2.setValue((100 * posit++)/ fim);
//                try {Thread.sleep(1000);} catch (InterruptedException e) {}
                
                String auxCpo = rs.getString("campo");
                String auxMtz[] = auxCpo.split(":");
                
                String sTipo = auxMtz[1];
                String sCRDB = auxMtz[8];
                
                if (Integer.valueOf(sTipo) == 3) {
                    String subCpo1 = auxMtz[2];
                    float subCpo2 = LerValor.FloatNumber(subCpo1, 2);

                    if ("CRE".equals(sCRDB)) {
                        fCR += subCpo2;
                    } else {
                        fDB += subCpo2;
                    }
                }
            }
        } catch (SQLException ex) {}
        conn.CloseTable(rs);
        
        return new float[] {fCR, fDB};
    }
    
    private float[] fAVI_LOC() {
        String sql = "SELECT campo FROM auxiliar WHERE Upper(conta) = 'AVI' " + where + " ORDER BY rc_aut";
        ResultSet rs = conn.OpenTable(sql, null);
        int fim = conn.RecordCount(rs); int posit = 1;
        
        float fCR = 0, fDB = 0;
        
        try {
            while (rs.next()) {
                jbarra2.setValue((100 * posit++)/ fim);
//                try {Thread.sleep(1000);} catch (InterruptedException e) {}

                String auxCpo = rs.getString("campo");
                String auxMtz[] = auxCpo.split(":");
                
                String sTipo = auxMtz[1];
                String sCRDB = auxMtz[8];
                
                if (Integer.valueOf(sTipo) == 4) {
                    String subCpo1 = auxMtz[2];
                    float subCpo2 = LerValor.FloatNumber(subCpo1, 2);

                    if ("CRE".equals(sCRDB)) {
                        fCR += subCpo2;
                    } else {
                        fDB += subCpo2;
                    }
                }
            }
        } catch (SQLException ex) {}
        conn.CloseTable(rs);
        
        return new float[] {fCR, fDB};
    }
    
    private Object[][] fAVI_ADM() {
        String sql = "SELECT a.autoid, a.conta, a.contrato, (SELECT d.descr FROM adm AS d WHERE d.codigo = a.contrato) AS descricao, a.campo, a.dtvencimento, a.dtrecebimento, a.rc_aut FROM auxiliar AS a WHERE a.conta = 'AVI' AND (MID(a.campo,4,1) = '2' OR MID(a.campo,4,2) = '02') " + where + " ORDER BY a.contrato;";
        ResultSet rs = conn.OpenTable(sql, null);
        int fim = conn.RecordCount(rs); int posit = 1;
        
        float fCR = 0, fDB = 0;
        String fCT = "";
        
        Object[][] fADM = {};
        
        try {
            while (rs.next()) {
                jbarra2.setValue((100 * posit++)/ fim);
//                try {Thread.sleep(1000);} catch (InterruptedException e) {}
                
                String sconta = rs.getString("contrato") ;
                String auxCpo = rs.getString("campo");
                String auxMtz[] = auxCpo.split(":");
                
                String sCONTA = auxMtz[1];
                String sCRDB = auxMtz[8];
                
                String subCpo1 = auxMtz[2];
                float subCpo2 = LerValor.FloatNumber(subCpo1, 2);

                if ("CRE".equals(sCRDB)) {
                    fCR = subCpo2;
                } else {
                    fDB = subCpo2;
                }

                int pos = FuncoesGlobais.FindinObjects(fADM, 0, sconta);
                if (pos > -1) {
                    float valor1_CR = Convert.toFloat(fADM[pos][1]) + fCR;
                    Object valor2_CR = new Float(valor1_CR);

                    float valor1_DB = Convert.toFloat(fADM[pos][2]) + fDB;
                    Object valor2_DB = new Float(valor1_DB);
                    
                    fADM[pos][1] = valor2_CR;
                    fADM[pos][2] = valor2_DB;
                } else {
                    Object valor_CR = new Float(fCR);
                    Object valor_DB = new Float(fDB);
                    fADM = FuncoesGlobais.ObjectsAdd(fADM, new Object[] {sconta, valor_CR, valor_DB});
                }                                
            }
        } catch (SQLException ex) {}
        conn.CloseTable(rs);
        
        return fADM;
    }
    
    private float[] tAVI_ADM(Object[][] fADM, String sconta) {
        float valor_CR = 0, valor_DB = 0;
        int pos = FuncoesGlobais.FindinObjects(fADM, 0, sconta);
        if (pos > -1) {
            valor_CR = Convert.toFloat(fADM[pos][1]);
            valor_DB = Convert.toFloat(fADM[pos][2]);
        }             
        return new float[] {valor_CR, valor_DB};
    }
    
    private float[] fCXA() {
        String sql = "SELECT campo FROM auxiliar WHERE Upper(conta) = 'CXA' " + where + " ORDER BY rc_aut";
        ResultSet rs = conn.OpenTable(sql, null);
        int fim = conn.RecordCount(rs); int posit = 1;
        
        float fCR = 0, fDB = 0;
        
        try {
            while (rs.next()) {
                jbarra2.setValue((100 * posit++)/ fim);
//                try {Thread.sleep(1000);} catch (InterruptedException e) {}
                
                String auxCpo = rs.getString("campo");
                String auxMtz[] = auxCpo.split(":");
                
                String sCRDB = auxMtz[7];
                
                String subCpo1 = auxMtz[2];
                float subCpo2 = LerValor.FloatNumber(subCpo1, 2);

                if ("CRE".equals(sCRDB)) {
                    fCR += subCpo2;
                } else {
                    fDB += subCpo2;
                }
            }
        } catch (SQLException ex) {}
        conn.CloseTable(rs);
        
        return new float[] {fCR, fDB};
    }

    private float[] CalcRecAux() {
        float[] retorno = null;
        String[][] sCampos = {};
        
        String sSql = "SELECT conta, rgprp, rgimv, contrato, campo, dtvencimento, dtrecebimento, rc_aut FROM auxiliar WHERE conta = 'REC' " + where + " ORDER BY rc_aut";
        
        ResultSet imResult = this.conn.OpenTable(sSql, null);
        int fim = conn.RecordCount(imResult); int posit = 1;
        
        float fmul = 0, fjur = 0, fcor = 0, fexp = 0, fseg = 0, fcom = 0;
        float fdesc = 0, fdife = 0, vrrecibo = 0, vrretencao = 0;
        float vrtaxas = 0;
        
        try {
            while (imResult.next()) {
                
                jbarra2.setValue((100 * posit++)/ fim);
                try {Thread.sleep(10);} catch (InterruptedException e) {}

                String campo = imResult.getString("campo");
                
                String trgprp = String.valueOf(imResult.getInt("rgprp"));
                String trgimv = String.valueOf(imResult.getInt("rgimv"));
                String tcontrato = String.valueOf(imResult.getInt("contrato"));
                String tinq = null;
                try {tinq = conn.ReadFieldsTable(new String[] {"nomerazao"}, "locatarios", "contrato = '" + tcontrato + "'")[0][3].toString();} catch (Exception e) {tinq = null;}
                String tvecto = Dates.DateFormata("dd/MM/yyyy", imResult.getDate("dtvencimento"));
                String trecto = Dates.DateFormata("dd/MM/yyyy", imResult.getDate("dtrecebimento"));

                float[] alrtCampos = PegaAluguel(campo);
                vrrecibo += alrtCampos[0] + alrtCampos[2] - alrtCampos[1] + (alrtCampos[5] + alrtCampos[6]) - (alrtCampos[3] + alrtCampos[4]);;
                //vrretencao += alrtCampos[1];
                //vrtaxas += alrtCampos[2];
                
                String tvalor = LerValor.floatToCurrency(vrrecibo, 2);

                if (!"".equals(campo.trim())) {
                    // Multa
                    boolean bMulta = RetPar(campo, "MU");
                    if (bMulta) { fmul += RetVarPar(campo, "MU"); }

                    // Juros
                    boolean bJuros = RetPar(campo, "JU");
                    if (bJuros) { fjur += RetVarPar(campo, "JU"); }

                    // Correcao
                    boolean bCorrecao = RetPar(campo, "CO");
                    if (bCorrecao) { fcor += RetVarPar(campo, "CO"); }

                    // Expediente
                    boolean bExp = RetPar(campo, "EP");
                    if (bExp) { fexp += RetVarPar(campo, "EP"); }

                    // Seguro
                    boolean bSeg = RetPar(campo, "SG");
                    if (bSeg) { fseg += RetVarParNT(campo, "SG"); }

                    // Comissao
                    boolean bCom = RetPar(campo, "CM");
                    if (bCom) { fcom += RetVarPar(campo, "CM"); }

                    // Desconto
                    boolean bDes = RetPar(campo, "DC");
                    if (bDes) { fdesc += RetVarParNT(campo, "DC"); }

                    // Diferen√ßa
                    boolean bDif = RetPar(campo, "DF");
                    if (bDif) { fdife += RetVarParNT(campo, "DF"); }
                    
                    // Taxas e Reten√ß√µes
                    String[] wcampo = campo.split(";");
                    if (wcampo.length > 0) {
                        for (int w=0;w<wcampo.length;w++) {
                            if (wcampo[w].contains("NT")) {
                                vrtaxas += RetValorTX(wcampo[w]);
                                if (wcampo[w].contains("RT")) {
                                    vrretencao += RetValorTX(wcampo[w]);
                                }
                            }
                        }
                    }
                }
                
                //
                try {
                    campo = conn.ReadFieldsTable(new String[] {"campo"}, "auxiliar", "Upper(conta) LIKE 'ADM%' AND rgprp = '" + trgprp + "' AND contrato = '" + tcontrato + "' AND rc_aut = '" + imResult.getString("rc_aut") + "'")[0][3].toString();
                } catch (Exception ex) {campo = "";}
                
                if (!"".equals(campo.trim())) {
                    // Multa
                    boolean bMulta = RetPar(campo, "MU");
                    if (bMulta) { fmul += RetVarPar(campo, "MU"); }

                    // Juros
                    boolean bJuros = RetPar(campo, "JU");
                    if (bJuros) { fjur += RetVarPar(campo, "JU"); }

                    // Correcao
                    boolean bCorrecao = RetPar(campo, "CO");
                    if (bCorrecao) { fcor += RetVarPar(campo, "CO"); }

                    // Expediente
                    boolean bExp = RetPar(campo, "EP");
                    if (bExp) { fexp += RetVarPar(campo, "EP"); }
                    
                    // Seguro
                    boolean bSeg = RetPar(campo, "SG");
                    if (bSeg) { fseg += RetVarParNT(campo, "SG"); }

                    // Comissao
                    boolean bCom = RetPar(campo, "CM");
                    if (bCom) { fcom += RetVarPar(campo, "CM"); }

                    // Desconto
                    boolean bDes = RetPar(campo, "DC");
                    if (bDes) { fdesc += RetVarParNT(campo, "DC"); }

                    // Diferen√ßa
                    boolean bDif = RetPar(campo, "DF");
                    if (bDif) { fdife += RetVarParNT(campo, "DF"); }
                }
                
                String texp = LerValor.floatToCurrency(fexp, 2);
                String tmul = LerValor.floatToCurrency(fmul, 2);
                String tjur = LerValor.floatToCurrency(fjur, 2);
                String tcor = LerValor.floatToCurrency(fcor, 2);
                String tseg = LerValor.floatToCurrency(fseg, 2);
                
                float perc = percComissao(trgprp, trgimv);
                String tcop = String.valueOf(perc);
                String tcom = LerValor.floatToCurrency(fcom, 2);
                        //LerValor.floatToCurrency(vrrecibo * (perc / 100), 2);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        conn.CloseTable(imResult);        
        
        retorno = new float[] {vrrecibo, vrretencao, fdesc, fdife, fexp, fmul, fjur, fcor, fseg, fcom, vrtaxas};
        return retorno;
    }
    
    public float percComissao(String rgprp, String rgimv) throws SQLException {
        Object[][] regFields;
        
        float fComissao = Float.valueOf(LerValor.FormatNumber(conn.ReadParameters("comissao"), 3).replace(",", "."));
        
        if (conn.ReadFieldsTable(new String[] {"RGIMV"}, "multa", "RGIMV = '" + rgimv + "'") != null) {
            regFields = conn.ReadFieldsTable(new String[] {"comissao"}, "multa", "RGIMV = '" + rgimv + "'");
            fComissao = Float.valueOf(LerValor.FormatNumber(regFields[0][3].toString(), 3).replace(",", "."));
        } else {
            if (conn.ReadFieldsTable(new String[] {"RGPRP"}, "multa", "RGPRP = '" + rgprp + "' AND IsNull(RGIMV)") != null) {
                regFields = conn.ReadFieldsTable(new String[] {"comissao"}, "multa", "RGPRP = '" + rgprp + "' AND IsNull(RGIMV)");
                fComissao = Float.valueOf(LerValor.FormatNumber(regFields[0][3].toString(), 3).replace(",", "."));
            }
        }
        return fComissao;
    }

    public static boolean RetPar(String campo, String oque) {
        return (campo.contains(oque));
    }
    
    private float RetVarPar(String campos, String oque) {
        String mVrPar = "0000000000";
        int mIndex = campos.indexOf(oque,0);
        String mCpo = "";

        if (mIndex > -1) {
            mCpo = campos.substring(mIndex + 2, mIndex + 2 + 1);
            if (!":".equals(mCpo)) {
                mCpo = campos.substring(mIndex + 2, mIndex + 2 + 10);

                if (NumberUtils.isDigits(mCpo)) {
                    mVrPar = mCpo;
                }
            }
        }

        return LerValor.StringToFloat(LerValor.FormatNumber(mVrPar, 2));
    }

    private float RetVarParNT(String campos, String oque) {
        String mVrPar = "0000000000";
        int mIndex = campos.indexOf(oque,0);
        String mCpo = "";

        if (mIndex > -1) {
            mCpo = campos.substring(mIndex + 5, mIndex + 5 + 1);
            if (!":".equals(mCpo)) {
                mCpo = campos.substring(mIndex + 5, mIndex + 5 + 10);

                if (NumberUtils.isDigits(mCpo)) {
                    mVrPar = mCpo;
                }
            }
        }

        return LerValor.StringToFloat(LerValor.FormatNumber(mVrPar, 2));
    }
    
    private float RetValorTX(String campos) {
        String mVrPar = "0000000000";
        int mIndex = 4;
        String mCpo = "";

        mCpo = campos.substring(mIndex + 1, mIndex + 1 + 1);
        if (!":".equals(mCpo)) {
            mCpo = campos.substring(mIndex + 1, mIndex + 1 + 10);

            if (NumberUtils.isDigits(mCpo)) {
                mVrPar = mCpo;
            }
        }

        return LerValor.StringToFloat(LerValor.FormatNumber(mVrPar, 2));
    }
    
    private Object[][] ListaCampos() {
        Object[][] retorno = {};
        
        String sSql = "SELECT campo FROM auxiliar WHERE conta = 'REC' " + where + " ORDER BY rc_aut";
        
        ResultSet imResult = this.conn.OpenTable(sSql, null);
        int fim = conn.RecordCount(imResult); int posit = 1;
        
        try {
            while (imResult.next()) {
                
                jbarra2.setValue((100 * posit++)/ fim);
                try {Thread.sleep(10);} catch (InterruptedException e) {}
                
                String campos = imResult.getString("campo");
                String[] campos_1 = campos.split(";");
                for (int i=0;i<campos_1.length;i++) {
                    String[] campos_2 = campos_1[i].split(":");
                    String busca = campos_2[0];
                    String nmcpo = BuscaNomeCampo(busca);
                    float valor = LerValor.StringToFloat(LerValor.FormatNumber(campos_2[2],2));
                    int pos = FuncoesGlobais.FindinObjects(retorno, 0, busca);
                    if (pos == -1) {
                        retorno = FuncoesGlobais.ObjectsAdd(retorno, new Object[] {busca,nmcpo,valor});
                    } else {
                        retorno[pos][2] = Convert.toObject(Convert.toFloat(retorno[pos][2]) + valor);
                    }
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        conn.CloseTable(imResult);        
        
        return retorno;
    }
    
    private Object[][] Concatena(Object[][] m1, Object[][] m2) {
        Object[][] retorno = {};
        // carrega retorno com m1 (sempre o atual)
        for (int i=0;i<m1.length;i++) {
            String busca = m1[i][0].toString().trim().toUpperCase();
            int pos = FuncoesGlobais.FindinObjects(retorno, 0, busca);
            String nmCpo = m1[i][1].toString().trim().toUpperCase();
            float cr = Convert.toFloat(m1[i][2]);
            float db = Convert.toFloat(m1[i][3]);
            if (pos == -1) {
                retorno = FuncoesGlobais.ObjectsAdd(retorno, new Object[] {busca,nmCpo,cr,db,0,0});
            }
        }

        // carrega retorno com m2 (sempre o anterior)
        for (int i=0;i<m2.length;i++) {
            String busca = m2[i][0].toString().trim().toUpperCase();
            int pos = FuncoesGlobais.FindinObjects(retorno, 0, busca);
            String nmCpo = m2[i][1].toString().trim().toUpperCase();
            float cr = Convert.toFloat(m2[i][2]);
            float db = Convert.toFloat(m2[i][3]);
            if (pos == -1) {
                retorno = FuncoesGlobais.ObjectsAdd(retorno, new Object[] {busca,nmCpo,0,0,cr,db});
            } else {
                retorno[pos][4] = Convert.toObject(Convert.toFloat(retorno[pos][4]) + cr);
                retorno[pos][5] = Convert.toObject(Convert.toFloat(retorno[pos][5]) + db);
            }        
        }       
        
        return retorno;
    }
    
    private String BuscaNomeCampo(String campo) {
        String retorno = "";
        if (LerValor.isNumeric(campo)) {
            try {
                retorno = conn.ReadFieldsTable(new String[] {"cart_descr"}, "lancart", "cart_codigo = '" + campo + "'")[0][3].toString();
            } catch (Exception ex) {
                Logger.getLogger(jRazaoAcumulado.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            if ("DF;DC".contains(campo)) {
                if ("DF".equals(campo)) {
                    retorno = "DIFERENCA";
                } else retorno = "DESCONTO";
            } else {
                try {
                    retorno = conn.ReadFieldsTable(new String[] {"descr"}, "adm", "codigo = '" + campo + "'")[0][3].toString();
                } catch (Exception ex) {
                    Logger.getLogger(jRazaoAcumulado.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        return retorno;
    }
    
    private Object[][] ListaCamposAdm() {
        Object[][] retorno = {};
        String sSql = "SELECT contrato, campo FROM auxiliar WHERE conta = 'AVI' AND (MID(campo,4,1) = '2' OR MID(campo,4,2) = '02') " + where + " ORDER BY rc_aut";
        
        ResultSet imResult = this.conn.OpenTable(sSql, null);
        int fim = conn.RecordCount(imResult); int posit = 1;
        
        try {
            while (imResult.next()) {
                jbarra2.setValue((100 * posit++)/ fim);
                try {Thread.sleep(10);} catch (InterruptedException e) {}
                
                String campos = imResult.getString("campo");
                String[] campos_1 = campos.split(";");
                for (int i=0;i<campos_1.length;i++) {
                    String[] campos_2 = campos_1[i].split(":");
                    String crdb = campos_2[8];
                    String busca = imResult.getString("contrato");
                    String nmcpo = BuscaNomeCampo(busca);
                    float valor = LerValor.StringToFloat(LerValor.FormatNumber(campos_2[2],2));
                    int pos = FuncoesGlobais.FindinObjects(retorno, 0, busca);
                    if ("CRE".equals(crdb)) {
                        if (pos == -1) {
                            retorno = FuncoesGlobais.ObjectsAdd(retorno, new Object[] {busca,nmcpo,valor,0});
                        } else {
                            retorno[pos][2] = Convert.toObject(Convert.toFloat(retorno[pos][2]) + valor);
                        }
                    } else {
                        if (pos == -1) {
                            retorno = FuncoesGlobais.ObjectsAdd(retorno, new Object[] {busca,nmcpo,0,valor});
                        } else {
                            retorno[pos][3] = Convert.toObject(Convert.toFloat(retorno[pos][3]) + valor);
                        }
                    }
                }
                
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        conn.CloseTable(imResult);        
        
        return retorno;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDtRazao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jbarra1;
    private javax.swing.JProgressBar jbarra2;
    private javax.swing.JLabel processo;
    // End of variables declaration//GEN-END:variables
}
