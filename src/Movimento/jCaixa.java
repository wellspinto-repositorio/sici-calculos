package Movimento;

import Funcoes.Dates;
import Funcoes.Db;
import Funcoes.FuncoesGlobais;
import Funcoes.LerValor;
import Funcoes.Pad;
import Funcoes.toPrint;
import Sici.Partida.Collections;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import com.lowagie.text.Element;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import Funcoes.VariaveisGlobais;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.draw.LineSeparator;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;


/**
 *
 * @author supervisor
 */
public class jCaixa extends javax.swing.JInternalFrame {
    Db conn = VariaveisGlobais.conexao;
    
    /** Creates new form jCaixa */
    public jCaixa() {
        initComponents();

        // Icone da tela
        FlatSVGIcon icone = new FlatSVGIcon("menuIcons/fechamentoCaixa.svg",16,16);
        setFrameIcon(icone);
        
        ListaCaixas();
    }

    private void ListaCaixas() {
        String sSql = "SELECT cx_data FROM caixa where lower(cx_logado) = '" + VariaveisGlobais.usuario.trim().toLowerCase() + "' AND cx_aut > 0 group by cx_data;";
        ResultSet rs = conn.OpenTable(sSql, null);
        jCaixas.removeAll();

        DefaultListModel lm = new DefaultListModel();
        try {
            while (rs.next()) {
                lm.addElement(Dates.DateFormata("dd/MM/yyyy", rs.getDate("cx_data")));
            }
        } catch (SQLException ex) {}
        conn.CloseTable(rs);
        jCaixas.setModel(lm);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jVRDN = new javax.swing.JFormattedTextField();
        jVRCH = new javax.swing.JFormattedTextField();
        jVRCP = new javax.swing.JFormattedTextField();
        jVRCT = new javax.swing.JFormattedTextField();
        jbtnFechar = new javax.swing.JButton();
        jbtnSair = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jCaixas = new javax.swing.JList();

        setClosable(true);
        setIconifiable(true);
        setTitle(".:: Fechamento do Caixa ::.");
        setMaximumSize(new java.awt.Dimension(220, 347));
        setMinimumSize(new java.awt.Dimension(220, 347));
        setVisible(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Apurações do Caixa"));
        jPanel1.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N

        jLabel1.setText("Dinheiro:");

        jLabel2.setText("Cheque:");

        jLabel3.setText("Cheque Pré:");

        jLabel4.setText("Banco:");
        jLabel4.setEnabled(false);

        jVRDN.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        jVRDN.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jVRDN.setText("0,00");

        jVRCH.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        jVRCH.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jVRCH.setText("0,00");

        jVRCP.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        jVRCP.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jVRCP.setText("0,00");

        jVRCT.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        jVRCT.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jVRCT.setText("0,00");
        jVRCT.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jVRDN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(jVRCH)
                    .addComponent(jVRCP)
                    .addComponent(jVRCT))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(jVRDN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(jVRCH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(jVRCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(jVRCT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jbtnFechar.setText("Fechar");
        jbtnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnFecharActionPerformed(evt);
            }
        });

        jbtnSair.setText("Sair");
        jbtnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSairActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jCaixas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbtnFechar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbtnSair))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnFechar)
                    .addComponent(jbtnSair))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSairActionPerformed
        this.dispose();
    }//GEN-LAST:event_jbtnSairActionPerformed

    private void jbtnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnFecharActionPerformed
        int row = jCaixas.getSelectedIndex();
        System.out.println(row);
        if (row > 0) {
            JOptionPane.showMessageDialog(null, "Você esta fechando um caixa posterior!!!\nExistem caixas anteriores não fechadas...\nVocê deve primeiro fecha-los.", "Atenção", JOptionPane.INFORMATION_MESSAGE);
        } else if (row == 0) {
            FecharPDF(Dates.StringtoDate(jCaixas.getModel().getElementAt(row).toString(), "dd/MM/yyyy"));
        } else JOptionPane.showMessageDialog(null, "Você deve selecionar uma data na lista!!!", "Atenção", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_jbtnFecharActionPerformed

    private String[] PegaValor(String lnh) {
        String dta = "", bco = "", age = "", nch = "", vrl = "";
        int pos = -1;
        
        pos = lnh.indexOf("DT:");
        if (pos > -1) { dta = lnh.substring(pos + 3, pos + 3 + 10); } else dta = "          ";

        pos = lnh.indexOf("BC:");
        if (pos > -1) { bco = lnh.substring(pos + 3, pos + 3 + 3); } else bco = "   ";

        pos = lnh.indexOf("AG:");
        if (pos > -1) { age = lnh.substring(pos + 3, pos + 3 + 5); } else age = "     ";

        pos = lnh.indexOf("CH:");
        if (pos > -1) { nch = lnh.substring(pos + 3, pos + 3 + 10); } else nch = "          ";

        pos =  lnh.indexOf("CT:");
        if (pos > -1) { vrl = lnh.substring(pos + 3); }

        pos = lnh.indexOf("DN:");
        if (pos > -1) { vrl = lnh.substring(pos + 3); }
        
        pos = lnh.indexOf("VR:");
        if (pos > -1) { vrl = lnh.substring(pos + 3); }
        
        
        return new String[] {dta, bco, age, nch, vrl};
    }
    
    private float[][] Totaliza(String dDataCaixa) {
        ResultSet myRst;
        String sSql = "";
        float tt_recibo_dn = 0, tt_recibo_ch = 0, tt_recibo_cp = 0, tt_recibo_ct = 0;
        float tt_extrato_dn = 0, tt_extrato_ch = 0, tt_extrato_cp = 0, tt_extrato_ct = 0;
        float tt_despesa_dn = 0, tt_despesa_ch = 0, tt_despesa_cp = 0, tt_despesa_ct = 0;
        float tt_deposito_dn = 0, tt_deposito_ch = 0, tt_deposito_cp = 0, tt_deposito_ct = 0;
        float tt_avcred_dn = 0, tt_avcred_ch = 0, tt_avcred_cp = 0, tt_avcred_ct = 0;
        float tt_avdeb_dn = 0, tt_avdeb_ch = 0, tt_avdeb_cp = 0, tt_avdeb_ct = 0;
        float tt_caixa_dn = 0, tt_caixa_ch = 0, tt_caixa_cp = 0, tt_caixa_ct = 0;
        float tt_pass_dn = 0, tt_pass_ch = 0, tt_pass_cp = 0, tt_pass_ct = 0;
        float tt_passd_dn = 0, tt_passd_ch = 0, tt_passd_cp = 0, tt_passd_ct = 0;
        float tt_adi_dn = 0, tt_adi_ch = 0, tt_adi_cp = 0, tt_adi_ct = 0;
        
        //'* RECIBOS
        tt_recibo_dn = 0;
        tt_recibo_ch = 0;
        tt_recibo_cp = 0;
        tt_recibo_ct = 0;
        
        // RECIBO DINHEIRO
        sSql = "select IF(isnull(cx_vrdn),0,cx_vrdn) as valor1 ,IF(IsNull(cx_vrch),0,cx_vrch) as valor2, " +
            "IF(IsNull(cx_vrdn),0,cx_vrdn) + IF(IsNull(cx_vrch),0,cx_vrch) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "DN' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'rc'" +
            " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_recibo_dn = tt_recibo_dn + myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        // RECIBO CHEQUE/DINHEIRO
        sSql = "select IF(IsNull(cx_vrdn),0,cx_vrdn) as valor1,IF(IsNull(cx_vrch),0,cx_vrch) as valor2, " +
                "IF(IsNull(cx_vrdn),0,cx_vrdn) + IF(IsNull(cx_vrch),0,cx_vrch) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CD' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'rc'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_recibo_dn = tt_recibo_dn + myRst.getFloat("valor1");
                tt_recibo_ch = tt_recibo_ch + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* RECIBO/CHEQUE
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CH' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'rc'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_recibo_ch = tt_recibo_ch + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* RECIBO/CHEQUE-PRE
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CP' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'rc'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_recibo_cp = tt_recibo_cp + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* RECIBO/CARTAO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CT' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'rc'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_recibo_ct += myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* EXTRATOS
        tt_extrato_dn = 0;
        tt_extrato_ch = 0;
        tt_extrato_cp = 0;
        tt_extrato_ct = 0;
        
        //* EXTRATO/DINHEIRO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "DN' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'et'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_extrato_dn = myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* EXTRATO CHEQUE/DINHEIRO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CD' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'et'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_extrato_dn = tt_extrato_dn + myRst.getFloat("valor1");
                tt_extrato_ch = myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* EXTRATO/CHEQUE
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CH' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'et'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_extrato_ch = tt_extrato_ch + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* EXTRATO/CHEQUE-PRE
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CP' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'et'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_extrato_cp = 0 + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* EXTRATO/CARTAO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CT' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'et'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_extrato_ct += myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* DESPESAS
        tt_despesa_dn = 0;
        tt_despesa_ch = 0;
        tt_despesa_cp = 0;
        tt_despesa_ct = 0;
        
        //* DESPESA/DINHEIRO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "DN' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'dp'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_despesa_dn = 0 + myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* DESPESA CHEQUE/DINHEIRO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CD' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'dp'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_despesa_dn = tt_despesa_dn + myRst.getFloat("valor1");
                tt_despesa_ch = 0 + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* DESPESA/CHEQUE
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CH' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'dp'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_despesa_ch = tt_despesa_ch + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* DESPESA/CHEQUE-PRE
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CP' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'dp'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_despesa_cp = 0 + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* DESPESA/CARTAO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CT' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'dp'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_despesa_ct += myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* DEPOSITOS
        tt_deposito_dn = 0;
        tt_deposito_ch = 0;
        tt_deposito_cp = 0;
        tt_deposito_ct = 0;
        
        //* DEPOSITO/DINHEIRO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "DN' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'ds'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_deposito_dn = 0 + myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* DEPOSITO CHEQUE/DINHEIRO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CD' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'ds'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_deposito_dn = tt_deposito_dn + myRst.getFloat("valor1");
                tt_deposito_ch = 0 + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* DEPOSITO/CHEQUE
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CH' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'ds'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_deposito_ch = tt_deposito_ch + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* DEPOSITO/CHEQUE-PRE
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CP' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'ds'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_deposito_cp = 0 + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* DEPOSITO/CARTAO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CT' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'ds'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_deposito_ct += myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* AVISOS CREDITOS
        tt_avcred_dn = 0;
        tt_avcred_ch = 0;
        tt_avcred_cp = 0;
        tt_avcred_ct = 0;
        
        //* AVCRED/DINHEIRO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "DN' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'av'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_avcred_dn = 0 + myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* AVCRED CHEQUE/DINHEIRO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CD' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'av'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_avcred_dn = tt_avcred_dn + myRst.getFloat("valor1");
                tt_avcred_ch = 0 + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* AVCRED/CHEQUE
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CH' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'av'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_avcred_ch = tt_avcred_ch + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* AVCRED/CHEQUE-PRE
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CP' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'av'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_avcred_cp = 0 + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* AVCRED/CHEQUE-PRE
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CT' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'av'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_avcred_ct += myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* AVISOS DEBITOS
        tt_avdeb_dn = 0;
        tt_avdeb_ch = 0;
        tt_avdeb_cp = 0;
        tt_avdeb_ct = 0;
        
        //* avdeb/DINHEIRO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "DN' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'av'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_avdeb_dn = 0 + myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* avdeb CHEQUE/DINHEIRO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CD' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'av'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_avdeb_dn = tt_avdeb_dn + myRst.getFloat("valor1");
                tt_avdeb_ch = 0 + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* avdeb/CHEQUE
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CH' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'av'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_avdeb_ch = tt_avdeb_ch + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* avdeb/CHEQUE-PRE
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CP' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'av'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_avdeb_cp = 0 + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* avdeb/CARTAO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CT' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'av'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_avdeb_ct += myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* CAIXA ANTERIOR
        tt_caixa_dn = 0;
        tt_caixa_ch = 0;
        tt_caixa_cp = 0;
        tt_caixa_ct = 0;

        //* CAIXA/DINHEIRO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "DN' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'cx'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_caixa_dn = 0 + myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* CAIXA CHEQUE/DINHEIRO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CD' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'cx'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_caixa_dn = tt_caixa_dn + myRst.getFloat("valor1");
                tt_caixa_ch = 0 + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* caixa/CHEQUE
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CH' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'cx'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_caixa_ch = tt_caixa_ch + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* caixa/CHEQUE-PRE
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CP' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'cx'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_caixa_cp = 0 + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* caixa/CARTAO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CT' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'cx'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_caixa_ct += myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* PASSAGEM DE CAIXA
        tt_pass_dn = 0;
        tt_pass_ch = 0;
        tt_pass_cp = 0;
        tt_pass_ct = 0;
        
        //* PASS/DINHEIRO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "DN' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'pc'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_pass_dn = 0 + myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* PASS CHEQUE/DINHEIRO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CD' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'pc'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_pass_dn = tt_pass_dn + myRst.getFloat("valor1");
                tt_pass_ch = 0 + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* pass/CHEQUE
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CH' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'pc'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_pass_ch = tt_pass_ch + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* pass/CHEQUE-PRE
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CP' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'pc'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_pass_cp = 0 + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* pass/CARTAO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() + "' and cx_tipopg = '" + "CT' and cx_oper = 'CRE' and trim(lcase(cx_doc)) = 'pc'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_pass_ct += myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* PASSAGEM DE CAIXA DEB
        tt_passd_dn = 0;
        tt_passd_ch = 0;
        tt_passd_cp = 0;
        tt_passd_ct = 0;
        
        //* PASS/DINHEIRO DEB
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() +
                "' and cx_tipopg = '" + "DN' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'pc'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_passd_dn = 0 + myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* PASS CHEQUE/DINHEIRO DEB
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() +
                "' and cx_tipopg = '" + "CD' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'pc'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_passd_dn = tt_passd_dn + myRst.getFloat("valor1");
                tt_passd_ch = 0 + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* pass/CHEQUE DEB
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() +
                "' and cx_tipopg = '" + "CH' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'pc'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_passd_ch = tt_passd_ch + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* pass/CHEQUE-PRE DEB
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() +
                "' and cx_tipopg = '" + "CP' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'pc'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_passd_cp = 0 + myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* pass/CARTAO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() +
                "' and cx_tipopg = '" + "CT' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'pc'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_passd_ct += myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* ADIANTAMENTO DEB
        tt_adi_dn = 0;
        tt_adi_ch = 0;
        tt_adi_cp = 0;
        tt_adi_ct = 0;
        
        //* ADI/DINHEIRO DEB
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() +
                "' and cx_tipopg = '" + "DN' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'ad'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_adi_dn += myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* ADI CHEQUE/DINHEIRO DEB
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() +
                "' and cx_tipopg = '" + "CD' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'ad'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_adi_dn += myRst.getFloat("valor1");
                tt_adi_ch += myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* adi/CHEQUE DEB
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() +
                "' and cx_tipopg = '" + "CH' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'ad'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_adi_ch += myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* ADI/CHEQUE-PRE DEB
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() +
                "' and cx_tipopg = '" + "CP' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'ad'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_adi_cp +=  myRst.getFloat("valor2");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        //* ADI/CARTAO
        sSql = "select sum(cx_vrdn) as valor1,sum(IF(IsNull(cx_vrch),0,cx_vrch)) as valor2, " +
                "sum(cx_vrdn) + sum(IF(IsNull(cx_vrch),0,cx_vrch)) as Total from caixa where lower(cx_logado) = '" +
                VariaveisGlobais.usuario.toLowerCase() +
                "' and cx_tipopg = '" + "CT' and cx_oper = 'DEB' and trim(lcase(cx_doc)) = 'ad'" +
                " AND cx_data <= '" + dDataCaixa + "';";
        myRst = conn.OpenTable(sSql, null);
        try {
            while (myRst.next()) {
                tt_adi_ct += myRst.getFloat("valor1");
            }
        } catch (SQLException ex) {}
        conn.CloseTable(myRst);

        return new float[][] {{tt_recibo_dn, tt_recibo_ch, tt_recibo_cp, tt_recibo_ct},
            {tt_extrato_dn, tt_extrato_ch, tt_extrato_cp, tt_extrato_ct},
            {tt_despesa_dn, tt_despesa_ch, tt_despesa_cp, tt_despesa_ct},
            {tt_deposito_dn, tt_deposito_ch, tt_deposito_cp, tt_deposito_ct},
            {tt_avcred_dn, tt_avcred_ch, tt_avcred_cp, tt_avcred_ct},
            {tt_avdeb_dn, tt_avdeb_ch, tt_avdeb_cp, tt_avdeb_ct},
            {tt_caixa_dn, tt_caixa_ch, tt_caixa_cp, tt_caixa_ct},
            {tt_pass_dn, tt_pass_ch, tt_pass_cp, tt_pass_ct},
            {tt_passd_dn, tt_passd_ch, tt_passd_cp, tt_passd_ct},
            {tt_adi_dn, tt_adi_ch, tt_adi_cp, tt_adi_ct}};
    }

    private class mmyColomn {
        private String col1;
        private String col2;
        private String col3;
        private String col4;
        private String col5;
        private String col6;

        public mmyColomn(String col1, String col2, String col3, String col4, String col5, String col6) {
            this.col1 = col1;
            this.col2 = col2;
            this.col3 = col3;
            this.col4 = col4;
            this.col5 = col5;
            this.col6 = col6;
        }

        public String getCol1() {
            return col1;
        }

        public void setCol1(String col1) {
            this.col1 = col1;
        }

        public String getCol2() {
            return col2;
        }

        public void setCol2(String col2) {
            this.col2 = col2;
        }

        public String getCol3() {
            return col3;
        }

        public void setCol3(String col3) {
            this.col3 = col3;
        }

        public String getCol4() {
            return col4;
        }

        public void setCol4(String col4) {
            this.col4 = col4;
        }

        public String getCol5() {
            return col5;
        }

        public void setCol5(String col5) {
            this.col5 = col5;
        }

        public String getCol6() {
            return col6;
        }

        public void setCol6(String col6) {
            this.col6 = col6;
        }                
    }
    
    private void FecharPDF(Date dData) {
        Collections gVar = VariaveisGlobais.dCliente;
        ResultSet rs;
        final String sql = "SELECT * FROM caixa WHERE Lower(cx_logado) = '&1.' AND cx_data = '&2.' AND cx_oper = '&3.' AND (cx_doc = '&4.' OR cx_doc = '&4.X') ORDER BY cx_aut, cx_tipopg desc;";
        String sSql = "";

        float tt_apu_dn = 0;
        float tt_apu_ch = 0;
        float tt_apu_cp = 0;
        float m_Saldo = 0;
        
        float[] columnWidths = {};
        
        // Cria o Documento e Gera o cabeçário
        String docName = "CX_" + Dates.DateFormata("ddMMyyyy", dData) + "_" + Dates.DateFormata("HHmmss", dData) + "_" + VariaveisGlobais.usuario.trim().toLowerCase() + ".pdf";
        String pathName = "reports/Recibos/";
        Document document = PrintHead(dData, docName, pathName);

        // RECIBOS
        sSql = FuncoesGlobais.Subst(sql, new String[] {
             VariaveisGlobais.usuario.toLowerCase().trim(),
             Dates.DateFormata("yyyy-MM-dd", dData),
             "CRE", "RC"});
        rs = conn.OpenTable(sSql, null);

        int tam = conn.RecordCount(rs);
        if (tam > 0) document = PrintSections(document,"RECIBOS");
        
        List<mmyColomn> linhasCol = new ArrayList<>();
        float tdoc = 0;
        try {
            String oldCx = "";
            while (rs.next()) {
                if (!oldCx.equals(rs.getString("cx_aut").replace(".0", ""))) {
                    if (tdoc > 0) {
                        linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
                        document = PrintSubSections(document, linhasCol);
                        tdoc = 0;  linhasCol = new ArrayList<>();
                    }
                    linhasCol.add(
                            new mmyColomn(rs.getString("cx_aut").replace(".0", ""), 
                            rs.getString("cx_hora"),
                            rs.getString("cx_contrato"),
                            (rs.getString("cx_doc").contains("X") ? "EXTORNO" : ""),
                            "",
                            ""
                    ));
                
                    oldCx = rs.getString("cx_aut").replace(".0", "");
                }

                String lnh = rs.getString("cx_chrel").toUpperCase().trim();
                String[] pval = PegaValor(lnh);
                String dta = pval[0], bco = pval[1], age = pval[2], nch = pval[3], vrl = pval[4];

                linhasCol.add(
                        new mmyColomn(
                                dta,
                                bco,
                                age,
                                nch,
                                vrl,
                                rs.getString("cx_tipopg").replaceAll("CT", "BC")
                        )
                );                
                tdoc += LerValor.StringToFloat(vrl);
            }
        } catch (SQLException ex) {ex.printStackTrace();}
        conn.CloseTable(rs);

        // Finaliza impressao
        if (tdoc > 0) {
            linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
            document = PrintSubSections(document, linhasCol);
            tdoc = 0; linhasCol = new ArrayList<>();
        }

        // ADIANTAMENTO
        sSql = FuncoesGlobais.Subst(sql, new String[] {
             VariaveisGlobais.usuario.toLowerCase().trim(),
             Dates.DateFormata("yyyy-MM-dd", dData),
             "DEB", "AD"});
        rs = conn.OpenTable(sSql, null);

        tam = conn.RecordCount(rs);
        if (tam > 0) document = PrintSections(document,"ADIANTAMENTOS - DEBITO");
        tdoc = 0; linhasCol = new ArrayList<>();
        
        try {
            String oldCx = "";
            while (rs.next()) {
                if (!oldCx.equals(rs.getString("cx_aut").replace(".0", ""))) {
                    if (tdoc > 0) {
                        linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
                        document = PrintSubSections(document, linhasCol);
                        tdoc = 0; linhasCol = new ArrayList<>();
                    }

                    linhasCol.add(
                            new mmyColomn(rs.getString("cx_aut").replace(".0", ""), 
                            rs.getString("cx_hora"),
                            rs.getString("cx_rgprp"),
                            (rs.getString("cx_doc").contains("X") ? "EXTORNO" : ""),
                            "",
                            ""
                    ));

                    oldCx = rs.getString("cx_aut").replace(".0", "");
                }

                String lnh = rs.getString("cx_chrel").toUpperCase().trim();
                String[] pval = PegaValor(lnh);
                String dta = pval[0], bco = pval[1], age = pval[2], nch = pval[3], vrl = pval[4];

                linhasCol.add(
                        new mmyColomn(
                                dta,
                                bco,
                                age,
                                nch,
                                vrl,
                                rs.getString("cx_tipopg").replaceAll("CT", "BC")
                        )
                );                

                tdoc += LerValor.StringToFloat(vrl);
            }
        } catch (SQLException ex) {ex.printStackTrace();}
        conn.CloseTable(rs);

        // Finaliza impressao
        if (tdoc > 0) {
            linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
            document = PrintSubSections(document, linhasCol);
            tdoc = 0; linhasCol = new ArrayList<>();
        }

        // EXTRATO
        sSql = FuncoesGlobais.Subst(sql, new String[] {
             VariaveisGlobais.usuario.toLowerCase().trim(),
             Dates.DateFormata("yyyy-MM-dd", dData),
             "DEB", "ET"});
        rs = conn.OpenTable(sSql, null);

        tam = conn.RecordCount(rs);
        if (tam > 0) {
            document = PrintSections(document,"EXTRATOS");
        }
        tdoc = 0; linhasCol = new ArrayList<>();
        try {
            String oldCx = "";
            while (rs.next()) {
                if (!oldCx.equals(rs.getString("cx_aut").replace(".0", ""))) {
                    if (tdoc > 0) {
                        linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
                        document = PrintSubSections(document, linhasCol);
                        tdoc = 0; linhasCol = new ArrayList<>();
                    }

                    linhasCol.add(
                            new mmyColomn(rs.getString("cx_aut").replace(".0", ""), 
                            rs.getString("cx_hora"),
                            rs.getString("cx_rgprp"),
                            (rs.getString("cx_doc").contains("X") ? "EXTORNO" : ""),
                            "",
                            ""
                    ));

                    oldCx = rs.getString("cx_aut").replace(".0", "");
                }

                String lnh = rs.getString("cx_chrel").toUpperCase().trim();
                String[] pval = PegaValor(lnh);
                String dta = pval[0], bco = pval[1], age = pval[2], nch = pval[3], vrl = pval[4];

                linhasCol.add(
                        new mmyColomn(
                                dta,
                                bco,
                                age,
                                nch,
                                vrl,
                                rs.getString("cx_tipopg").replaceAll("CT", "BC")
                        )
                );                

                tdoc += LerValor.StringToFloat(vrl);
            }
        } catch (SQLException ex) {ex.printStackTrace();}
        conn.CloseTable(rs);

        // Finaliza impressao
        if (tdoc > 0) {
            linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
            document = PrintSubSections(document, linhasCol);
            tdoc = 0; linhasCol = new ArrayList<>();
        }

        // AVISO DE CREDITO
        sSql = FuncoesGlobais.Subst(sql, new String[] {
             VariaveisGlobais.usuario.toLowerCase().trim(),
             Dates.DateFormata("yyyy-MM-dd", dData),
             "CRE", "AV"});
        rs = conn.OpenTable(sSql, null);

        tam = conn.RecordCount(rs);
        if (tam > 0) document = PrintSections(document,"AVISOS - CREDITOS");
        tdoc = 0; linhasCol = new ArrayList<>();

        try {
            String oldCx = "";
            while (rs.next()) {
                if (!oldCx.equals(rs.getString("cx_aut").replace(".0", ""))) {
                    if (tdoc > 0) {
                        linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
                        document = PrintSubSections(document, linhasCol);
                        tdoc = 0; linhasCol = new ArrayList<>();
                    }
                    linhasCol.add(
                            new mmyColomn(rs.getString("cx_aut").replace(".0", ""), 
                            rs.getString("cx_hora"),
                            (!"".equals(rs.getString("cx_rgprp").trim()) ? rs.getString("cx_rgprp") : rs.getString("cx_contrato")),
                            (rs.getString("cx_doc").contains("X") ? "EXTORNO" : ""),
                            "",
                            ""
                    ));

                    oldCx = rs.getString("cx_aut").replace(".0", "");
                }

                String lnh = rs.getString("cx_chrel").toUpperCase().trim();
                String[] pval = PegaValor(lnh);
                String dta = pval[0], bco = pval[1], age = pval[2], nch = pval[3], vrl = pval[4];

                linhasCol.add(
                        new mmyColomn(
                                dta,
                                bco,
                                age,
                                nch,
                                vrl,
                                rs.getString("cx_tipopg").replaceAll("CT", "BC")
                        )
                );                

                tdoc += LerValor.StringToFloat(vrl);
            }
        } catch (SQLException ex) {ex.printStackTrace();}
        conn.CloseTable(rs);

        // Finaliza impressao
        if (tdoc > 0) {
            linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
            document = PrintSubSections(document, linhasCol);
            tdoc = 0;
        }

        // AVISO DE DEBITO
        sSql = FuncoesGlobais.Subst(sql, new String[] {
             VariaveisGlobais.usuario.toLowerCase().trim(),
             Dates.DateFormata("yyyy-MM-dd", dData),
             "DEB", "AV"});
        rs = conn.OpenTable(sSql, null);

        tam = conn.RecordCount(rs);
        if (tam > 0) document = PrintSections(document,"AVISOS - DEBITOS");
        tdoc = 0; linhasCol = new ArrayList<>();

        try {
            String oldCx = "";
            while (rs.next()) {
                if (!oldCx.equals(rs.getString("cx_aut").replace(".0", ""))) {
                    if (tdoc > 0) {
                        linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
                        document = PrintSubSections(document, linhasCol);
                        tdoc = 0; linhasCol = new ArrayList<>();
                    }
                    linhasCol.add(
                            new mmyColomn(rs.getString("cx_aut").replace(".0", ""), 
                            rs.getString("cx_hora"),
                            (!"".equals(rs.getString("cx_rgprp").trim()) ? rs.getString("cx_rgprp") : rs.getString("cx_contrato")),
                            (rs.getString("cx_doc").contains("X") ? "EXTORNO" : ""),
                            "",
                            ""
                    ));

                    oldCx = rs.getString("cx_aut").replace(".0", "");
                }

                String lnh = rs.getString("cx_chrel").toUpperCase().trim();
                String[] pval = PegaValor(lnh);
                String dta = pval[0], bco = pval[1], age = pval[2], nch = pval[3], vrl = pval[4];

                linhasCol.add(
                        new mmyColomn(
                                dta,
                                bco,
                                age,
                                nch,
                                vrl,
                                rs.getString("cx_tipopg").replaceAll("CT", "BC")
                        )
                );                

                tdoc += LerValor.StringToFloat(vrl);
            }
        } catch (SQLException ex) {ex.printStackTrace();}
        conn.CloseTable(rs);

        // Finaliza impressao
        if (tdoc > 0) {
            linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
            document = PrintSubSections(document, linhasCol);
            tdoc = 0; linhasCol = new ArrayList<>();
        }

        // DESPESAS
        sSql = FuncoesGlobais.Subst(sql, new String[] {
             VariaveisGlobais.usuario.toLowerCase().trim(),
             Dates.DateFormata("yyyy-MM-dd", dData),
             "DEB", "DP"});
        rs = conn.OpenTable(sSql, null);

        tam = conn.RecordCount(rs);
        if (tam > 0) document = PrintSections(document,"DESPESAS");
        tdoc = 0; linhasCol = new ArrayList<>();
        
        try {
            String oldCx = "";
            while (rs.next()) {
                if (!oldCx.equals(rs.getString("cx_aut").replace(".0", ""))) {
                    if (tdoc > 0) {
                        linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
                        document = PrintSubSections(document, linhasCol);
                        tdoc = 0; linhasCol = new ArrayList<>();
                    }
                    linhasCol.add(
                            new mmyColomn(rs.getString("cx_aut").replace(".0", ""), 
                            rs.getString("cx_hora"),
                            (!"".equals(rs.getString("cx_rgprp").trim()) ? rs.getString("cx_rgprp") : rs.getString("cx_contrato")),
                            (rs.getString("cx_doc").contains("X") ? "EXTORNO" : ""),
                            "",
                            ""
                    ));

                    oldCx = rs.getString("cx_aut").replace(".0", "");
                }

                String lnh = rs.getString("cx_chrel").toUpperCase().trim();
                String[] pval = PegaValor(lnh);
                String dta = pval[0], bco = pval[1], age = pval[2], nch = pval[3], vrl = pval[4];

                linhasCol.add(
                        new mmyColomn(
                                dta,
                                bco,
                                age,
                                nch,
                                vrl,
                                rs.getString("cx_tipopg").replaceAll("CT", "BC")
                        )
                );                

                tdoc += LerValor.StringToFloat(vrl);
            }
        } catch (SQLException ex) {ex.printStackTrace();}
        conn.CloseTable(rs);

        // Finaliza impressao
        if (tdoc > 0) {
            linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
            document = PrintSubSections(document, linhasCol);
            tdoc = 0; linhasCol = new ArrayList<>();
        }

        // DEPOSITO
        sSql = FuncoesGlobais.Subst(sql, new String[] {
             VariaveisGlobais.usuario.toLowerCase().trim(),
             Dates.DateFormata("yyyy-MM-dd", dData),
             "DEB", "DS"});
        rs = conn.OpenTable(sSql, null);

        tam = conn.RecordCount(rs);
        if (tam > 0) document = PrintSections(document,"DEPOSITOS");
        tdoc = 0; linhasCol = new ArrayList<>();
        
        try {
            String oldCx = "";
            while (rs.next()) {
                if (!oldCx.equals(rs.getString("cx_aut").replace(".0", ""))) {
                    if (tdoc > 0) {
                        linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
                        document = PrintSubSections(document, linhasCol);
                        tdoc = 0; linhasCol = new ArrayList<>();
                    }
                    linhasCol.add(
                            new mmyColomn(rs.getString("cx_aut").replace(".0", ""), 
                            rs.getString("cx_hora"),
                            "",
                            (rs.getString("cx_doc").contains("X") ? "EXTORNO" : ""),
                            "",
                            ""
                    ));

                    oldCx = rs.getString("cx_aut").replace(".0", "");
                }

                String dta = "          "; String bco = "   "; String age = "     "; String nch = "          ";
                String vrl = "";
                if ("DN".equals(rs.getString("cx_tipopg"))) {
                    vrl = LerValor.floatToCurrency(rs.getFloat("cx_vrdn"), 2);
                } else {
                    vrl = LerValor.floatToCurrency(rs.getFloat("cx_vrch"), 2);
                }

                linhasCol.add(
                        new mmyColomn(
                                dta,
                                bco,
                                age,
                                nch,
                                vrl,
                                rs.getString("cx_tipopg").replaceAll("CT", "BC")
                        )
                );                

                try {tdoc += LerValor.StringToFloat(vrl);} catch (Exception ex) {}
            }
        } catch (SQLException ex) {ex.printStackTrace();}
        conn.CloseTable(rs);

        // Finaliza impressao
        if (tdoc > 0) {
            linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
            document = PrintSubSections(document, linhasCol);
            tdoc = 0; linhasCol = new ArrayList<>();
        }

        // PASSAGEM DE CAIXA - CREDITO
        sSql = FuncoesGlobais.Subst(sql, new String[] {
             VariaveisGlobais.usuario.toLowerCase().trim(),
             Dates.DateFormata("yyyy-MM-dd", dData),
             "CRE", "PC"});
        rs = conn.OpenTable(sSql, null);

        tam = conn.RecordCount(rs);
        if (tam > 0) document = PrintSections(document,"PASSAGEM CAIXA - CREDITO");
        tdoc = 0; linhasCol = new ArrayList<>();
        
        try {
            String oldCx = "";
            while (rs.next()) {
                if (!oldCx.equals(rs.getString("cx_aut").replace(".0", ""))) {
                    if (tdoc > 0) {
                        linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
                        document = PrintSubSections(document, linhasCol);
                        tdoc = 0; linhasCol = new ArrayList<>();
                    }
                    linhasCol.add(
                            new mmyColomn(rs.getString("cx_aut").replace(".0", ""), 
                            rs.getString("cx_hora"),
                            "",
                            (rs.getString("cx_doc").contains("X") ? "EXTORNO" : ""),
                            "",
                            ""
                    ));

                    oldCx = rs.getString("cx_aut").replace(".0", "");
                }

                String lnh = rs.getString("cx_chrel").toUpperCase().trim();
                String[] pval = PegaValor(lnh);
                String dta = pval[0], bco = pval[1], age = pval[2], nch = pval[3], vrl = pval[4];

                linhasCol.add(
                        new mmyColomn(
                                dta,
                                bco,
                                age,
                                nch,
                                vrl,
                                rs.getString("cx_tipopg").replaceAll("CT", "BC")
                        )
                );                

                tdoc += LerValor.StringToFloat(vrl);
            }
        } catch (SQLException ex) {ex.printStackTrace();}
        conn.CloseTable(rs);

        // Finaliza impressao
        if (tdoc > 0) {
            linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
            document = PrintSubSections(document, linhasCol);
            tdoc = 0; linhasCol = new ArrayList<>();
        }

        // PASSAGEM DE CAIXA - DEBITO
        sSql = FuncoesGlobais.Subst(sql, new String[] {
             VariaveisGlobais.usuario.toLowerCase().trim(),
             Dates.DateFormata("yyyy-MM-dd", dData),
             "DEB", "PC"});
        rs = conn.OpenTable(sSql, null);

        tam = conn.RecordCount(rs);
        if (tam > 0) document = PrintSections(document,"PASSAGEM CAIXA - DEBITO");
        tdoc = 0; linhasCol = new ArrayList<>();
        
        try {
            String oldCx = "";
            while (rs.next()) {
                if (!oldCx.equals(rs.getString("cx_aut").replace(".0", ""))) {
                    if (tdoc > 0) {
                        linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
                        document = PrintSubSections(document, linhasCol);
                        tdoc = 0; linhasCol = new ArrayList<>();
                    }
                    linhasCol.add(
                            new mmyColomn(rs.getString("cx_aut").replace(".0", ""), 
                            rs.getString("cx_hora"),
                            "",
                            (rs.getString("cx_doc").contains("X") ? "EXTORNO" : ""),
                            "",
                            ""
                    ));

                    oldCx = rs.getString("cx_aut").replace(".0", "");
                }

                String lnh = rs.getString("cx_chrel").toUpperCase().trim();
                String[] pval = PegaValor(lnh);
                String dta = pval[0], bco = pval[1], age = pval[2], nch = pval[3], vrl = pval[4];

                linhasCol.add(
                        new mmyColomn(
                                dta,
                                bco,
                                age,
                                nch,
                                vrl,
                                rs.getString("cx_tipopg").replaceAll("CT", "BC")
                        )
                );                

                tdoc += LerValor.StringToFloat(vrl);
            }
        } catch (SQLException ex) {ex.printStackTrace();}
        conn.CloseTable(rs);

        // Finaliza impressao
        if (tdoc > 0) {
            linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
            document = PrintSubSections(document, linhasCol);
            tdoc = 0; linhasCol = new ArrayList<>();
        }

        // APURACAO DE CAIXA ANTERIOR - CREDITO
        final String sql2 = "SELECT * FROM caixa WHERE Lower(cx_logado) = '&1.' AND cx_data <= '&2.' AND cx_oper = '&3.' AND cx_doc LIKE '&4.%' ORDER BY cx_aut, cx_tipopg desc;";
        sSql = FuncoesGlobais.Subst(sql2, new String[] {
             VariaveisGlobais.usuario.toLowerCase().trim(),
             Dates.DateFormata("yyyy-MM-dd", dData),
             "CRE", "CX"});
        rs = conn.OpenTable(sSql, null);

        tam = conn.RecordCount(rs);
        if (tam > 0) document = PrintSections(document,"CAIXA");
        tdoc = 0; linhasCol = new ArrayList<>();
        
        try {
            String oldCx = "";
            while (rs.next()) {
                if (!oldCx.equals(rs.getString("cx_aut").replace(".0", ""))) {
                    if (tdoc > 0) {
                        linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
                        document = PrintSubSections(document, linhasCol);
                        tdoc = 0; linhasCol = new ArrayList<>();
                    }
                    linhasCol.add(
                            new mmyColomn(rs.getString("cx_aut").replace(".0", ""), 
                            rs.getString("cx_hora"),
                            "",
                            "",
                            "",
                            ""
                    ));

                    oldCx = rs.getString("cx_aut").replace(".0", "");
                }

                String dta = "          "; String bco = "   "; String age = "     "; String nch = "          ";
                String vrl = "";
                if ("DN".equals(rs.getString("cx_tipopg"))) {
                    vrl = LerValor.floatToCurrency(rs.getFloat("cx_vrdn"), 2);
                } else {
                    vrl = LerValor.floatToCurrency(rs.getFloat("cx_vrch"), 2);
                }

                linhasCol.add(
                        new mmyColomn(
                                dta,
                                bco,
                                age,
                                nch,
                                vrl,
                                rs.getString("cx_tipopg").replaceAll("CT", "BC")
                        )
                );                

                try {tdoc += LerValor.StringToFloat(vrl);} catch (Exception ex) {}
            }
        } catch (SQLException ex) {ex.printStackTrace();}
        conn.CloseTable(rs);

        // Finaliza impressao
        if (tdoc > 0) {
            linhasCol.get(linhasCol.size() - 2).setCol5(LerValor.floatToCurrency(tdoc, 2));
            document = PrintSubSections(document, linhasCol);
            tdoc = 0; linhasCol = new ArrayList<>();
        }

        // -x-x-x-x-x-x-x-x-x---[ RESUMOS ]------------------------------------------
        document = PrintSections(document,"RESUMO DO FECHAMENTO");
        document = PrintResume(document, "DSC","DINHEIRO", "CHEQUE", "P-DATADO", "BANCOS");

        float[][] m_Totais = Totaliza(Dates.DateFormata("yyyy-MM-dd", dData));
        String tmpString = "";

        if (m_Totais[0][0] + m_Totais[0][1] + m_Totais[0][2] + m_Totais[0][3] > 0) {
          document = PrintResume(
                  document,
                  "REC", 
                  new Pad(LerValor.floatToCurrency(m_Totais[0][0],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[0][1],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[0][2],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[0][3],2),10).LPad()
          );
        }

        if (m_Totais[1][0] + m_Totais[1][1] + m_Totais[1][2] + m_Totais[1][3] > 0) {
          document = PrintResume(
                  document,
                  "EXT", 
                  new Pad(LerValor.floatToCurrency(m_Totais[1][0],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[1][1],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[1][2],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[1][3],2),10).LPad()
          );
        }

        if (m_Totais[9][0] + m_Totais[9][1] + m_Totais[9][2] + m_Totais[9][3] > 0) {
          document = PrintResume(
                  document,
                  "ADI", 
                  new Pad(LerValor.floatToCurrency(m_Totais[9][0],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[9][1],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[9][2],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[9][3],2),10).LPad()
          );
        }            

        if (m_Totais[4][0] + m_Totais[4][1] + m_Totais[4][2] + m_Totais[4][3] > 0) {
          document = PrintResume(
                  document,
                  "AVC", 
                  new Pad(LerValor.floatToCurrency(m_Totais[4][0],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[4][1],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[4][2],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[4][3],2),10).LPad()
          );
        }

        if (m_Totais[5][0] + m_Totais[5][1] + m_Totais[5][2] + m_Totais[5][3] > 0) {
          document = PrintResume(
                  document,
                  "AVD", 
                  new Pad(LerValor.floatToCurrency(m_Totais[5][0],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[5][1],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[5][2],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[5][3],2),10).LPad()
          );
        }

        if (m_Totais[2][0] + m_Totais[2][1] + m_Totais[2][2] + m_Totais[2][3] > 0) {
          document = PrintResume(
                  document,
                  "DES", 
                  new Pad(LerValor.floatToCurrency(m_Totais[2][0],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[2][1],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[2][2],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[2][3],2),10).LPad()
          );
        }

        if (m_Totais[3][0] + m_Totais[3][1] + m_Totais[3][2] + m_Totais[3][3] > 0) {
          document = PrintResume(
                  document,
                  "DEP", 
                  new Pad(LerValor.floatToCurrency(m_Totais[3][0],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[3][1],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[3][2],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[3][3],2),10).LPad()
          );
        }

        if (m_Totais[7][0] + m_Totais[7][1] + m_Totais[7][2] + m_Totais[7][3] > 0) {
          document = PrintResume(
                  document,
                  "PCC", 
                  new Pad(LerValor.floatToCurrency(m_Totais[7][0],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[7][1],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[7][2],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[7][3],2),10).LPad()
          );
        }

        if (m_Totais[8][0] + m_Totais[8][1] + m_Totais[8][2] + m_Totais[8][3] > 0) {
          document = PrintResume(
                  document,
                  "PCD", 
                  new Pad(LerValor.floatToCurrency(m_Totais[8][0],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[8][1],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[8][2],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[8][3],2),10).LPad()
          );
        }

        if (m_Totais[6][0] + m_Totais[6][1] + m_Totais[6][2] + m_Totais[6][3] > 0) {
          document = PrintResume(
                  document,
                  "CXA", 
                  new Pad(LerValor.floatToCurrency(m_Totais[6][0],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[6][1],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[6][2],2),10).LPad(),
                  new Pad(LerValor.floatToCurrency(m_Totais[6][3],2),10).LPad()
          );
        }

        tt_apu_dn = LerValor.StringToFloat(jVRDN.getText());
        tt_apu_ch = LerValor.StringToFloat(jVRCH.getText());
        tt_apu_cp = LerValor.StringToFloat(jVRCP.getText());

        document = PrintResume(
                document,
                "ACX", 
                new Pad(LerValor.floatToCurrency(tt_apu_dn,2),10).LPad(),
                new Pad(LerValor.floatToCurrency(tt_apu_ch,2),10).LPad(),
                new Pad(LerValor.floatToCurrency(tt_apu_cp,2),10).LPad(),
                new Pad(LerValor.floatToCurrency(0,2),10).LPad()
        );

        float tt_etd_dn = m_Totais[4][0] + m_Totais[0][0] + m_Totais[6][0] + m_Totais[7][0];
        float tt_etd_ch = m_Totais[4][1] + m_Totais[0][1] + m_Totais[6][1] + m_Totais[7][1];
        float tt_etd_cp = m_Totais[4][2] + m_Totais[0][2] + m_Totais[6][2] + m_Totais[7][2];
        float tt_etd_ct = m_Totais[0][3] + m_Totais[4][3];

        float tt_eta_dn = m_Totais[5][0] + m_Totais[3][0] + m_Totais[2][0] + m_Totais[1][0] + m_Totais[8][0] + m_Totais[9][0];
        float tt_eta_ch = m_Totais[3][1] + m_Totais[8][1];
        float tt_eta_cp = m_Totais[5][2] + m_Totais[3][2] + m_Totais[2][2] + m_Totais[1][2] + m_Totais[8][2];
        float tt_eta_ct = 0;

        /////////////////////////////////////////
        document = PrintSections(document,"RESULTADO FINAL");

        document = PrintTotal(
                document,
                "TOTAL DINHEIRO",
                LerValor.floatToCurrency(tt_etd_dn - tt_eta_dn - tt_apu_dn,2),
                ""
        );

        document = PrintTotal(
                document,
                "TOTAL CHEQUE",
                LerValor.floatToCurrency(tt_etd_ch - tt_eta_ch - tt_apu_ch,2),
                ""
        );

        document = PrintTotal(
                document,
                "TOTAL PRE-DATADO",
                LerValor.floatToCurrency(tt_etd_cp - tt_eta_cp - tt_apu_cp,2),
                ""
        );

        document = PrintTotal(
                document,
                "TOTAL BANCOS",
                LerValor.floatToCurrency(tt_etd_ct - tt_eta_ct - 0,2),
                ""
        );

        document = PrintTotal(
                document,
                "",
                "",
                ""
        );

        float ntt_entradas = tt_etd_dn + tt_etd_ch + tt_etd_cp;
        float ntt_saidas = tt_eta_ch + tt_eta_dn + tt_eta_cp + tt_apu_dn + tt_apu_ch + tt_apu_cp;
        //'float ntr_saidas = tt_eta_ch + tt_eta_dn + tt_eta_cp;

        document = PrintTotal(
                document,
                "TOTAL ENTRADAS",
                LerValor.floatToCurrency(ntt_entradas,2),
                ""
        );

        document = PrintTotal(
                document,
                "TOTAL SAIDAS",
                LerValor.floatToCurrency(ntt_saidas,2),
                ""
        );

        m_Saldo = ntt_entradas - ntt_saidas;
        if (m_Saldo < 0) {
          tmpString += "SOBRA DE CAIXA";
        } else if (m_Saldo > 0) {
          tmpString += "FALTA DE CAIXA";
        } else {
          tmpString += "CAIXA OK!?";
        }

        document = PrintTotal(
                document,
                "SALDO",
                LerValor.floatToCurrency(m_Saldo,2),
                tmpString
        );

        document = PrintSections(document, "OBSERVACOES DO CAIXA:");

        // Pula linhas (6) / corta papel
        for (int k=1;k<=6;k++) { 
            try { document.add(new Paragraph("\n")); } catch (DocumentException dex) {}
        }
        
        document.close();
        
        new toPrint(pathName + docName, "THERMICA",VariaveisGlobais.Caixa);
        docName = ""; pathName = "";
        
        String sExecuteSql = "";
        //* Backup caixa
        sExecuteSql = FuncoesGlobais.Subst("INSERT INTO caixabck (SELECT * FROM caixa WHERE lower(cx_logado) = '" + VariaveisGlobais.usuario.toLowerCase().trim() + "' AND cx_data <= '&1.');", new String[] {Dates.DateFormata("yyyy-MM-dd", dData)});
        conn.CommandExecute(sExecuteSql);

        //* Deleta o caixa
        sExecuteSql = FuncoesGlobais.Subst("DELETE FROM caixa WHERE lower(cx_logado) = '" + VariaveisGlobais.usuario.toLowerCase().trim() + "' AND cx_data <= '&1.';", new String[] {Dates.DateFormata("yyyy-MM-dd", dData)});
        conn.CommandExecute(sExecuteSql);

        //* Grava o caixa (fechamento)
        //; DINHEIRO
        sExecuteSql = FuncoesGlobais.Subst("INSERT INTO caixa (cx_data, cx_hora, cx_doc, cx_vrdn, cx_vrch, cx_tipopg, cx_oper, cx_logado, cx_aut) " +
                    "VALUES ('&1.','&2.','&3.','&4.','&5.','&6.','&7.','&8.','&9.')", new String[] {
                    "0000-00-00 00:00:00",
                    Dates.DateFormata("HH:MM:ss", new Date()),
                    "CX",
                    String.valueOf(tt_apu_dn),
                    "0",
                    "DN",
                    "CRE",
                    VariaveisGlobais.usuario.toLowerCase().trim(), "0"});
        conn.CommandExecute(sExecuteSql);

        //; CHEQUE
        sExecuteSql = FuncoesGlobais.Subst("INSERT INTO caixa (cx_data, cx_hora, cx_doc, cx_vrdn, cx_vrch, cx_tipopg, cx_oper, cx_logado, cx_aut) " +
                    "VALUES ('&1.','&2.','&3.','&4.','&5.','&6.','&7.','&8.','&9.')", new String[] {
                    "0000-00-00 00:00:00",
                    Dates.DateFormata("HH:MM:ss", new Date()),
                    "CX",
                    "0",
                    String.valueOf(tt_apu_ch),
                    "CH",
                    "CRE",
                    VariaveisGlobais.usuario.toLowerCase().trim(), "0"});
        conn.CommandExecute(sExecuteSql);

        //; CHEQUE PRE
        sExecuteSql = FuncoesGlobais.Subst("INSERT INTO caixa (cx_data, cx_hora, cx_doc, cx_vrdn, cx_vrch, cx_tipopg, cx_oper, cx_logado, cx_aut) " +
                    "VALUES ('&1.','&2.','&3.','&4.','&5.','&6.','&7.','&8.','&9.')", new String[] {
                    "0000-00-00 00:00:00",
                    Dates.DateFormata("HH:MM:ss", new Date()),
                    "CX",
                    "0",
                    String.valueOf(tt_apu_cp),
                    "CP",
                    "CRE",
                    VariaveisGlobais.usuario.toLowerCase().trim(), "0"});
        conn.CommandExecute(sExecuteSql);

        //; manda para razao
        sExecuteSql = FuncoesGlobais.Subst("INSERT INTO razao (rgprp, campo, dtvencimento, dtrecebimento, tag) VALUES ('CX','AV:9:&1.:000000:AV:ET:&2._05CX:&3.:&4.:&5.:&6.:&7.','&8.','&9.','&10.')", new String[] {
                      FuncoesGlobais.GravaValor(LerValor.floatToCurrency(m_Saldo, 2)),
                      "000000",
                      Dates.DateFormata("yyyy-MM-dd", new Date()),
                      (m_Saldo < 0 ? "DEB" : "CRE"),
                      "XX",
                      FuncoesGlobais.CriptaNome("FECHAMENTO DE CAIXA"),
                      VariaveisGlobais.usuario.toLowerCase().trim(),
                      Dates.DateFormata("yyyy/MM/dd", new Date()),
                      Dates.DateFormata("yyyy/MM/dd", new Date())," "}).replace("_", "");
        conn.CommandExecute(sExecuteSql);

        //; grava no auxiliar
        try {conn.CreateArqAux();} catch (Exception ex) {}
        String sVar = "CX:9:" + FuncoesGlobais.GravaValor(LerValor.floatToCurrency(m_Saldo,2)) + ":000000:CX:0000000000:" + Dates.DateFormata("ddMMyyyy", new Date()) + ":" + (m_Saldo >= 0 ? "CRE" : "DEB") + ":" + FuncoesGlobais.CriptaNome("FECHAMENTO DE CAIXA") + ":" + VariaveisGlobais.usuario.toLowerCase().trim();
        String tmpTexto = "INSERT INTO auxiliar (conta, contrato, campo, dtvencimento, dtrecebimento, rc_aut) VALUES ('&1.','&2.','&3.','&4.','&5.','&6.');";
        tmpTexto = FuncoesGlobais.Subst(tmpTexto, new String[] {
                   "CXA",
                   "",
                   sVar,
                   Dates.DateFormata("yyyy-MM-dd", dData),
                   Dates.DateFormata("yyyy/MM/dd", new Date()),
                   "0"});
        conn.CommandExecute(tmpTexto);

        this.dispose();
    }            
    
    private Document PrintHead(Date dData, String docName, String pathName) {
        Collections gVar = VariaveisGlobais.dCliente;
        
        float width = VariaveisGlobais.bobinaSize[0]; float height = VariaveisGlobais.bobinaSize[1];
        float left = VariaveisGlobais.bobinaSize[2]; float right = VariaveisGlobais.bobinaSize[3];
        float top = VariaveisGlobais.bobinaSize[4]; float botton = VariaveisGlobais.bobinaSize[5];
        
        String outputPath = pathName + docName; // Caminho para salvar o arquivo PDF
        
        Document document = null;
        try {
            Rectangle pagesize = new Rectangle(width, height);
            //document = new Document(new com.itextdocument.text.Rectangle(240, 800), 18, 18, 18, 18); // Largura 80mm, altura indefinida, margens de meio centímetro
            document = new Document(pagesize, left, right, top, botton);
            
            // Cria o diretorio se necessário
            if (!new File(pathName).exists()) {
                boolean sucess = new File(pathName).mkdirs();
                if (!sucess) { System.out.println("Não consegui criar " + pathName); System.exit(1); }
            }
            
            try {
                // Criar um novo documento PDF com o tamanho da página especificado
                PdfWriter.getInstance(document, new FileOutputStream(outputPath));
            } catch (FileNotFoundException ex) {}
            document.open();
            
            // Adicionar logo da empresa
            Image logo = null;
            try {
                logo = Image.getInstance("resources/logos/boleta/" + VariaveisGlobais.dCliente.get("marca").trim() + ".gif");
            } catch (BadElementException | IOException ex) {}
            float logoWidth = document.getPageSize().getWidth() - document.leftMargin() - document.rightMargin();
            float logoHeight = document.getPageSize().getHeight() / 25; // 10 linhas de altura
            logo.scaleToFit(logoWidth, logoHeight); // Ajustar o tamanho da imagem
            document.add(logo);
            
            // Adicionar informações da empresa
            Font fontEmpresa = new Font(FontFamily.HELVETICA, 10, Font.NORMAL, BaseColor.BLUE);
            Paragraph empresa = new Paragraph(gVar.get("empresa"), fontEmpresa);
            empresa.setAlignment(Element.ALIGN_LEFT);
            document.add(empresa);

            Font fontEndereco = new Font(FontFamily.HELVETICA, 8, Font.NORMAL, BaseColor.BLACK);
            Paragraph endereco = new Paragraph(gVar.get("endereco") + ", " + gVar.get("numero") + " " + gVar.get("complemento"), fontEndereco);
            endereco.setAlignment(Element.ALIGN_LEFT);
            document.add(endereco);

            Font fontBairro = new Font(FontFamily.HELVETICA, 8, Font.NORMAL, BaseColor.BLACK);
            Paragraph bairro = new Paragraph(gVar.get("bairro") + " - " + gVar.get("cidade") + " - " + gVar.get("estado") + " - " + gVar.get("cep"), fontBairro);
            bairro.setAlignment(Element.ALIGN_LEFT);
            document.add(bairro);
                    
            Font fontTelefone = new Font(FontFamily.HELVETICA, 8, Font.NORMAL, BaseColor.BLACK);
            Paragraph telefone = new Paragraph("Telefone: " + gVar.get("telefone") + " E-Mail: " + gVar.get("email"), fontTelefone);
            telefone.setAlignment(Element.ALIGN_LEFT);
            document.add(telefone);

            if (!gVar.get("cnpj").trim().equals("") || gVar.get("cnpj") != null) {
                // Adicionar CNPJ e Inscrição na mesma linha
                Font fontcnpjInscricao = new Font(FontFamily.HELVETICA, 8, Font.NORMAL, BaseColor.BLACK);
                Paragraph cnpjInscricao = new Paragraph();
                cnpjInscricao.add(new Phrase("CNPJ: ", fontcnpjInscricao));
                cnpjInscricao.add(new Phrase(gVar.get("cnpj"), new Font(FontFamily.HELVETICA, 8, Font.BOLD, BaseColor.BLACK)));
                cnpjInscricao.add(new Phrase("  Insc.Mun: ", fontcnpjInscricao));
                cnpjInscricao.add(new Phrase(gVar.get("inscricao"), new Font(FontFamily.HELVETICA, 8, Font.BOLD, BaseColor.BLACK)));
                cnpjInscricao.setAlignment(Element.ALIGN_LEFT);
                document.add(cnpjInscricao);
            } else {
                Font fontcreci = new Font(FontFamily.HELVETICA, 8, Font.NORMAL, BaseColor.BLACK);
                Paragraph creci = new Paragraph(gVar.get("tipodoc"), fontcreci);
                creci.setAlignment(Element.ALIGN_RIGHT);
                document.add(creci);  
            }
            
            // Adicionar título "FECHAMENTO" com letra vermelha e fundo amarelo
            Font fontFechamento = new Font(FontFamily.HELVETICA, 11, Font.BOLD, BaseColor.BLUE);
            Paragraph fechamento = new Paragraph("FECHAMENTO DO CAIXA", fontFechamento);
            fechamento.setAlignment(Element.ALIGN_CENTER);
            document.add(fechamento);
            
            Font fontCaixaDia = new Font(FontFamily.HELVETICA, 11, Font.BOLD, BaseColor.BLUE);
            Paragraph caixaDia = new Paragraph("CAIXA DO DIA " + Dates.DateFormata("dd/MM/yyyy", dData), fontCaixaDia);
            caixaDia.setAlignment(Element.ALIGN_CENTER);
            document.add(caixaDia);

            // Adicionar data e nome do usuário na mesma linha
            Font fontDataUsuario = new Font(Font.FontFamily.HELVETICA, 8, Font.NORMAL, BaseColor.BLACK);
            Paragraph dataUsuario = new Paragraph();
            dataUsuario.add(new Phrase("Data/Hora: " + Dates.DateFormata("dd/MM/yyyy HH:mm", new Date()), fontDataUsuario));
            dataUsuario.add(new Phrase("          Usuário: " + VariaveisGlobais.usuario, fontDataUsuario));
            dataUsuario.setAlignment(Paragraph.ALIGN_LEFT);
            document.add(dataUsuario);
            
            // Adicionar uma linha centralizada abaixo da data e do usuário
            LineSeparator line = new LineSeparator();
            line.setLineWidth(1.0f); // Espessura da linha
            line.setLineColor(BaseColor.BLACK); // Cor da linha
            Font fontLinha = new Font(Font.FontFamily.HELVETICA, 2, Font.NORMAL, BaseColor.BLACK);
            Paragraph paragraphWithLine = new Paragraph(" ", fontLinha);
            paragraphWithLine.add(line);
            paragraphWithLine.setAlignment(Paragraph.ALIGN_CENTER);
            document.add(paragraphWithLine);

        } catch (DocumentException dex) {}
        
        return document;
    }
    
    private Document PrintSections(Document document, String titulo) {
        try {
            Font fontSecao = new Font(FontFamily.HELVETICA, 8, Font.BOLD, BaseColor.BLACK);
            Paragraph secao = new Paragraph(titulo, fontSecao);
            secao.setAlignment(Element.ALIGN_LEFT);
            document.add(secao);
            
            // Adicionar uma linha centralizada
            LineSeparator  line = new LineSeparator();
            line.setLineWidth(0.5f); // Espessura da linha
            line.setLineColor(BaseColor.BLACK); // Cor da linha
            
            Font fontLinha = new Font(Font.FontFamily.HELVETICA, 1, Font.NORMAL, BaseColor.BLACK);
            Paragraph paragraphWithLine = new Paragraph(" ", fontLinha);
            paragraphWithLine.add(line);
            paragraphWithLine.setAlignment(Paragraph.ALIGN_CENTER);
            document.add(paragraphWithLine);
        } catch (DocumentException dex) {}
        
        return document;
    }
    
    private Document PrintSubSections(Document document, List<mmyColomn> linhasCol) {
        try {
            for (mmyColomn item : linhasCol) {
                PdfPTable table = new PdfPTable(6);
                table.setWidthPercentage(100);
                table.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
                table.setWidths(new float[] { 16, 18, 14, 44, 24, 6 });
            
                table.setSpacingBefore(0);
                table.setSpacingAfter(0);
            
            
                addCell(table, item.getCol1().trim(), BaseColor.BLACK, 6, Font.BOLD, Element.ALIGN_CENTER);
                addCell(table, item.getCol2().trim(), BaseColor.BLACK, 6, Font.NORMAL, Element.ALIGN_CENTER);
                addCell(table, item.getCol3().trim(), BaseColor.BLACK, 6, Font.NORMAL, Element.ALIGN_CENTER);
                addCell(table, item.getCol4().trim(), BaseColor.BLACK, 6, Font.NORMAL, Element.ALIGN_LEFT);
                addCell(table, item.getCol5().trim(), BaseColor.BLACK, 6, Font.BOLD, Element.ALIGN_RIGHT);
                addCell(table, item.getCol6().trim(), BaseColor.BLACK, 6, Font.NORMAL, Element.ALIGN_RIGHT);

                // Adicionar a tabela ao documento
                document.add(table);            }
        } catch (Exception dex) {}
        
        return document;
    }
    
    private Document PrintResume(Document document, String col1, String col2, String col3, String col4, String col5) {
        try {
            PdfPTable table = new PdfPTable(5);
            table.setWidthPercentage(100);
            table.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            table.setWidths(new float[] { 12, 24, 24, 24, 24 });

            table.setSpacingBefore(0);
            table.setSpacingAfter(0);

            addCell(table, col1, BaseColor.BLACK, 7, Font.NORMAL, Element.ALIGN_CENTER);
            addCell(table, col2, BaseColor.BLACK, 7, Font.NORMAL, Element.ALIGN_RIGHT);
            addCell(table,  col3, BaseColor.BLACK, 7, Font.NORMAL, Element.ALIGN_RIGHT);
            addCell(table,  col4, BaseColor.BLACK, 7, Font.NORMAL, Element.ALIGN_RIGHT);
            addCell(table,  col5, BaseColor.BLACK, 7, Font.NORMAL, Element.ALIGN_RIGHT);

            // Adicionar a tabela ao documento
            document.add(table);
        } catch (DocumentException dex) {}

        return document;
    }
    
    private Document PrintTotal(Document document, String col1, String col2, String col3) {
        try {
            PdfPTable table = new PdfPTable(3);
            table.setWidthPercentage(100);
            table.getDefaultCell().setBorder(PdfPCell.NO_BORDER);
            table.setWidths(new float[] { 42, 26, 32});

            table.setSpacingBefore(0);
            table.setSpacingAfter(0);

            addCell(table, col1, BaseColor.BLACK, 7, Font.NORMAL, Element.ALIGN_LEFT);
            addCell(table, col2, BaseColor.BLACK, 7, Font.NORMAL, Element.ALIGN_RIGHT);
            addCell(table,  " " + col3, BaseColor.BLACK, 7, Font.NORMAL, Element.ALIGN_LEFT);
           
            // Adicionar a tabela ao documento
            document.add(table);
        } catch (DocumentException dex) { }

        return document;
    }
    
    private void addCell(PdfPTable table, String value, BaseColor color, float size, int style, int alignment) {
        Font font = new Font(Font.FontFamily.HELVETICA, size, style, color);

        PdfPCell cell = new PdfPCell(new Phrase(value, font));
        cell.setHorizontalAlignment(alignment); // Definir o alinhamento
        cell.setVerticalAlignment(PdfPCell.ALIGN_MIDDLE);
        cell.setPadding(0);
        cell.setBorder(PdfPCell.NO_BORDER);
        
        table.addCell(cell);
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jCaixas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField jVRCH;
    private javax.swing.JFormattedTextField jVRCP;
    private javax.swing.JFormattedTextField jVRCT;
    private javax.swing.JFormattedTextField jVRDN;
    private javax.swing.JButton jbtnFechar;
    private javax.swing.JButton jbtnSair;
    // End of variables declaration//GEN-END:variables
}
