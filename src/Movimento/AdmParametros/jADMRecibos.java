package Movimento.AdmParametros;

import Funcoes.Db;
import Funcoes.FuncoesGlobais;
import Funcoes.VariaveisGlobais;
import Protocolo.DepuraCampos;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Comparator;
import javax.swing.JCheckBox;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JTextField;

public class jADMRecibos extends javax.swing.JPanel {
    Db conn = VariaveisGlobais.conexao;
    String regras = "";
    boolean mCartVazio = false;

    /**
     * Creates new form jADMRecibos
     */
    public jADMRecibos() {
        initComponents();
        
        // Ajusta Nomes campos letras
        jMU.setText(VariaveisGlobais.dCliente.get("MU"));
        jJU.setText(VariaveisGlobais.dCliente.get("JU"));
        jCO.setText(VariaveisGlobais.dCliente.get("CO"));
        jEP.setText(VariaveisGlobais.dCliente.get("EP"));        
        
        LerCampos();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScroll = new javax.swing.JScrollPane();
        jctCampo = new javax.swing.JPanel();
        jMU = new javax.swing.JLabel();
        jJU = new javax.swing.JLabel();
        jCO = new javax.swing.JLabel();
        jEP = new javax.swing.JLabel();
        jSG = new javax.swing.JLabel();
        jDC = new javax.swing.JLabel();
        jDF = new javax.swing.JLabel();
        e_btupdate = new javax.swing.JButton();
        e_btdel = new javax.swing.JButton();
        jsmDF = new javax.swing.JCheckBox();
        jcbDF = new javax.swing.JCheckBox();
        jsmDC = new javax.swing.JCheckBox();
        jcbDC = new javax.swing.JCheckBox();
        jsmSG = new javax.swing.JCheckBox();
        jcbSG = new javax.swing.JCheckBox();
        jsmEP = new javax.swing.JCheckBox();
        jcbEP = new javax.swing.JCheckBox();
        jsmCO = new javax.swing.JCheckBox();
        jcbCO = new javax.swing.JCheckBox();
        jsmJU = new javax.swing.JCheckBox();
        jcbJU = new javax.swing.JCheckBox();
        jsmMU = new javax.swing.JCheckBox();
        jcbMU = new javax.swing.JCheckBox();

        setMaximumSize(new java.awt.Dimension(772, 314));
        setMinimumSize(new java.awt.Dimension(772, 314));

        jScroll.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("1Âª Via"), new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED)));
        jScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScroll.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N

        jctCampo.setBackground(new java.awt.Color(254, 189, 124));
        jctCampo.setEnabled(false);
        jctCampo.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N

        javax.swing.GroupLayout jctCampoLayout = new javax.swing.GroupLayout(jctCampo);
        jctCampo.setLayout(jctCampoLayout);
        jctCampoLayout.setHorizontalGroup(
            jctCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 592, Short.MAX_VALUE)
        );
        jctCampoLayout.setVerticalGroup(
            jctCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 342, Short.MAX_VALUE)
        );

        jScroll.setViewportView(jctCampo);

        jMU.setText("Multa");
        jMU.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jJU.setText("Juros");
        jJU.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jCO.setText("Correcao");
        jCO.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jEP.setText("Expediente");
        jEP.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jSG.setText("Seguro");
        jSG.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jDC.setText("Desconto");
        jDC.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jDF.setText("Diferenca");
        jDF.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        e_btupdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Figuras/ok.png"))); // NOI18N
        e_btupdate.setText("Atualizar");
        e_btupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                e_btupdateActionPerformed(evt);
            }
        });

        e_btdel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Figuras/stop.png"))); // NOI18N
        e_btdel.setText("Apagar");
        e_btdel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                e_btdelActionPerformed(evt);
            }
        });

        jsmDF.setText("Somar com o Aluguel");

        jsmDC.setText("Somar com o Aluguel");

        jsmSG.setText("Somar com o Aluguel");

        jsmEP.setText("Somar com o Aluguel");

        jsmCO.setText("Somar com o Aluguel");

        jsmJU.setText("Somar com o Aluguel");

        jsmMU.setText("Somar com o Aluguel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDF, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDC, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSG, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jEP, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCO, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jJU, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jMU, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbDF)
                            .addComponent(jcbDC)
                            .addComponent(jcbSG)
                            .addComponent(jcbEP)
                            .addComponent(jcbCO)
                            .addComponent(jcbJU)
                            .addComponent(jcbMU))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jsmDF, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                            .addComponent(jsmDC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jsmSG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jsmEP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jsmCO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jsmJU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jsmMU, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(e_btdel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(e_btupdate, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(261, 261, 261)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbMU)
                            .addComponent(jsmMU)
                            .addComponent(jMU))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbJU)
                            .addComponent(jJU)
                            .addComponent(jsmJU))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbCO)
                            .addComponent(jCO)
                            .addComponent(jsmCO))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbEP)
                            .addComponent(jEP)
                            .addComponent(jsmEP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbSG)
                            .addComponent(jSG)
                            .addComponent(jsmSG))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbDC)
                            .addComponent(jDC)
                            .addComponent(jsmDC))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jsmDF)
                            .addComponent(jcbDF)
                            .addComponent(jDF))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(e_btupdate)
                            .addComponent(e_btdel))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void e_btupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_e_btupdateActionPerformed
        GravarCampos();
    }//GEN-LAST:event_e_btupdateActionPerformed

    private void e_btdelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_e_btdelActionPerformed
        ApagaRegra();
        LerCampos();
    }//GEN-LAST:event_e_btdelActionPerformed

    private void GravarCampos() {
        if ("".equals(VariaveisGlobais.ccampos.trim())) return;

        String cCampos[] = VariaveisGlobais.ccampos.split(";");
        Arrays.sort (cCampos, new Comparator()
        {
            private int pos1 = 0;
            private int pos2 = 2;
            public int compare(Object o1, Object o2) {
                String p1 = ((String)o1).substring(pos1, pos2);
                String p2 = ((String)o2).substring(pos1, pos2);
                return p1.compareTo(p2);
            }
        });

        int i = 0; int maxcpos = jctCampo.getComponentCount(); int j = 0;
        String saida = ""; String nmCampo = "";
        for (i=0; i <= maxcpos - 1; i++) {
            if (jctCampo.getComponent(i) instanceof JLabel) {
                saida = ((JLabel) jctCampo.getComponent(i)).getText();
                nmCampo = ((JLabel) jctCampo.getComponent(i)).getName();
            } else if (jctCampo.getComponent(i) instanceof JFormattedTextField) {
                saida = ((JFormattedTextField) jctCampo.getComponent(i)).getText();
                nmCampo = ((JFormattedTextField) jctCampo.getComponent(i)).getName();
            } else if (jctCampo.getComponent(i) instanceof JTextField) {
                saida = ((JTextField) jctCampo.getComponent(i)).getText();
                nmCampo = ((JTextField) jctCampo.getComponent(i)).getName();
            } else if (jctCampo.getComponent(i) instanceof JCheckBox) {
                boolean simnao = ((JCheckBox) jctCampo.getComponent(i)).isSelected();
                saida = (simnao ? "TRUE" : "FALSE");
                nmCampo = ((JCheckBox) jctCampo.getComponent(i)).getName();
            } else saida = "";
            //System.out.println(saida + " -> " + jctCampo.getComponent(i).getName());

            if (nmCampo.contains("Field")) {
                cCampos[j] = ChangeCampos(cCampos[j],2,saida);
            } else if (nmCampo.contains("Check")) {
                cCampos[j] = ChangeCampos(cCampos[j], -2, saida);
            } else if (nmCampo.contains("Cota")) {
                cCampos[j] = ChangeCampos(cCampos[j], 3, saida);
            } else if (nmCampo.contains("Barras")) {
                cCampos[j] = ChangeCampos(cCampos[j], -1, saida);
            }

            int mod = (i + 1) % 2;
            if (mod == 0) {
                j++;
            }
        }

        String[] campos_1via = {};
        for (int z=0;z<cCampos.length;z++) {
            int pos = FuncoesGlobais.IndexOf(cCampos[z].split(":"), "RT");
            if (pos > -1) campos_1via = FuncoesGlobais.ArrayAdd(campos_1via, cCampos[z].substring(0, 3) + "1:X" );
        }
        
        if (jcbMU.isSelected()) {
            campos_1via = FuncoesGlobais.ArrayAdd(campos_1via, "MU:" + "1:" + (jsmMU.isSelected() ? "1" : "0"));
        }
        if (jcbJU.isSelected()) {
            campos_1via = FuncoesGlobais.ArrayAdd(campos_1via, "JU:" + "1:" + (jsmJU.isSelected() ? "1" : "0"));
        }
        if (jcbCO.isSelected()) {
            campos_1via = FuncoesGlobais.ArrayAdd(campos_1via, "CO:" + "1:" + (jsmCO.isSelected() ? "1" : "0"));
        }
        if (jcbEP.isSelected()) {
            campos_1via = FuncoesGlobais.ArrayAdd(campos_1via, "EP:" + "1:" + (jsmEP.isSelected() ? "1" : "0"));
        }
        if (jcbSG.isSelected()) {
            campos_1via = FuncoesGlobais.ArrayAdd(campos_1via, "SG:" + "1:" + (jsmSG.isSelected() ? "1" : "0"));
        }
        if (jcbDC.isSelected()) {
            campos_1via = FuncoesGlobais.ArrayAdd(campos_1via, "DC:" + "1:" + (jsmDC.isSelected() ? "1" : "0"));
        }
        if (jcbDF.isSelected()) {
            campos_1via = FuncoesGlobais.ArrayAdd(campos_1via, "DF:" + "1:" + (jsmDF.isSelected() ? "1" : "0"));
        }
        
        String protocol = FuncoesGlobais.join(campos_1via, ";");
        if (!protocol.trim().equals("")) {
            try {
                conn.SaveParameters(new String[] {"REGRAS",protocol,"TEXTO"});
                regras = protocol;
            } catch (Exception ex) {ex.printStackTrace();}            
        } else ApagaRegra();
    }

    private void ApagaRegra() {
        try {
            conn.CommandExecute("DELETE FROM parametros WHERE Lower(Trim(variavel)) = 'REGRAS';" );
        } catch (Exception ex) {ex.printStackTrace();}
    }

    private void LerCampos() {
        try {
            if (InsereCampos()) {
                DesMontaTela();
                MontaTela();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        
    }
    
    private boolean InsereCampos() throws SQLException {
        String[] gCampos = VariaveisGlobais.ccampos.split(";");
        int j = 0; boolean bRet = false;
        String sqlWhere = ""; String sqlSelect = "";
        if (!"".equals(VariaveisGlobais.ccampos.trim())) {
            for (j = 0; j <= gCampos.length - 1; j++) {
              sqlWhere = sqlWhere + "CART_CODIGO <> '" + gCampos[j].substring(0,2) + "' AND ";
            }
        }

        if (!"".equals(sqlWhere.trim())) {
          sqlWhere = "WHERE " + sqlWhere.substring(0, sqlWhere.length() - 5);
        }
        sqlSelect = "SELECT lancart.cart_codigo, " +
                  "lancart.cart_descr, lancart.cart_ordem, lancart.cart_conteudo, " +
                  "lancart.cart_cotpar, lancart.cart_taxa, lancart.cart_federal, lancart.cart_modifica, " +
                  "lancart.cart_fixo, lancart.cart_retencao, lancart.cart_recibo, " +
                  "lancart.cart_extrato, lancart.cart_imposto FROM lancart " + sqlWhere;

        String cartCampos = null; String stCAMPOS = null; String mSql = null;
        cartCampos = CarregaCamposCarteira(sqlSelect);

        if (!"".equals(cartCampos.trim())) {
            stCAMPOS = VariaveisGlobais.ccampos + ";" + cartCampos;
            if (stCAMPOS.substring(0, 1).equals(";")) {
              stCAMPOS = stCAMPOS.substring(1);
            }

            VariaveisGlobais.ccampos = stCAMPOS;
            bRet = true;
        }

        return bRet;
    }
    
    public String CarregaCamposCarteira(String cSql) throws SQLException {
        ResultSet Data1 = conn.OpenTable(cSql, null);
        String mCampos = "";

        while (Data1.next()) {
            mCampos = mCampos + Data1.getString("cart_codigo") + ":" +
                       Data1.getString("cart_ordem") + ":" +
                       "0000000000" + ":" +
                       "0000" + ":" +
                       ("1".equals(Data1.getString("cart_taxa")) ? "NT" : "AL") + ":" +
                       ("1".equals(Data1.getString("cart_retencao")) ? "RT" : "") + ":" +
                       ("1".equals(Data1.getString("cart_recibo")) ? "RZ" : "") + ":" +
                       ("1".equals(Data1.getString("cart_extrato")) ? "ET" : "") + ":" +
                       ("1".equals(Data1.getString("cart_imposto")) ?  "IP" : "") + ";";

                       //(!"P".equals(Data1.getString("CART_COTPAR")) ? "0000" : "000000") + ":" +
        }
        
        conn.CloseTable(Data1);

        if (!"".equals(mCampos.trim())) {
            mCampos = mCampos.replaceAll("::", ":");
            mCampos = mCampos.replaceAll(":;", ";");

            mCampos = mCampos.substring(0, mCampos.length() - 1);
        }
        return mCampos;
    }
    
    private void DesMontaTela() {
        jctCampo.removeAll();
        jcbMU.setSelected(false);
        jsmMU.setSelected(false);
        jcbJU.setSelected(false);
        jsmJU.setSelected(false);
        jcbCO.setSelected(false);
        jsmCO.setSelected(false);
        jcbEP.setSelected(false);
        jsmEP.setSelected(false);
        jcbSG.setSelected(false);
        jsmSG.setSelected(false);
        jcbDC.setSelected(false);
        jsmDC.setSelected(false);
        jcbDF.setSelected(false);
        jsmDF.setSelected(false);        
    }

    private void MontaTela() throws SQLException {
        String nCampos = VariaveisGlobais.ccampos;

        if (!"".equals(nCampos.trim())) {
            DepuraCampos a = new DepuraCampos(nCampos);

            a.SplitCampos();
            // Ordena Matriz
            Arrays.sort (a.aCampos, new Comparator()
            {
            private int pos1 = 0;
            private int pos2 = 2;
            public int compare(Object o1, Object o2) {
                String p1 = ((String)o1).substring(pos1, pos2);
                String p2 = ((String)o2).substring(pos1, pos2);
                return p1.compareTo(p2);
            }
            });

            int i = 0;
            for (i=0; i<= a.length() - 1; i++) {
                String[] Campo = a.Depurar_withcod(i);
                if (Campo.length > 0) {
                    MontaCampos(Campo, i);
                }
            }
            mCartVazio = false;
            
            if (regras != null) {
                String[] rgCampos = regras.split(";");
                // Aqui entra a segunad parte da atualizaÃ§Ã£o
                int npos = FuncoesGlobais.IndexOf(rgCampos, "MU" + ":");
                if ( npos > -1) {
                    jcbMU.setSelected(rgCampos[npos].split(":")[1].equals("1"));
                    jsmMU.setSelected(rgCampos[npos].split(":")[2].equals("1"));
                }

                npos = FuncoesGlobais.IndexOf(rgCampos, "JU" + ":");
                if ( npos > -1) {
                    jcbJU.setSelected(rgCampos[npos].split(":")[1].equals("1"));
                    jsmJU.setSelected(rgCampos[npos].split(":")[2].equals("1"));
                }

                npos = FuncoesGlobais.IndexOf(rgCampos, "CO" + ":");
                if ( npos > -1) {
                    jcbCO.setSelected(rgCampos[npos].split(":")[1].equals("1"));
                    jsmCO.setSelected(rgCampos[npos].split(":")[2].equals("1"));
                }

                npos = FuncoesGlobais.IndexOf(rgCampos, "EP" + ":");
                if ( npos > -1) {
                    jcbEP.setSelected(rgCampos[npos].split(":")[1].equals("1"));
                    jsmEP.setSelected(rgCampos[npos].split(":")[2].equals("1"));
                }

                npos = FuncoesGlobais.IndexOf(rgCampos, "SG" + ":");
                if ( npos > -1) {
                    jcbSG.setSelected(rgCampos[npos].split(":")[1].equals("1"));
                    jsmSG.setSelected(rgCampos[npos].split(":")[2].equals("1"));
                }

                npos = FuncoesGlobais.IndexOf(rgCampos, "DC" + ":");
                if ( npos > -1) {
                    jcbDC.setSelected(rgCampos[npos].split(":")[1].equals("1"));
                    jsmDC.setSelected(rgCampos[npos].split(":")[2].equals("1"));
                }

                npos = FuncoesGlobais.IndexOf(rgCampos, "DF" + ":");
                if ( npos > -1) {
                    jcbDF.setSelected(rgCampos[npos].split(":")[1].equals("1"));
                    jsmDF.setSelected(rgCampos[npos].split(":")[2].equals("1"));
                }
            }
        } else {
            VariaveisGlobais.ccampos = "";
            mCartVazio = false;
        }
    }
    
    public String ChangeCampos(String campo, int pos, String valor) {
        String[] aCampo = campo.split(":");

        if (pos == 2) {
            // Altera valor no protocolo
            String newValor = FuncoesGlobais.GravaValor(valor);
            aCampo[pos] = newValor;
        } else if (pos == 3) {
            // Altera Cota/Parcela
            aCampo[pos] = valor.replace("/", "");
        } else if (pos == -1) {
            int npos = FuncoesGlobais.IndexOf(aCampo, "CB");
            if (npos > -1) {

                if (!"".equals(valor)) {
                    aCampo[npos] = "CB" + valor;
                } else aCampo[npos] = "X";

            } else {
                if (!"".equals(valor)) {
                    aCampo = FuncoesGlobais.ArrayAdd(aCampo, "CB"+valor);
                }
            }
        } else if (pos == -2) {
            int npos = FuncoesGlobais.IndexOf(aCampo, "RT");
            if (npos > -1) {
                if (!"".equals(valor)) {
                    aCampo[npos] = ("TRUE".equals(valor) ? "RT" : "X");
                } else aCampo[npos] = "X";
            } else {
                if (!"".equals(valor)) {
                    if ("TRUE".equals(valor)) {
                        aCampo = FuncoesGlobais.ArrayAdd(aCampo, "RT");
                    }
                }
            }
        }

        String mCampo = FuncoesGlobais.join(aCampo, ":");
        mCampo = mCampo.replaceAll("X:", "");
        mCampo = mCampo.replaceAll("X", "");
        if (":".equals(mCampo.substring(mCampo.length() - 1, mCampo.length()))) {
            mCampo = mCampo.substring(0, mCampo.length() - 1);
        }
        return mCampo;
    }
    
    private void MontaCampos(String[] aCampos, int i) {
        int at = 20; int llg = 100; int ltf = 80; int lcp = 60; int lcc = 180;

        JLabel lb = new JLabel();
        lb.setText(aCampos[1]);
        lb.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        lb.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lb.setVisible(true);
        lb.setForeground(Color.BLACK);
        lb.setBounds(0, 0 + (at * i), llg, at);
        lb.setName("Label" + i);
        jctCampo.add(lb);

        JCheckBox cb = new JCheckBox();
        cb.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        if (regras != null) {
            cb.setSelected((FuncoesGlobais.IndexOf(regras.split(";"), aCampos[0].trim() + ":") > -1));
        } else cb.setSelected(("0".equals(aCampos[3]) ? false : true));
        cb.setVisible(true);
        cb.setForeground(Color.BLACK);
        cb.setBounds(lb.getX() + llg + 5, 0 + (at * i), at, at);
        cb.setName("Check" + i);
        jctCampo.add(cb);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton e_btdel;
    private javax.swing.JButton e_btupdate;
    private javax.swing.JLabel jCO;
    private javax.swing.JLabel jDC;
    private javax.swing.JLabel jDF;
    private javax.swing.JLabel jEP;
    private javax.swing.JLabel jJU;
    private javax.swing.JLabel jMU;
    private javax.swing.JLabel jSG;
    private javax.swing.JScrollPane jScroll;
    private javax.swing.JCheckBox jcbCO;
    private javax.swing.JCheckBox jcbDC;
    private javax.swing.JCheckBox jcbDF;
    private javax.swing.JCheckBox jcbEP;
    private javax.swing.JCheckBox jcbJU;
    private javax.swing.JCheckBox jcbMU;
    private javax.swing.JCheckBox jcbSG;
    private javax.swing.JPanel jctCampo;
    private javax.swing.JCheckBox jsmCO;
    private javax.swing.JCheckBox jsmDC;
    private javax.swing.JCheckBox jsmDF;
    private javax.swing.JCheckBox jsmEP;
    private javax.swing.JCheckBox jsmJU;
    private javax.swing.JCheckBox jsmMU;
    private javax.swing.JCheckBox jsmSG;
    // End of variables declaration//GEN-END:variables
}
