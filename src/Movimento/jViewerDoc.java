package Movimento;

import Funcoes.Dates;
import Funcoes.Db;
import Funcoes.FuncoesGlobais;
import Funcoes.LerValor;
import Funcoes.Pad;
import Funcoes.StringManager;
import Funcoes.StringUtils;
import Funcoes.VariaveisGlobais;
import Funcoes.WordWrap;
import Funcoes.jPDF;
import Funcoes.jTableControl;
import Funcoes.tempFile;
import Funcoes.toPreview;
import Movimento.BoletasCentral.CentralBoletas;
import Protocolo.DepuraCampos;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BarcodeInter25;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.draw.LineSeparator;
import com.lowagie.text.Element;
import extrato.Extrato;
import Sici.Partida.Collections;
import boleta.Boleta;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.Cursor;
import java.awt.Font;
import java.math.BigDecimal;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.PatternSyntaxException;
import javax.swing.JEditorPane;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.JRPdfExporter;

public class jViewerDoc extends javax.swing.JInternalFrame {
    private JEditorPane _htmlPane = new JEditorPane();
    Db conn = VariaveisGlobais.conexao;
    jTableControl tabela = new jTableControl(true);    
    TableRowSorter<TableModel> sorter;
    
    /**
     * Creates new form jViewerDoc
     */
    public jViewerDoc() {
        initComponents();

        // Icone da tela
        FlatSVGIcon icone = new FlatSVGIcon("menuIcons/impressaoRemota.svg",16,16);
        setFrameIcon(icone);        
        
        conDataInicial.setDate(Dates.primeiraDataMes(new Date()));
        conDataFinal.setDate(Dates.ultimoDataMes(new Date()));
        

        tipo.setEnabled(true);
        conDataInicial.setEnabled(true);
        conDataFinal.setEnabled(true);
        conBtnListar.setEnabled(true);
        btPreview.setEnabled(false);
        btRetornar.setEnabled(false);        
        jbtSend.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tipo = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        conDataInicial = new com.toedter.calendar.JDateChooser("dd/MM/yyyy", "##/##/#####", '_');
        jLabel11 = new javax.swing.JLabel();
        conDataFinal = new com.toedter.calendar.JDateChooser("dd/MM/yyyy", "##/##/#####", '_');
        conBtnListar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSubject = new javax.swing.JTextField();
        jbtSend = new javax.swing.JButton();
        jPara = new javax.swing.JTextField();
        jBuscar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jMensagem = new javax.swing.JEditorPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        btnClear = new javax.swing.JLabel();
        filtro = new javax.swing.JTextField();
        btPreview = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tFiles = new javax.swing.JTable();
        btRetornar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle(".:: Re-Impressão de Documentos");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        tipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Recibos", "Boletas", "Extratos", "Avisos" }));

        jLabel10.setText("Periodo:");

        conDataInicial.setDate(new java.util.Date(-2208977612000L));

        jLabel11.setText("até");

        conDataFinal.setDate(new java.util.Date(-2208977612000L));

        conBtnListar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/webmaster_2531_text_align_center.png"))); // NOI18N
        conBtnListar.setText("Listar");
        conBtnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conBtnListarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tipo, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(conDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(conDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(conBtnListar, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(conDataFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(conDataInicial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(conBtnListar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tipo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(null, java.awt.Color.darkGray), "( Enviar documento anexado por EMail )", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 51, 153))); // NOI18N

        jLabel4.setText("PARA:");
        jLabel4.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabel5.setText("ASSUNTO:");
        jLabel5.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jLabel6.setText("MENSAGEM:");
        jLabel6.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jbtSend.setText("Enviar");
        jbtSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtSendActionPerformed(evt);
            }
        });

        jPara.setToolTipText("");

        jBuscar.setText("Buscar");
        jBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBuscarActionPerformed(evt);
            }
        });

        jMensagem.setContentType("\"text/html\""); // NOI18N
        jScrollPane3.setViewportView(jMensagem);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPara, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jbtSend, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSubject)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jPara, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jSubject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbtSend))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "[ Arquivos ]", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel7.setText("Filtro:");

        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Figuras/Clean_16x16.jpeg"))); // NOI18N
        btnClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnClearMouseClicked(evt);
            }
        });

        filtro.setBorder(null);
        filtro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtroActionPerformed(evt);
            }
        });
        filtro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filtroKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filtro, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(filtro)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        btPreview.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Actions-document-print-preview-icon.png"))); // NOI18N
        btPreview.setText("Preview");
        btPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPreviewActionPerformed(evt);
            }
        });

        tFiles.setAutoCreateRowSorter(true);
        tFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tFiles.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tFiles);

        btRetornar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/closer.gif"))); // NOI18N
        btRetornar.setText("Retornar");
        btRetornar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRetornarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btPreview)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btRetornar))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btPreview, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btRetornar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtSendActionPerformed
//        if (jSubject.getText().trim().equalsIgnoreCase("") || jMensagem.getText().trim().equalsIgnoreCase("")) {
//            JOptionPane.showMessageDialog(null, "Campos assunto e mensagem não podem estar em branco!!!", "Atenção", JOptionPane.ERROR_MESSAGE);
//            return;
//        }
//
//        int selRow = tFiles.getSelectedRow();
//        int modelRow = tFiles.convertRowIndexToModel(selRow);
//        String rdoc = (String) tFiles.getModel().getValueAt(modelRow, 0);
//
//        //Outlook email = new Outlook(true);
//        try {
//            String To = jPara.getText().trim().toLowerCase();
//            String Subject = jSubject.getText().trim();
//            String Body = jMensagem.getDocument().getText(0, jMensagem.getDocument().getLength());
//            //String[] Attachments = new String[] {System.getProperty("user.dir") + "/" + pasta + rdoc};
//
//            Gmail service = GmailAPI.getGmailService();
//            MimeMessage Mimemessage = createEmailWithAttachment(To,"me",Subject,Body,new File(System.getProperty("user.dir") + "/" + pasta + rdoc));
//            System.out.println("Arquivo: " + System.getProperty("user.dir") + "/" + pasta + rdoc);
//
//            Message message = createMessageWithEmail(Mimemessage);
//
//            message = service.users().messages().send("me", message).execute();
//
//            System.out.println("Message id: " + message.getId());
//            System.out.println(message.toPrettyString());
//            if (message.getId() != null) {
//                JOptionPane.showMessageDialog(null, "Enviado com sucesso!!!", "Atenção", JOptionPane.INFORMATION_MESSAGE);
//            } else {
//                JOptionPane.showMessageDialog(null, "Erro ao enviar!!!\n\nTente novamente...", "Atenção", JOptionPane.ERROR_MESSAGE);
//            }
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
    }//GEN-LAST:event_jbtSendActionPerformed

    private void jBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBuscarActionPerformed
        Object[][] busca = {}; String jcampo = ""; String jtabela = ""; String jwhere = "";

        if (jPara.getText().toUpperCase().subSequence(0, 1).equals("P")) {
            jcampo = "email";
            jtabela = "proprietarios";
            jwhere = "rgprp = '" + jPara.getText().toUpperCase().substring(1) + "'";
        } else if (jPara.getText().toUpperCase().subSequence(0, 1).equals("L")) {
            jcampo = "email";
            jtabela = "locatarios";
            jwhere = "contrato = '" + jPara.getText().toUpperCase().substring(1) + "'";
        } if (jPara.getText().toUpperCase().subSequence(0, 1).equals("F")) {
            jcampo = "email";
            jtabela = "fiadores";
            jwhere = "contrato = '" + jPara.getText().toUpperCase().substring(1) + "'";
        }
        try {
            busca = VariaveisGlobais.conexao.ReadFieldsTable(new String[] {jcampo}, jtabela, jwhere);
        } catch (Exception e) {}

        try {
            if (!busca[0][3].toString().trim().equalsIgnoreCase("")) {
                jPara.setText(busca[0][3].toString());
            }
        } catch (Exception e) {}
    }//GEN-LAST:event_jBuscarActionPerformed

    private void btnClearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearMouseClicked
        filtro.setText(null);
        filtro.requestFocus();
    }//GEN-LAST:event_btnClearMouseClicked

    private void filtroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filtroActionPerformed

    private void filtroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtroKeyReleased
        if ("".equals(filtro.getText().trim())) {
            sorter.setRowFilter(null);
        } else {
            try {
                sorter.setRowFilter(RowFilter.regexFilter(filtro.getText().trim()));
            } catch (PatternSyntaxException pse) {
                System.err.println("Bad regex pattern");
            }
        }
    }//GEN-LAST:event_filtroKeyReleased

    private void btPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPreviewActionPerformed
       int selRow = tFiles.getSelectedRow();
        int modelRow = tFiles.convertRowIndexToModel(selRow);
        int nAut =  Integer.parseInt(tFiles.getValueAt(selRow, 4).toString());
        Date vencto = Dates.StringtoDate(tFiles.getValueAt(selRow, 3).toString(),"yyyy-MM-dd");
        String contrato = tFiles.getValueAt(selRow, 0).toString();

        String docName = "";
        if (tipo.getSelectedIndex() == 0) {
            // Recibos
            docName = ImprimeReciboPDF(selRow, true);
        } else if (tipo.getSelectedIndex() == 1) {
            if (nAut == 0) {
                    docName = imprimeBoletaPDF(selRow);
            } else {
                // Boletas
                if (JOptionPane.showConfirmDialog(this, "Escolha conforme informado.\n" + 
                        "<Sim> para espelho da boleta.\n" +
                        "<Não> para comprovante de recebimento.", "Atenção", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    docName = imprimeBoletaPDF(selRow);
                } else {
                    docName = ImprimeReciboPDF(selRow, false);
                }                        
            }
        } else if (tipo.getSelectedIndex() == 2) {
            // Extratos
            docName = ImprimeExtratoPDF(selRow);
        } else if (tipo.getSelectedIndex() == 3) {
            // Avisos
            docName = ImprimeAvisoPDF(selRow);
        }
        new toPreview(docName);
    }//GEN-LAST:event_btPreviewActionPerformed

    private void BuildTable(JTable grade, Object[][] data) {
        // Limpa grade
        try { tabela.Clear(grade); } catch (Exception e) {}
        
        Integer[] tam = {90,100,240,60,50};
        String[] col = {"reg","tipo","nome","data","aut"};
        Boolean[] edt = {false,false,false,false,false};
        String[] aln = {"C","C","L","C","C"};
        
        for (Object[] dado : data) {
            tabela.insert(data, dado);
        }
        
        if (data.length > 0) tabela.Show(grade, data, tam, aln, col, edt);
        
        sorter = new TableRowSorter<TableModel>(grade.getModel());
        grade.setRowSorter(sorter);        
    }
    
    private void conBtnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conBtnListarActionPerformed
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        tipo.setEnabled(false);
        conDataInicial.setEnabled(false);
        conDataFinal.setEnabled(false);
        conBtnListar.setEnabled(false);
        btPreview.setEnabled(true);
        btRetornar.setEnabled(true);        
        jbtSend.setEnabled(true);
        
        
        if (tipo.getSelectedIndex() == 0) {
            // Recibos
            ListarRecibos(conDataInicial.getDate(), conDataFinal.getDate());
        } else if (tipo.getSelectedIndex() == 1) {
            // Boletas
            ListarBoletos(conDataInicial.getDate(), conDataFinal.getDate());
        } else if (tipo.getSelectedIndex() == 2) {
            // Extratos
            ListarExtratos(conDataInicial.getDate(), conDataFinal.getDate());
        } else if (tipo.getSelectedIndex() == 3) {
            // Avisos
            ListarAvisos(conDataInicial.getDate(), conDataFinal.getDate());
        } else {
            // Seleção invalida
        }
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_conBtnListarActionPerformed

    private void btRetornarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRetornarActionPerformed
        tipo.setEnabled(true);
        conDataInicial.setEnabled(true);
        conDataFinal.setEnabled(true);
        conBtnListar.setEnabled(true);
        btPreview.setEnabled(false);
        btRetornar.setEnabled(false);        
        jbtSend.setEnabled(false);
    }//GEN-LAST:event_btRetornarActionPerformed

    private void ListarRecibos(Date dtini, Date dtfin) {
        String selectSQL = "SELECT r.contrato, (SELECT l.nomerazao FROM locatarios l " + 
                "WHERE l.contrato = r.contrato LIMIT 1) nome, r.dtvencimento, r.autenticacao " + 
                "FROM recibo r WHERE r.tag = 'X' AND r.autenticacao != 0 AND " + 
                "ISNULL(r.nnumero) AND r.dtvencimento BETWEEN :inicio AND :final ORDER BY r.dtvencimento, 2;";
        ResultSet rs = conn.OpenTable(selectSQL, new Object[][] {
            {"date", "inicio", dtini},
            {"date", "final", dtfin}
        });
        Object[][] data = {};
        try {
            String _registro = null; String _tipo = "RECIBOS"; String _nome = null;
            Date _data = null; int _aut = -1;
            while (rs.next()) {
                try { _registro = rs.getString("contrato"); } catch (SQLException e) { _registro = null; };
                try { _nome = rs.getString("nome"); } catch (SQLException e) { _nome = null; };
                try { _data = rs.getDate("dtvencimento"); } catch (SQLException e) { _data = null; };
                try { _aut = rs.getInt("autenticacao"); } catch (SQLException e) { _aut = -1; };
                
                Object[] dado = {_registro, _tipo, _nome, _data, _aut};
                data = FuncoesGlobais.ObjectsAdd(data, dado);
            }
        } catch (SQLException sqlEx) {}
        conn.CloseTable(rs);
        
        BuildTable(tFiles, data);
    }

    private void ListarBoletos(Date dtini, Date dtfin) {
        String selectSQL = "SELECT r.contrato, (SELECT l.nomerazao FROM locatarios l " + 
                "WHERE l.contrato = r.contrato LIMIT 1) nome, r.dtvencimento, r.autenticacao " + 
                "FROM recibo r WHERE NOT ISNULL(r.nnumero) AND r.dtvencimento BETWEEN :inicio AND :final " + 
                "ORDER BY r.dtvencimento, 2;";
        ResultSet rs = conn.OpenTable(selectSQL, new Object[][] {
            {"date", "inicio", dtini},
            {"date", "final", dtfin}
        });
        Object[][] data = {};
        try {
            String _registro = null; String _tipo = "BOLETOS"; String _nome = null;
            Date _data = null; int _aut = -1;
            while (rs.next()) {
                try { _registro = rs.getString("contrato"); } catch (SQLException e) { _registro = null; };
                try { _nome = rs.getString("nome"); } catch (SQLException e) { _nome = null; };
                try { _data = rs.getDate("dtvencimento"); } catch (SQLException e) { _data = null; };
                try { _aut = rs.getInt("autenticacao"); } catch (SQLException e) { _aut = -1; };
                
                Object[] dado = {_registro, _tipo, _nome, _data, _aut};
                data = FuncoesGlobais.ObjectsAdd(data, dado);
            }
        } catch (SQLException sqlEx) {}
        conn.CloseTable(rs);
        
        BuildTable(tFiles, data);
    }

    private void ListarExtratos(Date dtini, Date dtfin) {
        String selectSQL = "SELECT e.contrato, (SELECT p.nome FROM proprietarios p " + 
                "WHERE p.rgprp = e.contrato) nome, e.dtrecebimento, e.rc_aut FROM auxiliar e " + 
                "WHERE e.conta = 'EXT' AND e.rc_aut != 0 AND e.dtrecebimento BETWEEN :inicio AND :final " + 
                "GROUP BY e.rc_aut ORDER BY e.dtrecebimento, 2;";
        ResultSet rs = conn.OpenTable(selectSQL, new Object[][] {
            {"date", "inicio", dtini},
            {"date", "final", dtfin}
        });
        Object[][] data = {};
        try {
            String _registro = null; String _tipo = "EXTRATOS"; String _nome = null;
            Date _data = null; int _aut = -1;
            while (rs.next()) {
                try { _registro = rs.getString("contrato"); } catch (SQLException e) { _registro = null; };
                try { _nome = rs.getString("nome"); } catch (SQLException e) { _nome = null; };
                try { _data = rs.getDate("dtrecebimento"); } catch (SQLException e) { _data = null; };
                try { _aut = rs.getInt("rc_aut"); } catch (SQLException e) { _aut = -1; };
                
                Object[] dado = {_registro, _tipo, _nome, _data, _aut};
                data = FuncoesGlobais.ObjectsAdd(data, dado);
            }
        } catch (SQLException sqlEx) {}
        conn.CloseTable(rs);
        
        BuildTable(tFiles, data);
    }

    private void ListarAvisos(Date dtini, Date dtfin) {
        String selectSQL = "SELECT a.registro, CASE WHEN a.rid = 0 THEN 'DISPONIVEL' " +
        "WHEN a.rid = 2 THEN 'ADM' WHEN a.rid = 3 THEN 'SOCIOS' WHEN a.rid = 4 THEN 'LOCATARIOS' END tipo, " +
        "CASE WHEN a.rid = 0 THEN (SELECT p.nome FROM proprietarios p WHERE p.rgprp = a.registro LIMIT 1) " +
        "WHEN a.rid = 2 THEN (SELECT m.descr FROM adm m WHERE m.codigo = a.registro LIMIT 1) " +
        "WHEN a.rid = 3 THEN (SELECT s.nome FROM socios s WHERE s.autoid = a.registro LIMIT 1) " +
        "WHEN a.rid = 4 THEN (SELECT l.nomerazao FROM locatarios l WHERE l.contrato = a.registro LIMIT 1) " +
        "END nome, RetAvDataRid2(a.campo) data, a.autenticacao FROM avisos a WHERE a.rid IN (0,2,3,4) AND " +
        "a.autenticacao != 0 AND RetAvDataRid2(a.campo) BETWEEN :inicio AND :final " +
        "ORDER BY RetAvDataRid2(a.campo), 2, 3;";
        ResultSet rs = conn.OpenTable(selectSQL, new Object[][] {
            {"date", "inicio", dtini},
            {"date", "final", dtfin}
        });
        Object[][] data = {};
        try {
            String _registro = null; String _tipo = null; String _nome = null;
            Date _data = null; int _aut = -1;
            while (rs.next()) {
                try { _registro = rs.getString("registro"); } catch (SQLException e) { _registro = null; };
                try { _tipo = rs.getString("tipo"); } catch (SQLException e) { _tipo = null; };
                try { _nome = rs.getString("nome"); } catch (SQLException e) { _nome = null; };
                try { _data = rs.getDate("data"); } catch (SQLException e) { _data = null; };
                try { _aut = rs.getInt("autenticacao"); } catch (SQLException e) { _aut = -1; };
                
                Object[] dado = {_registro, _tipo, _nome, _data, _aut};
                data = FuncoesGlobais.ObjectsAdd(data, dado);
            }
        } catch (SQLException sqlEx) {}
        conn.CloseTable(rs);
        
        BuildTable(tFiles, data);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btPreview;
    private javax.swing.JButton btRetornar;
    private javax.swing.JLabel btnClear;
    private javax.swing.JButton conBtnListar;
    private com.toedter.calendar.JDateChooser conDataFinal;
    private com.toedter.calendar.JDateChooser conDataInicial;
    private javax.swing.JTextField filtro;
    private javax.swing.JButton jBuscar;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JEditorPane jMensagem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField jPara;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jSubject;
    private javax.swing.JButton jbtSend;
    private javax.swing.JTable tFiles;
    private javax.swing.JComboBox tipo;
    // End of variables declaration//GEN-END:variables

   public String ImprimeReciboPDF(int selRow, boolean isRecibo) {       
        String contrato = tFiles.getValueAt(selRow, 0).toString();
        String vencimento = tFiles.getValueAt(selRow, 3).toString();
        int nAut = Integer.parseInt(tFiles.getValueAt(selRow, 4).toString());
           
        // Pegar rgprp, rgimv, contrato, ...
        String selectCaixa = "select cb.cx_data, cb.cx_hora, cb.cx_logado, " +
        "cb.cx_contrato, cb.cx_rgprp, cb.cx_rgimv, cb.cx_oper, cb.cx_vrdn, " +
        "cb.cx_vrch, cb.cx_chrel, cb.cx_tipopg, cb.cx_doc, cb.cx_ndocs " + 
        "from caixabck cb where cb.cx_doc = 'rc' and cb.cx_aut = :aut " + 
        "union select cx.cx_data, cx.cx_hora, cx.cx_logado, cx.cx_contrato, " +
        "cx.cx_rgprp, cx.cx_rgimv, cx.cx_oper, cx.cx_vrdn, cx.cx_vrch, " +
        "cx.cx_chrel, cx.cx_tipopg, cx.cx_doc, cx.cx_ndocs " + 
        "from caixa cx where cx.cx_doc = 'RC' and cx.cx_aut = :reg ;";
        ResultSet rs = conn.OpenTable(selectCaixa, new Object[][] {
            {"int", "aut", nAut}, 
            {"int", "reg", nAut}
        });
        
        int pos = 1; BigDecimal _total = new BigDecimal("0");
        Map<Integer, Object> cxDados = new HashMap<Integer, Object>();
        try {
            while (rs.next()) {
                Date CX_DATA = null; try { CX_DATA = rs.getDate("cx_data"); } catch (SQLException e) {}
                String CX_HORA = null; try { CX_HORA = rs.getString("cx_hora"); } catch (SQLException e) {}
                String CX_LOGADO = null; try { CX_LOGADO = rs.getString("cx_logado"); } catch (SQLException e) {}
                String CX_CONTRATO = null; try { CX_CONTRATO = rs.getString("cx_contrato"); } catch (SQLException e) {}
                String CX_RGPRP = null; try { CX_RGPRP = rs.getString("cx_rgprp"); } catch (SQLException e) {}
                String CX_RGIMV = null; try { CX_RGIMV = rs.getString("cx_rgimv"); } catch (SQLException e) {}
                String CX_OPER = null; try { CX_OPER = rs.getString("cx_oper"); } catch (SQLException e) {}
                BigDecimal CX_VRDN = null; try { CX_VRDN = rs.getBigDecimal("cx_vrdn"); } catch (SQLException e) {}
                BigDecimal CX_VRCH = null; try { CX_VRCH = rs.getBigDecimal("cx_vrch"); } catch (SQLException e) {}
                String CX_CHREL = null; try { CX_CHREL = rs.getString("cx_chrel"); } catch (SQLException e) {}
                String CX_TIPOPG = null; try { CX_TIPOPG = rs.getString("cx_tipopg"); } catch (SQLException e) {}
                String CX_DOC = null; try { CX_DOC = rs.getString("cx_doc"); } catch (SQLException e) {}
                int CX_NDOCS = -1; try { CX_NDOCS = rs.getInt("cx_ndocs"); } catch (SQLException e) {}
                
                Map<String, Object> caixa = new HashMap<String, Object>();
                caixa.put("data", CX_DATA);
                caixa.put("hora", CX_HORA);
                caixa.put("logado", CX_LOGADO);
                caixa.put("contrato", CX_CONTRATO);
                caixa.put("rgprp", CX_RGPRP);
                caixa.put("rgimv", CX_RGIMV);
                caixa.put("oper", CX_OPER);
                caixa.put("vrdn", CX_VRDN);
                caixa.put("vrch", CX_VRCH);
                caixa.put("chrel", CX_CHREL);
                caixa.put("tipopg", CX_TIPOPG);
                caixa.put("doc", CX_DOC);
                caixa.put("ndocs", CX_NDOCS);
                
                cxDados.put(pos++, caixa);
                _total = _total.add(CX_VRDN).add(CX_VRCH);
            }
        } catch (SQLException sqlEx) {}
        conn.CloseTable(rs);
        if (cxDados.size() == 0) {
            JOptionPane.showMessageDialog(this, "Este recibo não existe dento do caixa para ser re-impresso!");
            return null;
        }
        Map<String, Object> caixa = ((Map<String, Object>)cxDados.get(1));
        String ValorRec = LerValor.floatToCurrency(_total.floatValue(),2);
        String jVrRecibo = ValorRec;
        
        // Pega o nome do locatário
        Object[][] aNomeLoca = null;
        try { aNomeLoca = conn.ReadFieldsTable(new String[] {"nomerazao", "rgprp", "rgimv"}, "locatarios", "contrato = :contrato", new Object[][] {{"string", "contrato", contrato}}); } catch (SQLException e) {}
        String jNomeLoca = aNomeLoca[0][3].toString();
        String rgprp = aNomeLoca[1][3].toString();
        String rgimv = aNomeLoca[2][3].toString();
        
        // Pega o endereço do Imovel
        Object[][] aImovel = null;
        try { aImovel = conn.ReadFieldsTable(new String[] {"end", "num", "compl", "bairro", "cidade", "estado", "cep"}, "imoveis", "rgprp = :rgprp AND rgimv = :rgimv", new Object[][] {{"string", "rgprp", rgprp}, {"string", "rgimv", rgimv}}); } catch (SQLException e) {}
        String jEndereco = StringManager.ConvStr(aImovel[0][3].toString().trim() + ", " + aImovel[1][3].toString().trim() + (aImovel[2][3].toString().trim().equalsIgnoreCase("") ? "" : " - " + aImovel[2][3].toString().trim()));
        String jBairro = StringManager.ConvStr(aImovel[3][3].toString());
        String jCidade = StringManager.ConvStr(aImovel[4][3].toString());
        String jEstado = aImovel[5][3].toString().trim().toUpperCase();
        String jCep = aImovel[6][3].toString();
        
        // Pega nome do Proprietário
        Object[][] aProprietario = null;
        try {aProprietario = conn.ReadFieldsTable(new String[] {"nome"}, "proprietarios", "rgprp = :rgprp", new Object[][] {{"string", "rgprp", rgprp}}); } catch (SQLException e) {}
        String jNomeProp = StringManager.ConvStr(aProprietario[0][3].toString());
        
        // Pega campos do recibo
        Object[][] aCampos = null;
        try {
            aCampos = conn.ReadFieldsTable(new String[] {"campo", "nnumero"}, "recibo", "rgprp = :rgprp AND rgimv = :rgimv AND contrato = :contrato AND dtvencimento = :vencimento", new Object[][] {
                {"string", "rgprp", rgprp},
                {"string", "rgimv", rgimv},
                {"string", "contrato", contrato},
                {"string", "vencimento", vencimento}
            });
        } catch (SQLException e) {}
        
        // Impressão individual do recibo
        int via = 1; int nRecibos = 1;
        
        float[] columnWidths = {};
        Collections gVar = VariaveisGlobais.dCliente;
        jPDF pdf = new jPDF();
        String sFileName = new tempFile("pdf").getsPathNameExt();
        pdf.setPathName(new tempFile().getTempPath());
        String docName = new tempFile().getTempFileName(sFileName);
        pdf.setDocName(docName);
        
        BaseFont bf = null;
        try {
            bf = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.WINANSI, BaseFont.EMBEDDED);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        com.itextpdf.text.Font font = new com.itextpdf.text.Font(bf, 9, Font.PLAIN);

        pdf.open();
        
        // Logo
        com.itextpdf.text.Image img;
        try {
            img = com.itextpdf.text.Image.getInstance("resources/logos/boleta/" + VariaveisGlobais.dCliente.get("marca").trim() + ".gif");
            img.setAlignment(Element.ALIGN_LEFT);        
            pdf.doc_add(img);
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        Paragraph p;
        
        p = pdf.print(gVar.get("empresa"), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        if (!gVar.get("cnpj").trim().equals("") || gVar.get("cnpj") != null) {
            p = pdf.print(gVar.get("tipodoc"), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT,pdf.BLACK);
            pdf.doc_add(p);
        }
        p = pdf.print(gVar.get("endereco") + ", " + gVar.get("numero") + " " + gVar.get("complemento"), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print(gVar.get("bairro") + " - " + gVar.get("cidade") + " - " + gVar.get("estado") + " - " + gVar.get("cep"), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print("Tel/Fax:" + gVar.get("telefone"), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print("\n", pdf.HELVETICA, 9, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print((isRecibo ? gVar.get("recibo") : "RECIBO DO BOLETO NNUMERO: " + aCampos[1][3].toString().trim()), pdf.HELVETICA, 12, pdf.BOLD, pdf.CENTER, pdf.BLUE);
        pdf.doc_add(p);
        p = pdf.print("\n", pdf.HELVETICA, 9, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
        pdf.doc_add(p);
        
        columnWidths = new float[] {37, 63 };
        PdfPTable table = new PdfPTable(columnWidths);
        table.setHeaderRows(0);
        table.setWidthPercentage(100);
        font = new com.itextpdf.text.Font(bf, 9, Font.PLAIN);
        font.setColor(BaseColor.BLACK);
        
        String _data = caixa.get("data").toString().substring(0,10);
        String _hora = caixa.get("hora").toString();        
        Date dataRecibo = Dates.StringtoDate(_data + " " + _hora, "yyyy-MM-dd HH:mm:ss");
        PdfPCell cell1 = new PdfPCell(new Phrase("CAIXA: " + caixa.get("logado").toString().trim().toUpperCase(),font));
        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell1.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell1);
        PdfPCell cell2 = new PdfPCell(new Phrase("Data/Hora: " + Dates.DateFormata("dd/MM/yyyy HH:mm", dataRecibo),font));
        cell2.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell2.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell2);
        table.completeRow();
        pdf.doc_add(table);

        p = pdf.print("", pdf.HELVETICA, 9, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
        LineSeparator l = new LineSeparator();
        l.setPercentage(100f);
        p.add(new Chunk(l));
        pdf.doc_add(p);

        // Dados do locatario
        columnWidths = new float[] {35, 65 };
        table = new PdfPTable(columnWidths);
        table.setHeaderRows(0);
        table.setWidthPercentage(100);

        font = new com.itextpdf.text.Font(bf, 8, Font.PLAIN);        
        cell1 = new PdfPCell(new Phrase("Locatário: " + contrato,font));
        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell1.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell1);
        cell2 = new PdfPCell(new Phrase(StringManager.ConvStr(jNomeLoca.toUpperCase().toString()),font));
        cell2.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell2.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell2);
        
        font = new com.itextpdf.text.Font(bf, 9, Font.PLAIN);
        cell1 = new PdfPCell(new Phrase("Imóvel: " + caixa.get("rgimv"),font));
        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell1.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell1);
        cell2 = new PdfPCell(new Phrase("Vencimento: " + Dates.StringtoString(vencimento,"yyyy-MM-dd","dd-MM-yyyy"),font));
        cell2.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell2.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell2);
        table.completeRow();
        pdf.doc_add(table);
        
        p = pdf.print(StringManager.ConvStr(jEndereco), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print(StringManager.ConvStr(jBairro + " - " + jCidade), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print(StringManager.ConvStr(jEstado + " - Cep: " + jCep), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print("\n", pdf.HELVETICA, 9, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
        pdf.doc_add(p);

        // Cabeçario do recibo
        columnWidths = new float[] {50, 20, 30};
        table = new PdfPTable(columnWidths);
        table.setHeaderRows(0);
        table.setWidthPercentage(100);
        font.setColor(BaseColor.WHITE);
        cell1 = new PdfPCell(new Phrase("DISCRIMINAÇÃO",font));
        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell1.setBorder(Rectangle.NO_BORDER);
        cell1.setBackgroundColor(BaseColor.BLACK);
        table.addCell(cell1);
        cell2 = new PdfPCell(new Phrase("C/P",font));
        cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell2.setBorder(Rectangle.NO_BORDER);
        cell2.setBackgroundColor(BaseColor.BLACK);
        table.addCell(cell2);
        PdfPCell cell3 = new PdfPCell(new Phrase("VALOR", font));
        cell3.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell3.setBorder(Rectangle.NO_BORDER);
        cell3.setBackgroundColor(BaseColor.BLACK);
        table.addCell(cell3);
        table.completeRow();
        pdf.doc_add(table);

        columnWidths = new float[] {50, 20, 30};
        table = new PdfPTable(columnWidths);
        table.setHeaderRows(0);
        table.setWidthPercentage(100);
        Object[][] linhas = ListaCamposRecibo_pdf(aCampos[0][3].toString());
        for (int i=0; i<linhas.length;i++) {
            // Dados do recibo
            font.setColor(BaseColor.BLACK);
            cell1 = new PdfPCell(new Phrase((String) linhas[i][0],font));
            cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell1.setBorder(Rectangle.NO_BORDER);
            cell1.setBackgroundColor(BaseColor.WHITE);
            table.addCell(cell1);
            cell2 = new PdfPCell(new Phrase((String) linhas[i][1],font));
            cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell2.setBorder(Rectangle.NO_BORDER);
            cell2.setBackgroundColor(BaseColor.WHITE);
            table.addCell(cell2);
            cell3 = new PdfPCell(new Phrase((String) linhas[i][2], font));
            cell3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            cell3.setBorder(Rectangle.NO_BORDER);
            cell3.setBackgroundColor(BaseColor.WHITE);
            table.addCell(cell3);
        }
        font.setColor(BaseColor.BLACK);
        cell1 = new PdfPCell(new Phrase("",font));
        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell1.setBorder(Rectangle.NO_BORDER);
        cell1.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell1);
        cell2 = new PdfPCell(new Phrase("",font));
        cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell2.setBorder(Rectangle.NO_BORDER);
        cell2.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell2);
        cell3 = new PdfPCell(new Phrase("==========", font));
        cell3.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell3.setBorder(Rectangle.NO_BORDER);
        cell3.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell3);

        font.setColor(BaseColor.BLACK);
        cell1 = new PdfPCell(new Phrase("Total do Recibo",font));
        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell1.setBorder(Rectangle.NO_BORDER);
        cell1.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell1);
        cell2 = new PdfPCell(new Phrase("",font));
        cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell2.setBorder(Rectangle.NO_BORDER);
        cell2.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell2);
        cell3 = new PdfPCell(new Phrase(jVrRecibo, font));
        cell3.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell3.setBorder(Rectangle.NO_BORDER);
        cell3.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell3);
        table.completeRow();
        pdf.doc_add(table);

        p = pdf.print("\n", pdf.HELVETICA, 9, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
        pdf.doc_add(p);

        columnWidths = new float[] {35, 65};
        table = new PdfPTable(columnWidths);
        table.setHeaderRows(0);
        table.setWidthPercentage(100);
        font = new com.itextpdf.text.Font(bf, 8, Font.PLAIN);
        font.setColor(BaseColor.BLACK);
        cell1 = new PdfPCell(new Phrase("Propriet(s): " + rgprp,font));
        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell1.setBorder(Rectangle.TOP);
        cell1.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell1);
        cell2 = new PdfPCell(new Phrase(StringManager.ConvStr(jNomeProp),font));
        cell2.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell2.setBorder(Rectangle.TOP);
        cell2.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell2);

        if (VariaveisGlobais.impPropDiv) {
            Object[][] div = {};
            try {div = conn.ReadFieldsTable(new String[] {"benefs"}, "divisao", "rgprp = '" + caixa.get("rgprp") + "' AND rgimv = '" + caixa.get("rgimv") + "'");} catch (SQLException ex) {}
            if (div != null) {
                if (div.length > 0) {
                    for (int q=0;q<div.length;q++) {
                        String[] cpos = div[q][3].toString().split(";");
                        for (int z=0; z<cpos.length;z++) {
                            String[] scpos = cpos[z].split(":");
                            if (scpos.length > 0) {
                                Object[][] nmProDiv = {};
                                try {nmProDiv = conn.ReadFieldsTable(new String[] {"nome"}, "proprietarios", "rgprp = '" + scpos[0] + "'");} catch (SQLException ex) {}
                                try {
                                    font.setColor(BaseColor.BLACK);
                                    cell1 = new PdfPCell(new Phrase("Propriet(s): " + scpos[0],font));
                                    cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
                                    cell1.setBorder(Rectangle.NO_BORDER);
                                    cell1.setBackgroundColor(BaseColor.WHITE);
                                    table.addCell(cell1);
                                    cell2 = new PdfPCell(new Phrase(StringManager.ConvStr(nmProDiv[0][3].toString()),font));
                                    cell2.setHorizontalAlignment(Element.ALIGN_LEFT);
                                    cell2.setBorder(Rectangle.NO_BORDER);
                                    cell2.setBackgroundColor(BaseColor.WHITE);
                                    table.addCell(cell2);
                                } catch (Exception e) {}
                            }
                        }
                    }
                }
            }
        }
        table.completeRow();
        pdf.doc_add(table);
         
        font = new com.itextpdf.text.Font(bf, 8, Font.PLAIN);
        // Mensagem do Recibo
        String msgem = "";
        try {
            try { msgem = conn.ReadFieldsTable(new String[] {"msgboleta"}, "locatarios", "contrato = '" + contrato + "'")[0][3].toString();} catch (SQLException ex) {msgem = "";}
            if (!msgem.trim().equalsIgnoreCase("")) {
                p = pdf.print("\n", pdf.HELVETICA, 7, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
                pdf.doc_add(p);
                p = pdf.print("__________ MENSAGEM __________", pdf.HELVETICA, 7, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
                pdf.doc_add(p);
                p = pdf.print(msgem, pdf.HELVETICA, 7, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
                pdf.doc_add(p);
                p = pdf.print("\n", pdf.HELVETICA, 7, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
                pdf.doc_add(p);
            }
        } catch (Exception e) {}

        if (nAut > 0) {
            p = pdf.print("__________ VALOR(ES) LANCADOS __________", pdf.HELVETICA, 7, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
            pdf.doc_add(p);

            for (int i=1;i<=cxDados.size();i++) {
                Map<String, Object> cxa = (Map<String, Object>)cxDados.get(i);
                String bLinha = cxa.get("chrel").toString();
                p = pdf.print(bLinha, pdf.HELVETICA, 6, pdf.NORMAL, pdf.RIGHT, pdf.BLACK);
                pdf.doc_add(p);
            }

            p = pdf.print("\n", pdf.HELVETICA, 6, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
            pdf.doc_add(p);

            p = pdf.print("Este recibo não quita qualquer débito anterior.", pdf.HELVETICA, 6, pdf.BOLDITALIC, pdf.CENTER, pdf.BLACK);
            pdf.doc_add(p);

            l = new LineSeparator();
            l.setPercentage(100f);
            p = pdf.print("", pdf.HELVETICA, 7, pdf.BOLDITALIC, pdf.LEFT, pdf.BLACK);
            p.add(new Chunk(l));
            pdf.doc_add(p);

            // Imprimir Autenticação
            p = pdf.print(VariaveisGlobais.dCliente.get("marca").trim() + "RC" + FuncoesGlobais.StrZero(String.valueOf((int)nAut), 7) + "-" +
                          FuncoesGlobais.StrZero(String.valueOf((int)via), 2) + 
                          Dates.DateFormata("ddMMyyyyHHmmss", dataRecibo) + FuncoesGlobais.GravaValores(ValorRec, 2) + caixa.get("logado").toString().toLowerCase().trim(), pdf.HELVETICA, 7, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
            pdf.doc_add(p);
            
            PdfContentByte cb = pdf.writer().getDirectContent();
            BarcodeInter25 code25 = new BarcodeInter25();
            String barra = FuncoesGlobais.StrZero(String.valueOf((int)nAut),16);
            code25.setCode(barra);
            code25.setChecksumText(true);
            code25.setFont(null);
            com.itextpdf.text.Image cdbar = code25.createImageWithBarcode(cb, null, null);
            cdbar.setAlignment(Element.ALIGN_CENTER);
            pdf.doc_add(cdbar);            
        }

        // Pula linhas (6) / corta papel
        for (int k=1;k<=6;k++) { 
            p = pdf.print("\n", pdf.HELVETICA, 6, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
            pdf.doc_add(p);
        }
        
        pdf.close();
        
        String rPathName = pdf.getPathName();       
        pdf.setPathName("");
        pdf.setDocName("");
        return rPathName + docName;       
   }

    private Object[][] ListaCamposRecibo_pdf(String campos) {
        Object[][] linhas = {};
        VariaveisGlobais.ccampos = campos;
        String cCampos[] = VariaveisGlobais.ccampos.split(";");
        
        DepuraCampos a = new DepuraCampos(VariaveisGlobais.ccampos);
        a.SplitCampos();
        // Ordena Matriz
        Arrays.sort (a.aCampos, new Comparator()
        {
        private int pos1 = 3;
        private int pos2 = 4;
        public int compare(Object o1, Object o2) {
            String p1 = ((String)o1).substring(pos1, pos2);
            String p2 = ((String)o2).substring(pos1, pos2);
            return p1.compareTo(p2);
        }
        });

        // Monta campos
        int i = 0;
        for (i=0; i<= a.length() - 1; i++) {
            String[] Campo = null; try { Campo = a.Depurar(i); } catch (SQLException e) {}
            if (Campo.length > 0) {
                Object[] linha = MontaCampos(Campo);
                linhas =  FuncoesGlobais.ObjectsAdd(linhas, (Object[])linha);
            }
        }
        
        // MU; JU; CO
        Collections gVar = VariaveisGlobais.dCliente;
        int MPos = -1; int JPos = -1; int CPos = -1; int FMPos = -1, FJPos = -1, FCPos = -1;
        MPos = cCampos[0].indexOf("MU");
        if (MPos > - 1) {
            String MFrente = cCampos[0].substring(MPos + 2);
            if (MFrente.length() > 0) {
                if (!MFrente.substring(0,1).equalsIgnoreCase(";")) {
                    FMPos = MFrente.indexOf(":", 0);
                    if (FMPos > 0) {
                        String muVr = MFrente.substring(0, FMPos - 1);
                        muVr = LerValor.FormatNumber(muVr,2);
                        linhas =  FuncoesGlobais.ObjectsAdd(linhas, new Object[] {gVar.get("MU"),"",muVr});                
                    }
                }
            }
        }
        
        JPos = cCampos[0].indexOf("JU");
        if (JPos > -1) {
            String JFrente = cCampos[0].substring(JPos + 2);
            if (JFrente.length() > 0) {
                if (!JFrente.substring(0,1).equalsIgnoreCase(";")) {
                    FJPos = JFrente.indexOf(":", 0);
                    if (FJPos > 0) {
                        String juVr = JFrente.substring(0, FJPos - 1);
                        juVr = LerValor.FormatNumber(juVr,2);
                        linhas =  FuncoesGlobais.ObjectsAdd(linhas, new Object[] {gVar.get("JU"),"",juVr});                
                    }
                }
            }
        }
        
        CPos = cCampos[0].indexOf("CO");
        if (CPos > -1) {
            String CFrente = cCampos[0].substring(CPos + 2);
            if (CFrente.length() > 0) {
                if (!CFrente.substring(0,1).equalsIgnoreCase(";")) {
                    FCPos = CFrente.indexOf(":", 0);
                    if (FCPos > 0) {
                        String coVr = CFrente.substring(0, FCPos - 1);
                        coVr = LerValor.FormatNumber(coVr,2);
                        linhas =  FuncoesGlobais.ObjectsAdd(linhas, new Object[] {gVar.get("CO"),"",coVr});                
                    }
                }
            }
        }
        
        return linhas;
    }
   
    private Object[] MontaCampos(String[] aCampos) {
        return new Object[] {
            aCampos[0], 
            VariaveisGlobais.bShowCotaParcela ? 
                ("".equals(aCampos[3]) ? 
                    "00/00" + (!"C".equals(aCampos[5]) ? "00" 
                : "") 
            : "00/00".equals(aCampos[3]) ? "" : aCampos[3]) : "", 
            aCampos[1]
        };
    }

    private String ImprimeExtratoPDF(int selRow) {
        String rgprp = tFiles.getValueAt(selRow, 0).toString();
        int nAut = Integer.parseInt(tFiles.getValueAt(selRow, 4).toString());

        String selectCaixa = "select cb.cx_data, cb.cx_hora, cb.cx_logado, " +
        "cb.cx_contrato, cb.cx_rgprp, cb.cx_rgimv, cb.cx_oper, cb.cx_vrdn, " +
        "cb.cx_vrch, cb.cx_chrel, cb.cx_tipopg, cb.cx_doc, cb.cx_ndocs " + 
        "from caixabck cb where cb.cx_doc = 'et' and cb.cx_aut = :aut " + 
        "union select cx.cx_data, cx.cx_hora, cx.cx_logado, cx.cx_contrato, " +
        "cx.cx_rgprp, cx.cx_rgimv, cx.cx_oper, cx.cx_vrdn, cx.cx_vrch, " +
        "cx.cx_chrel, cx.cx_tipopg, cx.cx_doc, cx.cx_ndocs " + 
        "from caixa cx where cx.cx_doc = 'ET' and cx.cx_aut = :reg ;";
        ResultSet rs = conn.OpenTable(selectCaixa, new Object[][] {
            {"int", "aut", nAut}, 
            {"int", "reg", nAut}
        });
        
        int pos = 1; BigDecimal _total = new BigDecimal("0");
        Map<Integer, Object> cxDados = new HashMap<Integer, Object>();
        try {
            while (rs.next()) {
                Date CX_DATA = null; try { CX_DATA = rs.getDate("cx_data"); } catch (SQLException e) {}
                String CX_HORA = null; try { CX_HORA = rs.getString("cx_hora"); } catch (SQLException e) {}
                String CX_LOGADO = null; try { CX_LOGADO = rs.getString("cx_logado"); } catch (SQLException e) {}
                String CX_CONTRATO = null; try { CX_CONTRATO = rs.getString("cx_contrato"); } catch (SQLException e) {}
                String CX_RGPRP = null; try { CX_RGPRP = rs.getString("cx_rgprp"); } catch (SQLException e) {}
                String CX_RGIMV = null; try { CX_RGIMV = rs.getString("cx_rgimv"); } catch (SQLException e) {}
                String CX_OPER = null; try { CX_OPER = rs.getString("cx_oper"); } catch (SQLException e) {}
                BigDecimal CX_VRDN = null; try { CX_VRDN = rs.getBigDecimal("cx_vrdn"); } catch (SQLException e) {}
                BigDecimal CX_VRCH = null; try { CX_VRCH = rs.getBigDecimal("cx_vrch"); } catch (SQLException e) {}
                String CX_CHREL = null; try { CX_CHREL = rs.getString("cx_chrel"); } catch (SQLException e) {}
                String CX_TIPOPG = null; try { CX_TIPOPG = rs.getString("cx_tipopg"); } catch (SQLException e) {}
                String CX_DOC = null; try { CX_DOC = rs.getString("cx_doc"); } catch (SQLException e) {}
                int CX_NDOCS = -1; try { CX_NDOCS = rs.getInt("cx_ndocs"); } catch (SQLException e) {}
                
                Map<String, Object> caixa = new HashMap<String, Object>();
                caixa.put("data", CX_DATA);
                caixa.put("hora", CX_HORA);
                caixa.put("logado", CX_LOGADO);
                caixa.put("contrato", CX_CONTRATO);
                caixa.put("rgprp", CX_RGPRP);
                caixa.put("rgimv", CX_RGIMV);
                caixa.put("oper", CX_OPER);
                caixa.put("vrdn", CX_VRDN);
                caixa.put("vrch", CX_VRCH);
                caixa.put("chrel", CX_CHREL);
                caixa.put("tipopg", CX_TIPOPG);
                caixa.put("doc", CX_DOC);
                caixa.put("ndocs", CX_NDOCS);
                
                cxDados.put(pos++, caixa);
                _total = _total.add(CX_VRDN).add(CX_VRCH);
            }
        } catch (SQLException sqlEx) {}
        conn.CloseTable(rs);
        if (cxDados.size() == 0) {
            JOptionPane.showMessageDialog(this, "Este extrato não existe dento do caixa para ser re-impresso!");
            return null;
        }
        Map<String, Object> caixa = ((Map<String, Object>)cxDados.get(1));
        String ValorExtrato = LerValor.floatToCurrency(_total.floatValue(),2);
        String jVrExtrato = ValorExtrato;
                
        String _data = caixa.get("data").toString().substring(0,10);
        String _hora = caixa.get("hora").toString();        
        Date dataExtrato = Dates.StringtoDate(_data + " " + _hora, "yyyy-MM-dd HH:mm:ss");
        
        Collections gVar = VariaveisGlobais.dCliente;
        List<Extrato> lista = new ArrayList<Extrato>();
        String[][] sCampos = {};
        float tpagar = LerValor.StringToFloat(jVrExtrato);
        Object dados_prop[][] = null;
                
        String nomeProp = "";
        float fTotCred = 0; float fTotDeb = 0; float fSaldoAnt = 0;                
        try {
            dados_prop = conn.ReadFieldsTable(new String[] {"banco", "agencia", "conta", "favorecido","cpfcnpj","saldoant","nome"}, "proprietarios", "rgprp = '" + rgprp + "'");
            nomeProp = dados_prop[6][3].toString();
        } catch (SQLException ex) {
            Logger.getLogger(jExtrato.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Pega saldo anterior no extrato
        Object[][] aExtrato = null;
        try {
            aExtrato = conn.ReadFieldsTable(new String[] {"pr_sdant"}, "extrato", "rgprp = :rgprp AND et_aut = :aut AND rgimv = '' AND contrato = ''", new Object[][] {
                {"string", "rgprp", rgprp},
                {"int", "aut", nAut}
            });
            if (aExtrato != null) {
                String sdant = aExtrato[0][3].toString();
                fSaldoAnt = Float.valueOf(sdant.trim());
            } else {
                String sdant = "0.0";
                fSaldoAnt = Float.valueOf(sdant.trim());
            }
        } catch (SQLException ex) {}
        
        if (fSaldoAnt > 0) {
            fTotCred += fSaldoAnt;
            sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"Saldo Anterior","0;;black",LerValor.floatToCurrency(fSaldoAnt, 2) + " ",""});
            sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"","0;;black","",""});
        }

        String bloqAD = "";
        if (VariaveisGlobais.bloqAdianta) bloqAD = " AND InStr(campo, '@') = 0 ";
        String sql = "SELECT contrato, rgprp, rgimv, campo, dtvencimento, dtrecebimento, rc_aut FROM extrato WHERE et_aut = :aut ORDER BY " + (VariaveisGlobais.ExtOrdAut ? "rc_aut;" : "rgimv, dtrecebimento;");

        ResultSet hrs = conn.OpenTable(sql, new Object[][] {{"int", "aut", nAut}});
        try {
            while (hrs.next()) {
                String tmpCampo = hrs.getString("campo");
                String[][] rCampos = FuncoesGlobais.treeArray(tmpCampo, true);

                for (int j = 0; j<rCampos.length; j++) {
                    //String tpCampo = new Pad(rCampos[j][rCampos[j].length - 1], 25).RPad();
                    String tpCampo = rCampos[j][rCampos[j].length - 1];
                    if (VariaveisGlobais.bShowCotaParcelaExtrato) {
                        String spart1 = "", spart2 = "", scotaparc = "";
                        if (!"".equals(rCampos[j][3].trim())) {
                            spart1 = rCampos[j][3].trim().substring(0, 2);
                            spart2 = rCampos[j][3].trim().substring(2);
                        } else {
                            spart1 = "00"; spart2 = "0000";
                        }
                        if (!"00".equals(spart1) && "0000".equals(spart2)) {
                            spart1 = "00";
                        } else if ("00".equals(spart1) && !"0000".equals(spart2)) {
                            spart2 = "0000";
                        }
                        scotaparc = spart1 + spart2;
                        tpCampo += "  " + ("0000".equals(scotaparc) || "000000".equals(scotaparc) || "".equals(scotaparc) ? "       " : scotaparc.substring(0,2) + "/" + scotaparc.substring(2));
                    }
                    boolean bRetc = (FuncoesGlobais.IndexOf(rCampos[j], "RT") > -1) || (FuncoesGlobais.IndexOf(rCampos[j], "AT") > -1);
                    if ("AL".equals(rCampos[j][4]) && LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2)) != 0) {
                        if (LerValor.isNumeric(rCampos[j][0])) {
                            Object[][] hBusca = conn.ReadFieldsTable(new String[] {"end", "num", "compl"}, "imoveis", "rgimv = '" + hrs.getString("rgimv") + "'");

                            java.awt.Font ft = new java.awt.Font("Arial",com.lowagie.text.Font.NORMAL,8);
                            String imv = hrs.getString("rgimv").trim() + " - " + hBusca[0][3].toString().trim() + ", " + hBusca[1][3].toString().trim() + " " + hBusca[2][3].toString().trim();
                            List aLinhas = StringUtils.wrap(imv, getFontMetrics(ft), 257);
                            for (Iterator linha = aLinhas.iterator(); linha.hasNext();) { sCampos = FuncoesGlobais.ArraysAdd(sCampos,new String[] {StringManager.ConvStr((String) linha.next()).replace("ò", " "),"0;b;black","",""}); }

                            String loc = conn.ReadFieldsTable(new String[] {"nomerazao"}, "locatarios", "contrato = '" + hrs.getString("contrato") + "'")[0][3].toString();
                            aLinhas = null;
                            aLinhas = StringUtils.wrap(loc, getFontMetrics(ft), 257);
                            for (Iterator linha = aLinhas.iterator(); linha.hasNext();) { sCampos = FuncoesGlobais.ArraysAdd(sCampos,new String[] {StringManager.ConvStr((String) linha.next()).replace("ò", " "),"0;;black","",""}); }
                            
                            //String inq = "[" + Dates.DateFormata("dd/MM/yyyy", hrs.getDate("dtvencimento")) + (VariaveisGlobais.ShowRecebimentoExtrato ? " - " + Dates.DateFormata("dd/MM/yyyy", hrs.getDate("dtrecebimento")) : "          ") + "] - " + hrs.getString("rc_aut");
                            String inq = (VariaveisGlobais.ShowLabelsDatasExtrato ? "[" + Dates.DateFormata("dd/MM/yyyy", hrs.getDate("dtvencimento")) + (VariaveisGlobais.ShowRecebimentoExtrato ? " - " + 
                                          Dates.DateFormata(VariaveisGlobais.marca.trim().equalsIgnoreCase("artvida") ? "MM/yyyy" : "dd/MM/yyyy", hrs.getDate("dtrecebimento")) : "          ") + "] - " + 
                                          hrs.getString("rc_aut") : "[" + Dates.DateFormata("MM/yyyy", hrs.getDate("dtvencimento")) + "] - " + hrs.getString("rc_aut"));
                            aLinhas = null;
                            aLinhas = StringUtils.wrap(inq, getFontMetrics(ft), 257);
                            for (Iterator linha = aLinhas.iterator(); linha.hasNext();) { sCampos = FuncoesGlobais.ArraysAdd(sCampos,new String[] {StringManager.ConvStr((String) linha.next()).replace("ò", " "),"0;;black","",""}); }

                            sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {tpCampo,"0;;black",LerValor.FormatNumber(rCampos[j][2],2) + " ",(bRetc ? LerValor.FormatNumber(rCampos[j][2],2) + " " : "")});

                            fTotCred += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));
                            if (bRetc) {fTotCred += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));}

                            int nPos = FuncoesGlobais.IndexOf(rCampos[j], "CM");
                            if (nPos > -1) {
                                sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {gVar.get("CM"),"0;;black","",LerValor.FormatNumber(rCampos[j][nPos].substring(2),2) + " "});
                                fTotDeb += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][nPos].substring(2),2));
                            }

                            nPos = FuncoesGlobais.IndexOf(rCampos[j], "AD");
                            if (nPos > -1) {
                                if (LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][nPos].substring(9),2)) > 0) {
                                    String wAD = rCampos[j][nPos].split("@")[1];
                                    sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"Adiantamento","0;;black","", LerValor.FormatNumber(wAD,2) + " "});
                                    fTotDeb += LerValor.StringToFloat(LerValor.FormatNumber(wAD,2));
                                }
                            }
                            
                            nPos = FuncoesGlobais.IndexOf(rCampos[j], "MU");
                            if (nPos > -1) {
                                if (LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][nPos].substring(2),2)) > 0) {
                                    sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {gVar.get("MU"),"0;;black",LerValor.FormatNumber(rCampos[j][nPos].substring(2),2) + " ",""});
                                    fTotCred += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][nPos].substring(2),2));
                                }
                            }

                            nPos = FuncoesGlobais.IndexOf(rCampos[j], "JU");
                            if (nPos > -1) {
                                if (LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][nPos].substring(2),2)) > 0) {
                                    sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {gVar.get("JU"),"0;;black",LerValor.FormatNumber(rCampos[j][nPos].substring(2),2) + " ",""});
                                    fTotCred += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][nPos].substring(2),2));
                                }
                            }

                            nPos = FuncoesGlobais.IndexOf(rCampos[j], "CO");
                            if (nPos > -1) {
                                if (LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][nPos].substring(2),2)) > 0) {
                                    sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {gVar.get("CO"),"0;;black",LerValor.FormatNumber(rCampos[j][nPos].substring(2),2) + " ",""});
                                    fTotCred += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][nPos].substring(2),2));
                                }
                            }

                            nPos = FuncoesGlobais.IndexOf(rCampos[j], "EP");
                            if (nPos > -1) {
                                if (LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][nPos].substring(2),2)) > 0) {
                                    sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {gVar.get("EP"),"0;;black",LerValor.FormatNumber(rCampos[j][nPos].substring(2),2) + " ",""});
                                    fTotCred += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][nPos].substring(2),2));
                                }
                            }
                        } else {
                            sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {tpCampo,"0;;black",LerValor.FormatNumber(rCampos[j][2],2) + " ",(bRetc ? LerValor.FormatNumber(rCampos[j][2],2) + " " : "")});
                            if (bRetc) {fTotCred += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));}
                        }
                    } else if (FuncoesGlobais.IndexOf(rCampos[j], "AD") > -1) {
                        int nPos = FuncoesGlobais.IndexOf(rCampos[j], "AD");
                        if (LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][nPos].split("@")[1],2)) > 0) {
                            String wAD = rCampos[j][nPos].split("@")[1];
                            sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"Adiantamento - " + rCampos[j][nPos].split("@")[0].substring(2),"0;;black","", LerValor.FormatNumber(wAD,2) + " "});
                            fTotDeb += LerValor.StringToFloat(LerValor.FormatNumber(wAD,2));
                        }                        
                    } else if ("DC".equals(rCampos[j][4])) {
                        sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {tpCampo,"0;;black",(bRetc ? LerValor.FormatNumber(rCampos[j][2],2) + " " : ""),LerValor.FormatNumber(rCampos[j][2],2) + " "});
                        fTotDeb += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));
                        if (bRetc) {fTotCred += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));}
                    } else if ("DF".equals(rCampos[j][4])) {
                        sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {tpCampo,"0;;black",LerValor.FormatNumber(rCampos[j][2],2) + " ",(bRetc ? LerValor.FormatNumber(rCampos[j][2],2) + " " : "")});
                        fTotCred += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));
                        if (bRetc) {fTotDeb += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));}
                    } else if ("SG".equals(rCampos[j][4])) {
                        sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {tpCampo,"0;;black",LerValor.FormatNumber(rCampos[j][2],2) + " ",(bRetc ? LerValor.FormatNumber(rCampos[j][2],2) + " " : "")});
                        fTotCred += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));
                        if (bRetc) {fTotDeb += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));}
                    } else {
                        if (LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2)) != 0) {
                            sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {tpCampo,"0;;black",LerValor.FormatNumber(rCampos[j][2],2) + " ",(bRetc ? LerValor.FormatNumber(rCampos[j][2],2) + " " : "")});
                            fTotCred += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));
                            if (bRetc) {fTotDeb += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[j][2],2));}                        
                        }
                    }
                }
                if (!tmpCampo.equalsIgnoreCase("01:1:0000000000:0000:AL")) sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"","0;;black","",""});
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        conn.CloseTable(hrs);

        sql = "SELECT campo, autenticacao FROM avisos WHERE et_aut = :aut ORDER BY autenticacao;";
        hrs = conn.OpenTable(sql, new Object[][] {{"int", "aut", nAut}});

        try {
            while (hrs.next()) {
                String tmpCampo = "" + hrs.getString("campo");
                String tmpAuten = "" + hrs.getString("autenticacao");
                String[][] rCampos = FuncoesGlobais.treeArray(tmpCampo, false);
                String sinq = FuncoesGlobais.DecriptaNome(rCampos[0][10]) + " - " + rCampos[0][7].substring(0, 2) + "/" + rCampos[0][7].substring(2,4) + "/" + rCampos[0][7].substring(4) + " - " + tmpAuten;
                if (!"".equals(sinq.trim())) {
                    java.awt.Font ft = new java.awt.Font("Arial",com.lowagie.text.Font.NORMAL,9);
                    List aLinhas = StringUtils.wrap(sinq, getFontMetrics(ft), 220); // 257);
                    for (Iterator linha = aLinhas.iterator(); linha.hasNext();) { sCampos = FuncoesGlobais.ArraysAdd(sCampos,new String[] {((String) linha.next()).replace("ò", " "),"0;;black","",""}); }
                    //String aLinhas[] = WordWrap.wrap(sinq, 237, getFontMetrics(new java.awt.Font("SansSerif",Font.NORMAL,8))).split("\n");
                    //for (int k=0;k<aLinhas.length;k++) { sCampos = FuncoesGlobais.ArraysAdd(sCampos,new String[] {StringManager.ConvStr(aLinhas[k]).replace("ò", " "),"0;;black","",""}); }
                    if ("CRE".equals(rCampos[0][8])) {
                        sCampos[sCampos.length - 1][2] = LerValor.FormatNumber(rCampos[0][2],2) + " ";
                        sCampos[sCampos.length - 1][3] = "";

                        fTotCred += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[0][2],2));
                    } else {
                        sCampos[sCampos.length - 1][2] = "";
                        sCampos[sCampos.length - 1][3] = LerValor.FormatNumber(rCampos[0][2],2) + " ";
                        fTotDeb += LerValor.StringToFloat(LerValor.FormatNumber(rCampos[0][2],2));
                    }
                    sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"","0;;black","",""});
                }
            }
        } catch (SQLException ex) {}
        conn.CloseTable(hrs);

        if (VariaveisGlobais.marca.trim().equalsIgnoreCase("artvida")) {
            // Colocado aqui para satisfazer o cliente em 04-08-2014
            // Creditos
            if (fTotCred >= 0) {
                sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"Total de Creditos","0;b;black",LerValor.floatToCurrency(fTotCred, 2),""});
            } else {
                sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"Total de Creditos","0;b;black","",LerValor.floatToCurrency(fTotCred, 2)});
            }
            
            // Debitos
            if (fTotDeb >= 0) {
                sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"Total de Débitos","0;b;black","",LerValor.floatToCurrency(fTotDeb, 2)});
            } else {
                sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"Total de Débitos","0;b;black",LerValor.floatToCurrency(fTotDeb, 2),""});
            }
            
            // Total
            String saldoext = LerValor.floatToCurrency(fTotCred - fTotDeb, 2);
            if (saldoext.trim().equalsIgnoreCase("-0,00")) saldoext = "0,00";
            if (fTotCred - fTotDeb >= 0) {
                sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"Liquido a Receber","0;b;black",saldoext,""});
            } else {
                sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"Liquido a Receber","0;b;black","",saldoext});
            }
        } else {       
            sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {new Pad("Total de Créditos .... " + LerValor.floatToCurrency(fTotCred, 2),45).RPad() ,"0;b;black","",""});
            sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {new Pad("Total de Débitos........" + LerValor.floatToCurrency(fTotDeb, 2),45).RPad(),"0;b;black","",""});
            String saldoext = LerValor.floatToCurrency(fTotCred - fTotDeb, 2);
            if (saldoext.trim().equalsIgnoreCase("-0,00")) saldoext = "0,00";
            sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {new Pad("Liquido a Receber..........." + saldoext,45).RPad(),(fTotCred - fTotDeb < 0 ? "0;b;red" : "0;b;black"),"",""});
        }
        
        // 09/05/2012 Implementação dos dados do depósito
        if (dados_prop != null) {
            try {
                if (!dados_prop[0][3].toString().trim().equals("")) {
                    sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"","0;;black","",""});
                    if (dados_prop[3][3].toString().trim().equals("")) sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"Cpf/Cnpj: " + dados_prop[4][3],"0;b;red","",""});
                    sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"Banco: " + dados_prop[0][3],"0;b;red","",""});
                    sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"Agencia: " + dados_prop[1][3],"0;b;red","",""});
                    sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"Conta: " + dados_prop[2][3],"0;b;red","",""});
                    if (!dados_prop[3][3].toString().trim().equals("")) {
                        String aLinhas[] = WordWrap.wrap("Favorecido: " + dados_prop[3][3], 210, getFontMetrics(new java.awt.Font("SansSerif",com.lowagie.text.Font.NORMAL,8))).split("\n");
                        for (int k=0;k<aLinhas.length;k++) { sCampos = FuncoesGlobais.ArraysAdd(sCampos,new String[] {aLinhas[k],"0;b;red","",""}); }                        
                        //sCampos = FuncoesGlobais.ArraysAdd(sCampos, new String[] {"Favorecido: " + dados_prop[3][3],"0;b;red","",""});
                    }
                }
            } catch (Exception e) {}
        }
        
        // 02-03-2023 - Aqui
        String sAut = FuncoesGlobais.StrZero(String.valueOf(nAut).replace(".0", ""),6);

        Extrato bean1 = new Extrato();
        int n = 0;
        // Impressao do header
        // Logo da Imobiliaria
        bean1 = HeaderExtrato(bean1, sAut, rgprp, nomeProp, dataExtrato);

        // limpa linhas
        for (int i=1;i<=40;i++) {bean1.sethist_linhan(i, ""); bean1.sethist_linhan_cor(i,"0;;black");}

        for (int i=0;i<sCampos.length;i++) {
            if (n == 39) {
                lista.add(bean1);
                bean1 = new Extrato();
                bean1 = HeaderExtrato(bean1, sAut, rgprp, nomeProp, dataExtrato);
                n = 0;
            }
            bean1.sethist_linhan(n + 1, sCampos[i][0]);
            bean1.sethist_linhan_cor(n + 1, sCampos[i][1]);
            bean1.sethist_credn(n + 1, sCampos[i][2]);
            bean1.sethist_debn(n + 1, sCampos[i][3]);
            n++;
        }

        if (n == 39) {
            lista.add(bean1);
            bean1 = new Extrato();
            bean1 = HeaderExtrato(bean1, sAut, rgprp, nomeProp, dataExtrato);
            n = 0;
        }
        bean1.sethist_linhan(n + 1,"");
        bean1.sethist_linhan_cor(n + 1, "0;;black");
        n++;

        if (n == 39) {
            lista.add(bean1);
            bean1 = new Extrato();
            bean1 = HeaderExtrato(bean1, sAut, rgprp, nomeProp, dataExtrato);
            n = 0;
        }
        bean1.sethist_linhan(n + 1,"VALOR(ES) LANCADOS");
        bean1.sethist_linhan_cor(n + 1, "0;;blue");
        n++;

        if (n == 39) {
            lista.add(bean1);
            bean1 = new Extrato();
            bean1 = HeaderExtrato(bean1, sAut, rgprp, nomeProp, dataExtrato);
            n = 0;
        }
        bean1.sethist_linhan(n + 1,"--------------------------------------------------------");
        bean1.sethist_linhan_cor(n + 1, "0;;blue");
        n++;

        for (int i=1;i<=cxDados.size();i++) {
            Map<String, Object> cxa = (Map<String, Object>)cxDados.get(i);
            String bLinha = cxa.get("chrel").toString();
        
           if (n == 39) {
               lista.add(bean1);
               bean1 = new Extrato();
               bean1 = HeaderExtrato(bean1, sAut, rgprp, nomeProp, dataExtrato);
               n = 0;
           }

            bean1.sethist_linhan(n + 1,bLinha);
            bean1.sethist_linhan_cor(n + 1, "0;;red");
            n++;
        }

        bean1.setautentica( VariaveisGlobais.dCliente.get("marca").trim() + "ET" + FuncoesGlobais.StrZero(String.valueOf((int)nAut), 7) + "-1" + Dates.DateFormata("ddMMyyyyHHmmss", dataExtrato) + FuncoesGlobais.GravaValores(LerValor.FloatToString(tpagar), 2) + caixa.get("logado").toString().toLowerCase().trim());

        lista.add(bean1);

        // 25-06-2013 - By wellspinto@gmail.com
        JRBeanCollectionDataSource jrds = new JRBeanCollectionDataSource(lista);

        String sFileName = new tempFile("pdf").getsPathNameExt();
        String docName = new tempFile().getTempFileName(sFileName);
        String pathName = new tempFile().getTempPath();
        String FileNamePdf = pathName + docName;

        try {
            Map<String, Object> parametros = new HashMap();
            parametros.put("parameter1", VariaveisGlobais.ExtratoTotal);

            String fileName = "reports/" + VariaveisGlobais.extPrint;
            JasperPrint print = JasperFillManager.fillReport(fileName, parametros, jrds);

            // Create a PDF exporter
            JRExporter exporter = new JRPdfExporter();

            // Configure the exporter (set output file name and print object)
            String outFileName = FileNamePdf;
            exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName);
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);

            // Export the PDF file
            exporter.exportReport();
        } catch (JRException e) {
            e.printStackTrace();
            System.exit(1);
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }

        return FileNamePdf;
    }

    private Extrato HeaderExtrato(Extrato bean1, String barras, String rgprp, String nomeProp, Date dataExtrao) {
        Collections gVar = VariaveisGlobais.dCliente;

        // Impressao do header
        // Logo da Imobiliaria
        bean1.setlogoLocation("resources/logos/extrato/" + VariaveisGlobais.icoExtrato);
        bean1.setnomeProp(rgprp.trim() + " - " + nomeProp.trim());
        bean1.setbarras(barras);

        try {
            if ("TRUE".equals(conn.ReadParameters("ANIVERSARIO").toUpperCase())) {
                String msgNiver = conn.ReadParameters("MSGANIVERSARIO");
                String DtNascProp = conn.ReadFieldsTable(new String[] {"dtnasc"}, "proprietarios", "rgprp = '" + rgprp + "'")[0][3].toString();
                if (DtNascProp != null) {
                    DtNascProp = DtNascProp.substring(0, 10);
                    if (Dates.iMonth(dataExtrao) == Dates.iMonth(Dates.StringtoDate(DtNascProp, "yyyy-MM-dd"))) bean1.setmensagem(msgNiver);
                }
            }
        } catch (SQLException ex) {}

        return bean1;
    }

   public String ImprimeAvisoPDF(int selRow) {
        String registro = tFiles.getValueAt(selRow, 0).toString();
        String tipo = tFiles.getValueAt(selRow, 1).toString();
        String nome = tFiles.getValueAt(selRow, 2).toString();
        Date data = (Date)tFiles.getValueAt(selRow, 3);
        int nAut = Integer.parseInt(tFiles.getValueAt(selRow, 4).toString());        

        String selectCaixa = "select cb.cx_data, cb.cx_hora, cb.cx_logado, " +
        "cb.cx_contrato, cb.cx_rgprp, cb.cx_rgimv, cb.cx_oper, cb.cx_vrdn, " +
        "cb.cx_vrch, cb.cx_chrel, cb.cx_tipopg, cb.cx_doc, cb.cx_ndocs " + 
        "from caixabck cb where cb.cx_doc = 'av' and cb.cx_aut = :aut " + 
        "union select cx.cx_data, cx.cx_hora, cx.cx_logado, cx.cx_contrato, " +
        "cx.cx_rgprp, cx.cx_rgimv, cx.cx_oper, cx.cx_vrdn, cx.cx_vrch, " +
        "cx.cx_chrel, cx.cx_tipopg, cx.cx_doc, cx.cx_ndocs " + 
        "from caixa cx where cx.cx_doc = 'AV' and cx.cx_aut = :reg ;";
        ResultSet rs = conn.OpenTable(selectCaixa, new Object[][] {
            {"int", "aut", nAut}, 
            {"int", "reg", nAut}
        });
        
        int pos = 1; BigDecimal _total = new BigDecimal("0");
        Map<Integer, Object> cxDados = new HashMap<Integer, Object>();
        try {
            while (rs.next()) {
                Date CX_DATA = null; try { CX_DATA = rs.getDate("cx_data"); } catch (SQLException e) {}
                String CX_HORA = null; try { CX_HORA = rs.getString("cx_hora"); } catch (SQLException e) {}
                String CX_LOGADO = null; try { CX_LOGADO = rs.getString("cx_logado"); } catch (SQLException e) {}
                String CX_CONTRATO = null; try { CX_CONTRATO = rs.getString("cx_contrato"); } catch (SQLException e) {}
                String CX_RGPRP = null; try { CX_RGPRP = rs.getString("cx_rgprp"); } catch (SQLException e) {}
                String CX_RGIMV = null; try { CX_RGIMV = rs.getString("cx_rgimv"); } catch (SQLException e) {}
                String CX_OPER = null; try { CX_OPER = rs.getString("cx_oper"); } catch (SQLException e) {}
                BigDecimal CX_VRDN = null; try { CX_VRDN = rs.getBigDecimal("cx_vrdn"); } catch (SQLException e) {}
                BigDecimal CX_VRCH = null; try { CX_VRCH = rs.getBigDecimal("cx_vrch"); } catch (SQLException e) {}
                String CX_CHREL = null; try { CX_CHREL = rs.getString("cx_chrel"); } catch (SQLException e) {}
                String CX_TIPOPG = null; try { CX_TIPOPG = rs.getString("cx_tipopg"); } catch (SQLException e) {}
                String CX_DOC = null; try { CX_DOC = rs.getString("cx_doc"); } catch (SQLException e) {}
                int CX_NDOCS = -1; try { CX_NDOCS = rs.getInt("cx_ndocs"); } catch (SQLException e) {}
                
                Map<String, Object> caixa = new HashMap<String, Object>();
                caixa.put("data", CX_DATA);
                caixa.put("hora", CX_HORA);
                caixa.put("logado", CX_LOGADO);
                caixa.put("contrato", CX_CONTRATO);
                caixa.put("rgprp", CX_RGPRP);
                caixa.put("rgimv", CX_RGIMV);
                caixa.put("oper", CX_OPER);
                caixa.put("vrdn", CX_VRDN);
                caixa.put("vrch", CX_VRCH);
                caixa.put("chrel", CX_CHREL);
                caixa.put("tipopg", CX_TIPOPG);
                caixa.put("doc", CX_DOC);
                caixa.put("ndocs", CX_NDOCS);
                
                cxDados.put(pos++, caixa);
                _total = _total.add(CX_VRDN).add(CX_VRCH);
            }
        } catch (SQLException sqlEx) {}
        conn.CloseTable(rs);
        if (cxDados.size() == 0) {
            JOptionPane.showMessageDialog(this, "Este extrato não existe dento do caixa para ser re-impresso!");
            return null;
        }
        Map<String, Object> caixa = ((Map<String, Object>)cxDados.get(1));
        String ValorAviso = LerValor.floatToCurrency(_total.floatValue(),2);
        String ValorRec = ValorAviso;
                
        String _data = caixa.get("data").toString().substring(0,10);
        String _hora = caixa.get("hora").toString();        
        Date dataAviso = Dates.StringtoDate(_data + " " + _hora, "yyyy-MM-dd HH:mm:ss");
        
        // Pega dados do Aviso
        Object[][] aAviso = null;
        try {aAviso = conn.ReadFieldsTable(new String[] {"DecriptaNome(RetAvDescRid2(campo)) as texto", "RetAvTipoRid2(campo) as crdb"}, "avisos", "autenticacao = :aut", new Object[][] {{"int", "aut", nAut}}); } catch (SQLException e) {}
        String texto = StringManager.ConvStr(aAviso[0][3].toString()).toLowerCase();
        try {texto = texto.substring(0,1).toUpperCase() + texto.substring(1);} catch (Exception e) {}
        String crdb = StringManager.ConvStr(aAviso[1][3].toString());
                
        // Dados do Aviso
        String idNome = registro + " - " + nome;
        String idAviso = "AVISO " + tipo + " - " + (crdb.trim().toLowerCase().equalsIgnoreCase("cre") ? "CREDITO" : "DEBITO");
        
        float[] columnWidths = {};
        Collections gVar = VariaveisGlobais.dCliente;
        jPDF pdf = new jPDF();

        String sFileName = new tempFile("pdf").getsPathNameExt();
        pdf.setPathName(new tempFile().getTempPath());
        String docName = new tempFile().getTempFileName(sFileName);
        pdf.setDocName(docName);
       
        BaseFont bf = null;
        try {
            bf = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.WINANSI, BaseFont.EMBEDDED);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        com.itextpdf.text.Font font = new com.itextpdf.text.Font(bf, 9, Font.PLAIN);

        pdf.open();
        
        // Logo
        com.itextpdf.text.Image img;
        try {
            img = com.itextpdf.text.Image.getInstance("resources/logos/boleta/" + VariaveisGlobais.dCliente.get("marca").trim() + ".gif");
            img.setAlignment(Element.ALIGN_LEFT);        
            pdf.doc_add(img);
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        Paragraph p;
        
        p = pdf.print(gVar.get("empresa"), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        if (!gVar.get("cnpj").trim().equals("") || gVar.get("cnpj") != null) {
            p = pdf.print(gVar.get("tipodoc"), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT,pdf.BLACK);
            pdf.doc_add(p);
        }
        p = pdf.print(gVar.get("endereco") + ", " + gVar.get("numero") + " " + gVar.get("complemento"), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print(gVar.get("bairro") + " - " + gVar.get("cidade") + " - " + gVar.get("estado") + " - " + gVar.get("cep"), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print("Tel/Fax:" + gVar.get("telefone"), pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print("\n", pdf.HELVETICA, 9, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
        pdf.doc_add(p);
        p = pdf.print(idAviso, pdf.HELVETICA, 12, pdf.BOLD, pdf.CENTER, pdf.BLUE);
        pdf.doc_add(p);
        p = pdf.print("\n", pdf.HELVETICA, 9, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
        pdf.doc_add(p);
        
        p = pdf.print(idNome, pdf.HELVETICA, 9, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
        pdf.doc_add(p);
        
        columnWidths = new float[] {37, 63 };
        PdfPTable table = new PdfPTable(columnWidths);
        table.setHeaderRows(0);
        table.setWidthPercentage(100);
        font = new com.itextpdf.text.Font(bf, 9, Font.PLAIN);
        font.setColor(BaseColor.BLACK);
        
        PdfPCell cell1 = new PdfPCell(new Phrase("CAIXA: " + VariaveisGlobais.usuario,font));
        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell1.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell1);
        PdfPCell cell2 = new PdfPCell(new Phrase("Data/Hora: " + Dates.DateFormata("dd/MM/yyyy HH:mm", dataAviso),font));
        cell2.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell2.setBorder(Rectangle.NO_BORDER);
        table.addCell(cell2);
        table.completeRow();
        pdf.doc_add(table);

        p = pdf.print("", pdf.HELVETICA, 9, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
        LineSeparator l = new LineSeparator();
        l.setPercentage(100f);
        p.add(new Chunk(l));
        pdf.doc_add(p);

        columnWidths = new float[] {100};
        table = new PdfPTable(columnWidths);
        table.setHeaderRows(0);
        table.setWidthPercentage(100);
        // Dados do aviso
        font.setColor(BaseColor.BLACK);
        cell1 = new PdfPCell(new Phrase(texto,font));
        cell1.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);
        cell1.setBorder(Rectangle.NO_BORDER);
        cell1.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell1);
        table.completeRow();
        pdf.doc_add(table);
        
        columnWidths = new float[] {70, 30};
        table = new PdfPTable(columnWidths);
        table.setHeaderRows(0);
        table.setWidthPercentage(100);
        font.setColor(BaseColor.BLACK);
        cell1 = new PdfPCell(new Phrase("",font));
        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell1.setBorder(Rectangle.NO_BORDER);
        cell1.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell1);
        cell2 = new PdfPCell(new Phrase("==========", font));
        cell2.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell2.setBorder(Rectangle.NO_BORDER);
        cell2.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell2);

        font.setColor(BaseColor.BLACK);
        cell1 = new PdfPCell(new Phrase("Total do Recibo",font));
        cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell1.setBorder(Rectangle.NO_BORDER);
        cell1.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell1);
        cell2 = new PdfPCell(new Phrase(ValorRec, font));
        cell2.setHorizontalAlignment(Element.ALIGN_RIGHT);
        cell2.setBorder(Rectangle.NO_BORDER);
        cell2.setBackgroundColor(BaseColor.WHITE);
        table.addCell(cell2);
        table.completeRow();
        pdf.doc_add(table);

        p = pdf.print("\n", pdf.HELVETICA, 9, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
        pdf.doc_add(p);

        font = new com.itextpdf.text.Font(bf, 8, Font.PLAIN);
        if (nAut > 0) {
            p = pdf.print("__________ VALOR(ES) LANCADOS __________", pdf.HELVETICA, 7, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
            pdf.doc_add(p);

            for (int i=1;i<=cxDados.size();i++) {
                Map<String, Object> cxa = (Map<String, Object>)cxDados.get(i);
                String bLinha = cxa.get("chrel").toString();
                p = pdf.print(bLinha, pdf.HELVETICA, 6, pdf.NORMAL, pdf.RIGHT, pdf.BLACK);
                pdf.doc_add(p);
            }
            
            p = pdf.print("\n", pdf.HELVETICA, 6, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
            pdf.doc_add(p);

            l = new LineSeparator();
            l.setPercentage(100f);
            p = pdf.print("", pdf.HELVETICA, 7, pdf.BOLDITALIC, pdf.LEFT, pdf.BLACK);
            p.add(new Chunk(l));
            pdf.doc_add(p);

            // Imprimir Autenticação
            p = pdf.print(VariaveisGlobais.dCliente.get("marca").trim() + "AV" +
                    FuncoesGlobais.StrZero(String.valueOf((int)nAut).replace(".0", ""), 7) + "-1" + 
                    Dates.DateFormata("ddMMyyyyHHmmss", dataAviso) + 
                    FuncoesGlobais.GravaValores(ValorRec, 2) + 
                    VariaveisGlobais.usuario, pdf.HELVETICA, 7, pdf.NORMAL, pdf.CENTER, pdf.BLACK);
            pdf.doc_add(p);
            
            PdfContentByte cb = pdf.writer().getDirectContent();
            BarcodeInter25 code25 = new BarcodeInter25();
            String barra = FuncoesGlobais.StrZero(String.valueOf((int)nAut).replace(".0", ""),16);
            code25.setCode(barra);
            code25.setChecksumText(true);
            code25.setFont(null);
            com.itextpdf.text.Image cdbar = code25.createImageWithBarcode(cb, null, null);
            cdbar.setAlignment(Element.ALIGN_CENTER);
            pdf.doc_add(cdbar);            
        }

        // Pula linhas (6) / corta papel
        for (int k=1;k<=6;k++) { 
            p = pdf.print("\n", pdf.HELVETICA, 6, pdf.NORMAL, pdf.LEFT, pdf.BLACK);
            pdf.doc_add(p);
        }
        
        pdf.close();
        
        String rPathName = pdf.getPathName();       
        pdf.setPathName("");
        pdf.setDocName("");
        return rPathName + docName;       
   }   
   
   private String imprimeBoletaPDF(int selRow) {       
        String contrato = tFiles.getValueAt(selRow, 0).toString();
        String vencimento = tFiles.getValueAt(selRow, 3).toString();
        
        String retorno = "";        
       
        Object[][] dadosBoleta = null;
        try {
            dadosBoleta = conn.ReadFieldsTable(new String[] {"rgprp", "rgimv", "dtvencbol", "dtgeracao", "nnumero"}, "recibo","contrato = :contrato AND dtvencimento = :dtvencto", new Object[][] {
                {"string","contrato",contrato},
                {"date","dtvencto", Dates.StringtoDate(vencimento, "yyyy-MM-dd")}
            });
        } catch (Exception e) {}
        
        if (dadosBoleta == null) return retorno;
        String rgprp = dadosBoleta[0][3].toString();
        String rgimv = dadosBoleta[1][3].toString();
        String vencto = Dates.StringtoString(tFiles.getValueAt(selRow, 3).toString(), "yyyy-MM-dd","dd-MM-yyyy");
        String vectoBol = null;
        try { vectoBol = Dates.StringtoString(dadosBoleta[2][3].toString(), "yyyy-MM-dd","dd-MM-yyyy"); } catch (Exception es) {}
        String dtgeracao = null;
        try { dtgeracao = Dates.StringtoString(dadosBoleta[3][3].toString(), "yyyy-MM-dd","dd-MM-yyyy");} catch (Exception ex) {}
        if (dtgeracao == null) dtgeracao = Dates.DateFormata("dd-MM-yyyy", new Date());
        String nnumero = !dadosBoleta[4][3].toString().substring(0,3).equalsIgnoreCase("000") ? dadosBoleta[4][3].toString().substring(3) : dadosBoleta[4][3].toString();
        
        Boleta Bean1 = null;
        try {
            Bean1 = new CentralBoletas().CreateBoleta(rgprp, rgimv, contrato, vencto, vectoBol, new String[] {nnumero, dtgeracao});

            List<Boleta> lista = new ArrayList<Boleta>();
            lista.add(Bean1);

            String sFileName = new tempFile("pdf").getsPathNameExt();
            String docName = new tempFile().getTempFileName(sFileName);
            String pathName = new tempFile().getTempPath();
            String FileNamePdf = pathName + docName;

            JRDataSource jrds = new JRBeanCollectionDataSource(lista);
            try {
                String fileName = "reports/Boletos.jasper";
                JasperPrint print = JasperFillManager.fillReport(fileName, null, jrds);

                // Create a PDF exporter
                JRExporter exporter = new JRPdfExporter();

                // Configure the exporter (set output file name and print object)
                String outFileName = FileNamePdf;
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, outFileName);
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, print);

                // Export the PDF file
                exporter.exportReport();
                
                retorno = FileNamePdf;
            } catch (JRException e) {
                e.printStackTrace();
                System.exit(1);
            } catch (Exception e) {
                e.printStackTrace();
                System.exit(1);
            }
        } catch (Exception e) {}
       
        return retorno;
   }
}
