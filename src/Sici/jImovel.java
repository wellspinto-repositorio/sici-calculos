package Sici;

import Funcoes.Dates;
import Funcoes.Db;
import Funcoes.FuncoesGlobais;
import Funcoes.LerValor;
import Funcoes.LimitedTextField;
import Funcoes.Pad;
import Funcoes.ResizeImageIcon;
import Funcoes.StreamFile;
import Funcoes.VariaveisGlobais;
import Protocolo.Calculos;
import Sici.Locatarios.BuscaCep;
import java.awt.AWTKeyStroke;
import java.awt.Dimension;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.Date;
import java.util.HashSet;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.UIDefaults;

public class jImovel extends javax.swing.JDialog {
    Db conn = VariaveisGlobais.conexao;
    ResultSet pResult = conn.OpenTable("SELECT * FROM imoveis ORDER BY rgprp, rgimv;", ResultSet.CONCUR_UPDATABLE, null);
    private boolean bNew = false;

    /** Creates new form jNewImovel */
    public jImovel(java.awt.Frame parent, boolean modal) throws SQLException {
        super(parent, modal);
        initComponents();

        //Centraliza a janela.
        Dimension dimension = this.getToolkit().getScreenSize();
        int x = (int) (dimension.getWidth() - this.getSize().getWidth() ) / 2;
        int y = (int) (dimension.getHeight() - this.getSize().getHeight()) / 2;
        this.setLocation(x,y);

        // Colocando enter para pular de campo
        HashSet conj = new HashSet(this.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));
        conj.add(AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_ENTER, 0));
        this.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, conj);

        if (!"".equals(VariaveisGlobais.rgimv)) {
            MoveToImovel(VariaveisGlobais.rgprp, VariaveisGlobais.rgimv);
        } else {
            LimpaDados();
            iBtIncluir.setEnabled(true);
            iBtCarteira.setEnabled(false);
            iBtGravar.setEnabled(false);
            iBtRetornar.setEnabled(true);
            jbtBaixar.setEnabled(false);
            //iBtExcluir.setEnabled(true);
        }

        iTipoImv.requestFocus();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        iRgimv = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        iTipoImv = new javax.swing.JComboBox();
        iUrbRural = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        iSituacao = new javax.swing.JComboBox();
        iEndereco = new LimitedTextField(60);
        jLabel5 = new javax.swing.JLabel();
        iNumero = new LimitedTextField(10);
        jLabel6 = new javax.swing.JLabel();
        iCplto = new LimitedTextField(15);
        iBairro = new LimitedTextField(25);
        jLabel8 = new javax.swing.JLabel();
        iCidade = new LimitedTextField(25);
        iCodCidade = new LimitedTextField(4);
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        iCep = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        iDescricao = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        iMsg = new LimitedTextField(60);
        jLabel14 = new javax.swing.JLabel();
        iObs = new LimitedTextField(60);
        iBtIncluir = new javax.swing.JButton();
        iBtCarteira = new javax.swing.JButton();
        iBtGravar = new javax.swing.JButton();
        iBtRetornar = new javax.swing.JButton();
        jbtBaixar = new javax.swing.JButton();
        iBtExcluir = new javax.swing.JButton();
        jbtBuscaCep = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        iMatriculas = new javax.swing.JComboBox();
        iReter = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPaneFotos = new javax.swing.JScrollPane();
        jctCampos = new javax.swing.JPanel();
        ifoto_adc = new javax.swing.JButton();
        ifoto_del = new javax.swing.JButton();
        ifoto_tras = new javax.swing.JButton();
        ifoto_frente = new javax.swing.JButton();
        mtDel = new javax.swing.JButton();
        iEstado = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(".:: Imóvel do Proprietário ::.");
        setAlwaysOnTop(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(0, 31, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("RgImv:");

        jLabel4.setForeground(new java.awt.Color(0, 31, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Endereço:");

        jLabel7.setForeground(new java.awt.Color(0, 31, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Bairro:");

        jLabel11.setForeground(new java.awt.Color(0, 31, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Código:");

        iRgimv.setEnabled(false);

        jLabel2.setForeground(new java.awt.Color(0, 31, 255));
        jLabel2.setText("Tipo:");

        iTipoImv.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Residencial", "Não Residencial", "Comercial" }));

        iUrbRural.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Urbano", "Rural" }));

        jLabel3.setForeground(new java.awt.Color(0, 31, 255));
        jLabel3.setText("Situação:");

        iSituacao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ação", "Pendencia", "Reservado" }));

        iEndereco.setName("iEndereco"); // NOI18N

        jLabel5.setForeground(new java.awt.Color(0, 31, 255));
        jLabel5.setText("N°.:");

        iNumero.setName("iNumero"); // NOI18N

        jLabel6.setForeground(new java.awt.Color(0, 31, 255));
        jLabel6.setText("Cplto:");

        iCplto.setName("iCplto"); // NOI18N

        iBairro.setName("iBairro"); // NOI18N

        jLabel8.setForeground(new java.awt.Color(0, 31, 255));
        jLabel8.setText("Cidade:");

        iCidade.setName("iCidade"); // NOI18N

        jLabel9.setForeground(new java.awt.Color(0, 31, 255));
        jLabel9.setText("UF:");

        jLabel10.setForeground(new java.awt.Color(0, 31, 255));
        jLabel10.setText("Cep:");

        try {
            iCep.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#####-###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel12.setBackground(new java.awt.Color(128, 161, 254));
        jLabel12.setFont(new java.awt.Font("SansSerif", 3, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Especificações do Imóvel");
        jLabel12.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        jLabel12.setOpaque(true);

        jScrollPane1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        iDescricao.setColumns(20);
        iDescricao.setLineWrap(true);
        iDescricao.setRows(5);
        jScrollPane1.setViewportView(iDescricao);

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 18, 255), 2, true));
        jPanel2.setOpaque(false);

        jLabel13.setForeground(new java.awt.Color(0, 31, 255));
        jLabel13.setText("Menssagem:");

        jLabel14.setForeground(new java.awt.Color(0, 31, 255));
        jLabel14.setText("Observação:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iObs)
                    .addComponent(iMsg))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iObs, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );

        iBtIncluir.setText("Incluir");
        iBtIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iBtIncluirActionPerformed(evt);
            }
        });

        iBtCarteira.setText("Carteira");

        iBtGravar.setText("Gravar");
        iBtGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iBtGravarActionPerformed(evt);
            }
        });

        iBtRetornar.setText("Retornar");
        iBtRetornar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iBtRetornarActionPerformed(evt);
            }
        });

        jbtBaixar.setText("Baixar Imóvel");
        jbtBaixar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtBaixarActionPerformed(evt);
            }
        });

        iBtExcluir.setText("Excluir");
        iBtExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iBtExcluirActionPerformed(evt);
            }
        });

        jbtBuscaCep.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Figuras/find.png"))); // NOI18N
        jbtBuscaCep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtBuscaCepActionPerformed(evt);
            }
        });

        jLabel15.setForeground(new java.awt.Color(0, 31, 255));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Matriculas:");

        iReter.setForeground(new java.awt.Color(0, 31, 255));
        iReter.setText("Quando vazio reter as taxas.");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(0, 0, 204), null), "Fotos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), java.awt.Color.blue)); // NOI18N

        jScrollPaneFotos.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPaneFotos.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout jctCamposLayout = new javax.swing.GroupLayout(jctCampos);
        jctCampos.setLayout(jctCamposLayout);
        jctCamposLayout.setHorizontalGroup(
            jctCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1320, Short.MAX_VALUE)
        );
        jctCamposLayout.setVerticalGroup(
            jctCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jScrollPaneFotos.setViewportView(jctCampos);

        ifoto_adc.setText("Adicionar");
        ifoto_adc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ifoto_adcActionPerformed(evt);
            }
        });

        ifoto_del.setText("Excluir");
        ifoto_del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ifoto_delActionPerformed(evt);
            }
        });

        ifoto_tras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Figuras/previous.png"))); // NOI18N

        ifoto_frente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Figuras/next.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPaneFotos, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ifoto_adc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ifoto_del, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(ifoto_tras, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ifoto_frente, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ifoto_adc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ifoto_del)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ifoto_tras)
                            .addComponent(ifoto_frente)))
                    .addComponent(jScrollPaneFotos, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        mtDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Figuras/stop.png"))); // NOI18N
        mtDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mtDelActionPerformed(evt);
            }
        });

        try {
            iEstado.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("UU")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(iEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtBuscaCep, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(iNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(iCplto))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(iBairro, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(iCidade))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(iCodCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(iEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(iCep, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(iRgimv, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(iTipoImv, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(iUrbRural, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(iSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(iMatriculas, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addComponent(mtDel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(iReter, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(iBtIncluir, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(iBtExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(iBtCarteira, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtBaixar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(iBtGravar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(iBtRetornar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel11, jLabel4, jLabel7});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iRgimv, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iTipoImv, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iUrbRural, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(iEndereco, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(iNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(iCplto, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jbtBuscaCep, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iBairro, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iCep, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iCodCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iMatriculas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iReter)
                    .addComponent(mtDel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iBtIncluir, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iBtExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iBtCarteira, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtBaixar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iBtRetornar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iBtGravar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel11, jLabel4, jLabel7});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {iCodCidade, iEstado});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String LerLegendas() {
        ResultSet lg = conn.OpenTable("SELECT CART_CODIGO, CART_DESCR FROM lancart WHERE CART_TAXA = '1' ORDER BY CART_CODIGO;", null);
        String outTxt = "<html><center>T A X A S</center><br>";
        try {
            while (lg.next()) {
                outTxt += lg.getString("CART_CODIGO") + " - " + lg.getString("CART_DESCR") + "<br>";
            }
            outTxt += "</html>";
        } catch (Exception e) {}
        conn.CloseTable(lg);
        return outTxt;
    }
    
    private void iBtIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iBtIncluirActionPerformed
        LimpaDados();
        iSituacao.getModel().setSelectedItem("Vazio");
        bNew = true;
        iBtIncluir.setEnabled(false);
        iBtCarteira.setEnabled(false);
        iBtGravar.setEnabled(true);
        iBtRetornar.setEnabled(true);
        //iBtExcluir.setEnabled(false);
        jbtBaixar.setEnabled(false);

        iTipoImv.requestFocus();
    }//GEN-LAST:event_iBtIncluirActionPerformed

    private void iBtGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iBtGravarActionPerformed
        if (iTipoImv.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(null, "Campo 'TIPO DO IMOVEL' não pode ser vazio!!!", "Erro", JOptionPane.ERROR_MESSAGE);
            iTipoImv.requestFocus();
            return;
        }

        if (iUrbRural.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(null, "Campo 'URBANO/RURAL' não pode ser vazio!!!", "Erro", JOptionPane.ERROR_MESSAGE);
            iUrbRural.requestFocus();
            return;
        }

        if (iSituacao.getModel().getSelectedItem().toString().trim().length() == 0) {
            JOptionPane.showMessageDialog(null, "Campo 'SITUAÇÃO DO IMÓVEL' não pode ser vazio!!!", "Erro", JOptionPane.ERROR_MESSAGE);
            iSituacao.requestFocus();
            return;
        }

        if (iEndereco.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(null, "Campo 'ENDEREÇO' não pode ser vazio!!!", "Erro", JOptionPane.ERROR_MESSAGE);
            iEndereco.requestFocus();
            return;
        }

        if (iNumero.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(null, "Campo 'NUMERO' não pode ser vazio!!!", "Erro", JOptionPane.ERROR_MESSAGE);
            iNumero.requestFocus();
            return;
        }

        if (iBairro.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(null, "Campo 'BAIRRO' não pode ser vazio!!!", "Erro", JOptionPane.ERROR_MESSAGE);
            iBairro.requestFocus();
            return;
        }

        if (iCidade.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(null, "Campo 'CIDADE' não pode ser vazio!!!", "Erro", JOptionPane.ERROR_MESSAGE);
            iCidade.requestFocus();
            return;
        }

        if (iCodCidade.getText().trim().length() < 4) {
            JOptionPane.showMessageDialog(null, "Campo 'CODIGO DA CIDADE' não pode ser vazio ou MENOR de 4(quatro) dígitos!!!", "Erro", JOptionPane.ERROR_MESSAGE);
            iCodCidade.requestFocus();
            return;
        }

        if (iEstado.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(null, "Campo 'ESTADO' nào pode ser vazio!!!", "Erro", JOptionPane.ERROR_MESSAGE);
            iEstado.requestFocus();
            return;
        }

        if (iCep.getText().trim().replace("-", "").length() == 0) {
            JOptionPane.showMessageDialog(null, "Campo 'CEP' nào pode ser vazio!!!", "Erro", JOptionPane.ERROR_MESSAGE);
            iCep.requestFocus();
            return;
        }

        try {
            GravarDados();
        } catch (SQLException ex) { ex.printStackTrace();}

        bNew = false;

        iBtIncluir.setEnabled(true);
        iBtCarteira.setEnabled(true);
        iBtGravar.setEnabled(true);
        iBtRetornar.setEnabled(true);
        //iBtExcluir.setEnabled(true);
        jbtBaixar.setEnabled(true);
    }//GEN-LAST:event_iBtGravarActionPerformed

    private void iBtRetornarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iBtRetornarActionPerformed
        if (bNew) {
            try {
                LerDados(false);
                iBtIncluir.setEnabled(true);
                iBtCarteira.setEnabled(true);
                iBtGravar.setEnabled(true);
                iBtRetornar.setEnabled(true);
                //iBtExcluir.setEnabled(true);
                jbtBaixar.setEnabled(true);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            bNew = false;
        } else this.dispose();
    }//GEN-LAST:event_iBtRetornarActionPerformed

    private void jbtBaixarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtBaixarActionPerformed
        if ("VAZIO".equals(iSituacao.getSelectedItem().toString().toUpperCase().trim())) return;

        VariaveisGlobais.situacao = "";
        jBaixaImovel oBaixa = null;
        oBaixa = new jBaixaImovel(null, true);
        oBaixa.setVisible(true);
        if (VariaveisGlobais.situacao.equalsIgnoreCase("VAZIO")) {
            iSituacao.getModel().setSelectedItem("VAZIO");
            try {
                pResult.updateString("situacao",iSituacao.getModel().getSelectedItem().toString());
                pResult.updateRow();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

            conn.CommandExecute("UPDATE locatarios set fiador1uf = 'X' WHERE rgimv = '"  + iRgimv.getText() + "';");
            
            // Grava informacoes de carteira
            String[] campos_carteira = {"rgprp","rgimv","contrato","campo","dtinicio","dttermino","dtultrecebimento","dtvencimento","vrseguro","pcseguro","dtseguro"};
            String twhere = FuncoesGlobais.Subst("rgprp = '&1.' AND rgimv = '&2.'",new String[] {VariaveisGlobais.rgprp, VariaveisGlobais.rgimv});
            Object[][] dados_carteira = null;
            try {dados_carteira = conn.ReadFieldsTable(campos_carteira, "carteira", twhere);} catch (Exception e) {}
            if (dados_carteira != null) {
                String auxCampos = dados_carteira[3][3] + "," + dados_carteira[4][3] + "," + dados_carteira[5][3] + "," + dados_carteira[6][3] + "," + dados_carteira[7][3] + "," + dados_carteira[8][3] + "," + dados_carteira[9][3] + "," + dados_carteira[10][3];
                String auxSql = "INSERT INTO auxiliar (conta, rgprp, rgimv, contrato, campo) VALUES ('&1.','&2.','&3.','&4.','&5.')";
                auxSql = FuncoesGlobais.Subst(auxSql, new String[] {
                    "CAR",dados_carteira[0][3].toString(),dados_carteira[1][3].toString(), dados_carteira[2][3].toString(), auxCampos
                });
                conn.CommandExecute(auxSql);
            }
            conn.CommandExecute("DELETE FROM carteira WHERE rgimv = '" + iRgimv.getText() + "';");
        }
    }//GEN-LAST:event_jbtBaixarActionPerformed

    private void jbtBuscaCepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtBuscaCepActionPerformed
        BuscaCep oCep = new BuscaCep(null, true);
        oCep.setVisible(true);

        Object[] dados;
        dados = oCep.dados;
        oCep = null;

        if (dados != null) {
            iEndereco.setText(dados[0].toString() + " " + dados[1].toString());
            iBairro.setText(dados[2].toString());
            iCidade.setText(dados[3].toString());
            iEstado.setText(dados[4].toString());
            iCep.setText(dados[5].toString());

            iNumero.requestFocus();
        }
    }//GEN-LAST:event_jbtBuscaCepActionPerformed

    private void iBtExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iBtExcluirActionPerformed
        //if ("VAZIO".equals(iSituacao.getSelectedItem().toString().toUpperCase().trim())) return;

        String[] sql;
        Object[] options = { "Sim", "Não" };
        int n = JOptionPane.showOptionDialog(this,
                "Deseja excluir este imóvel ? \nIra apagar todas as informações...\nSem retorno.",
                "Atenção", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if (n == JOptionPane.YES_OPTION) {
            sql = new String[] {
                //"INSERT INTO `jgeral_excluidos`.`auxiliar` SELECT * FROM `auxiliar` WHERE rgimv = '" + iRgimv.getText() + "';",
                "DELETE FROM `auxiliar` WHERE rgimv = '" + iRgimv.getText() + "';",
                
                //"INSERT INTO `jgeral_excluidos`.`avisos` SELECT * FROM `avisos` WHERE registro = '" + iRgimv.getText() + "';",
                "DELETE FROM `avisos` WHERE registro = '" + iRgimv.getText() + "';",

                //"INSERT INTO `jgeral_excluidos`.`caixa` SELECT * FROM `caixa` WHERE cx_rgimv = '" + iRgimv.getText() + "';",
                "DELETE FROM `caixa` WHERE cx_rgimv = '" + iRgimv.getText() + "';",
                
                //"INSERT INTO `jgeral_excluidos`.`caixabck` SELECT * FROM `caixabck` WHERE cx_rgimv = '" + iRgimv.getText() + "';",
                "DELETE FROM `caixabck` WHERE cx_rgimv = '" + iRgimv.getText() + "';",
                
                //"INSERT INTO `jgeral_excluidos`.`carteira` SELECT * FROM `carteira` WHERE rgimv = '" + iRgimv.getText() + "';",
                "DELETE FROM `carteira` WHERE rgimv = '" + iRgimv.getText() + "';",
                
                //"INSERT INTO `jgeral_excluidos`.`descontos` SELECT * FROM `descontos` WHERE rgimv = '" + iRgimv.getText() + "';",
                "DELETE FROM `descontos` WHERE rgimv = '" + iRgimv.getText() + "';",
                
                //"INSERT INTO `jgeral_excluidos`.`diferenca` SELECT * FROM `diferenca` WHERE rgimv = '" + iRgimv.getText() + "';",
                "DELETE FROM `diferenca` WHERE rgimv = '" + iRgimv.getText() + "';",

                //"INSERT INTO `jgeral_excluidos`.`divisao` SELECT * FROM `divisao` WHERE rgimv = '" + iRgimv.getText() + "';",
                "DELETE FROM `divisao` WHERE rgimv = '" + iRgimv.getText() + "';",

                //"INSERT INTO `jgeral_excluidos`.`extrato` SELECT * FROM `extrato` WHERE rgimv = '" + iRgimv.getText() + "';",
                "DELETE FROM `extrato` WHERE rgimv = '" + iRgimv.getText() + "';",

                //"INSERT INTO `jgeral_excluidos`.`fiadores` SELECT * FROM `fiadores` WHERE rgimv = '" + iRgimv.getText() + "';",
                "DELETE FROM `fiadores` WHERE rgimv = '" + iRgimv.getText() + "';",

                //"INSERT INTO `jgeral_excluidos`.`imoveis` SELECT * FROM `imoveis` WHERE rgimv = '" + iRgimv.getText() + "';",
                "DELETE FROM `imoveis` WHERE rgimv = '" + iRgimv.getText() + "';",

                //"INSERT INTO `jgeral_excluidos`.`locatarios` SELECT * FROM `locatarios` WHERE rgimv = '" + iRgimv.getText() + "';",
                "DELETE FROM `locatarios` WHERE rgimv = '" + iRgimv.getText() + "';",

                //"INSERT INTO `jgeral_excluidos`.`multa` SELECT * FROM `multa` WHERE rgimv = '" + iRgimv.getText() + "';",
                "DELETE FROM `multa` WHERE rgimv = '" + iRgimv.getText() + "';",

                //"INSERT INTO `jgeral_excluidos`.`recibo` SELECT * FROM `recibo` WHERE rgimv = '" + iRgimv.getText() + "';",
                "DELETE FROM `recibo` WHERE rgimv = '" + iRgimv.getText() + "';",

                //"INSERT INTO `jgeral_excluidos`.`retencao` SELECT * FROM `retencao` WHERE rgimv = '" + iRgimv.getText() + "';",
                "DELETE FROM `retencao` WHERE rgimv = '" + iRgimv.getText() + "';",

                //"INSERT INTO `jgeral_excluidos`.`seguros` SELECT * FROM `seguros` WHERE rgimv = '" + iRgimv.getText() + "';",
                "DELETE FROM `seguros` WHERE rgimv = '" + iRgimv.getText() + "';"
            };
            
            for (String nsql : sql) {
                try {conn.CommandExecute(nsql);} catch (Exception e) {e.printStackTrace();}
            }
            JOptionPane.showMessageDialog(this, "Imovel excluido!!!");
            this.dispose();
        }
        
//        VariaveisGlobais.situacao = "";
//        jBaixaImovel oBaixa = null;
//        oBaixa = new jBaixaImovel(null, true);
//        oBaixa.setVisible(true);
//        if ("VAZIO".equals(VariaveisGlobais.situacao)) {
//            iSituacao.getModel().setSelectedItem("DESATIVADO");
//            try {
//                pResult.updateString("situacao",iSituacao.getModel().getSelectedItem().toString());
//                pResult.updateRow();
//            } catch (SQLException ex) {
//                ex.printStackTrace();
//            }
//
//            conn.CommandExecute("UPDATE locatarios set fiador1uf = 'X' WHERE rgimv = '"  + iRgimv.getText() + "';");
//            
//            // Grava informacoes de carteira
//            String[] campos_carteira = {"rgprp","rgimv","contrato","campo","dtinicio","dttermino","dtultrecebimento","dtvencimento","vrseguro","pcseguro","dtseguro"};
//            String twhere = FuncoesGlobais.Subst("rgprp = '&1.' AND rgimv = '&2.'",new String[] {VariaveisGlobais.rgprp, VariaveisGlobais.rgimv});
//            String[][] dados_carteira = null;
//            try {dados_carteira = conn.LerCamposTabela(campos_carteira, "carteira", twhere);} catch (Exception e) {}
//            if (dados_carteira != null) {
//                String auxCampos = dados_carteira[3][3] + "," + dados_carteira[4][3] + "," + dados_carteira[5][3] + "," + dados_carteira[6][3] + "," + dados_carteira[7][3] + "," + dados_carteira[8][3] + "," + dados_carteira[9][3] + "," + dados_carteira[10][3];
//                String auxSql = "INSERT INTO auxiliar (conta, rgprp, rgimv, contrato, campo) VALUES ('&1.','&2.','&3.','&4.','&5.')";
//                auxSql = FuncoesGlobais.Subst(auxSql, new String[] {
//                    "CAR",dados_carteira[0][3],dados_carteira[1][3], dados_carteira[2][3], auxCampos
//                });
//                conn.CommandExecute(auxSql);
//            }
//            conn.CommandExecute("DELETE FROM carteira WHERE rgimv = '" + iRgimv.getText() + "';");
//        }
    }//GEN-LAST:event_iBtExcluirActionPerformed

    private void ifoto_delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ifoto_delActionPerformed
        int i = 0; int maxcpos = jctCampos.getComponentCount();
        for (i=0; i <= maxcpos - 1; i++) {
            if (jctCampos.getComponent(i) instanceof JButton) {
                if (((JButton) jctCampos.getComponent(i)).isFocusable()) {
                    new File("fotos/" + ((JButton)jctCampos.getComponent(i)).getToolTipText() + ".jpg").delete();
                    jctCampos.remove(i);
                    break;
                }
            }
        }
        jctCampos.repaint();
        String nfotos = ListaFotos();
        try {MontaTela(nfotos);} catch (Exception e) {}
    }//GEN-LAST:event_ifoto_delActionPerformed

    private void mtDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mtDelActionPerformed
        if(iMatriculas.getSelectedIndex() > -1) iMatriculas.removeItemAt(iMatriculas.getSelectedIndex());
    }//GEN-LAST:event_mtDelActionPerformed

    private void ifoto_adcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ifoto_adcActionPerformed
        Object[][] img = null; String nmImagem = "";
        try { img = conn.ReadFieldsTable(new String[] {"fotos"}, "imoveis", "rgimv = '" + VariaveisGlobais.rgimv + "'");} catch (Exception e) {}
        if (img != null) {
            if (img[0][3] != null) {
                if  (!img[0][3].toString().equalsIgnoreCase("")) {
                    String[] photos = img[0][3].toString().split(";");
                    String nm = photos[photos.length - 1];
                    String mn = nm.substring(0, nm.indexOf("_"));
                    int nr = Integer.valueOf(nm.substring(nm.indexOf("_") + 1)) + 1;
                    nmImagem = mn + "_" + FuncoesGlobais.StrZero(String.valueOf(nr), 2);
                } else {
                    nmImagem = VariaveisGlobais.rgimv + "_01";
                }
            }
        } else {
            nmImagem = VariaveisGlobais.rgimv + "_01";
        }
        jInsertPhoto poto = new jInsertPhoto(null, true);
        poto.setImageName(nmImagem);
        poto.setVisible(true);
        if (new File("fotos/" + nmImagem + ".jpg").exists()) {
            try {MontaCampos(nmImagem,img[0][3].toString().split(";").length);} catch (Exception e) {}
        }
    }//GEN-LAST:event_ifoto_adcActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Legendas das taxas
        iMatriculas.setToolTipText(LerLegendas());
    }//GEN-LAST:event_formWindowOpened

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                jImovel dialog = null;
                try {dialog = new jImovel(new javax.swing.JFrame(), true);} catch (Exception ex) {}
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private void GravarDados() throws SQLException {
        int iNewRgImv = 0;
        if (bNew) {
            int NewRgImv = 0;
            try {
                NewRgImv = Integer.parseInt(conn.ReadParameters("PROP" + VariaveisGlobais.rgprp.trim()));
            } catch (SQLException ex) {
                NewRgImv = 0;
            } catch (NumberFormatException ex) {
                NewRgImv = 0;
            }
            int PropInc = 1;
            iNewRgImv = NewRgImv + PropInc;

            String cPar[] = {"PROP" + VariaveisGlobais.rgprp.trim(),String.valueOf(iNewRgImv),"NUMERICO"};
            try {
                conn.SaveParameters(cPar);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        } else iNewRgImv = Integer.parseInt(iRgimv.getText());

        String matriculas = FuncoesGlobais.join(FuncoesGlobais.ComboLista(iMatriculas),";");

        String query = ""; Object[][] param = null;
        if (bNew) {
            query = "INSERT INTO `imoveis` (`rgprp`, `rgimv`, `tpimovel`, `tpurbrural`, `situacao`, `end`, " + 
                    "`num`, `compl`, `bairro`, `cidade`, `codcid`, `estado`, `cep`, `especifica`, `menssagem`, `obs`, `reter`, `matriculas`, `fotos`) " + 
                    "VALUES (:rgprp, :rgimv, :tpimovel, :tpurbrural, :situacao, :end, :num, :compl, :bairro, :cidade, " + 
                    ":codcid, :estado, :cep, :especifica, :menssagem, :obs, :reter, :matriculas, :fotos);";
            param = new Object[][] {
                {"int", "rgprp", Integer.parseInt(VariaveisGlobais.rgprp)},
                {"int", "rgimv", Integer.parseInt(VariaveisGlobais.rgprp) + iNewRgImv},
                {"string", "tpimovel", iTipoImv.getSelectedItem().toString().trim()},
                {"string", "tpurbrural", iUrbRural.getSelectedItem().toString().trim()},
                {"string", "situacao", iSituacao.getModel().getSelectedItem().toString().trim()},
                {"string", "end", iEndereco.getText().trim()},
                {"string", "num", iNumero.getText().trim()},
                {"string", "compl", iCplto.getText().trim()},
                {"string", "bairro", iBairro.getText().trim()},
                {"string", "cidade", iCidade.getText().trim()},
                {"string", "codcid", iCodCidade.getText().trim()},
                {"string", "estado", iEstado.getText().toUpperCase().trim()},
                {"string", "cep", iCep.getText().trim()},
                {"string", "especifica", iDescricao.getText().trim()},
                {"string", "menssagem", iMsg.getText().trim()},
                {"string", "obs", iObs.getText().trim()},
                {"boolean", "reter", iReter.isSelected()},
                {"", "matriculas", !matriculas.isEmpty() ? matriculas : null},
                {"", "fotos", ListaFotos()}
            };
        } else {
            query = "UPDATE `imoveis` SET `tpimovel` = :tpimovel, `tpurbrural` = :tpurbrural, " + 
                    "`situacao` = :situacao, `end` = end, `num` = :num, `compl` = :compl, `bairro` = :bairro, `cidade` = :cidade, " + 
                    "`codcid` = :codcid, `estado` = :estado, `cep` = :cep, `especifica` = :especifica, `menssagem` = :menssagem, " + 
                    "`obs` = :obs, `reter` = :reter, `matriculas` = :matriculas, `fotos` = :fotos WHERE `rgprp` = :rgprp AND `rgimv` = :rgimv;";
            param = new Object[][] {
                {"int", "rgprp", Integer.parseInt(VariaveisGlobais.rgprp)},
                {"int", "rgimv", Integer.parseInt(VariaveisGlobais.rgprp) + iNewRgImv},
                {"string", "tpimovel", iTipoImv.getSelectedItem().toString().trim()},
                {"string", "tpurbrural", iUrbRural.getSelectedItem().toString().trim()},
                {"string", "situacao", iSituacao.getModel().getSelectedItem().toString().trim()},
                {"string", "end", iEndereco.getText().trim()},
                {"string", "num", iNumero.getText().trim()},
                {"string", "compl", iCplto.getText().trim()},
                {"string", "bairro", iBairro.getText().trim()},
                {"string", "cidade", iCidade.getText().trim()},
                {"string", "codcid", iCodCidade.getText().trim()},
                {"string", "estado", iEstado.getText().toUpperCase().trim()},
                {"string", "cep", iCep.getText().trim()},
                {"string", "especifica", iDescricao.getText().trim()},
                {"string", "menssagem", iMsg.getText().trim()},
                {"string", "obs", iObs.getText().trim()},
                {"boolean", "reter", iReter.isSelected()},
                {"", "matriculas", !matriculas.isEmpty() ? matriculas : null},
                {"", "fotos", ListaFotos()}
            };
        }

        conn.CommandExecute(query, param);
        
        if (bNew) {
            iRgimv.setText(Integer.toString(Integer.parseInt(VariaveisGlobais.rgprp) + iNewRgImv));
        }

        if (!bNew) {
            if (iSituacao.getModel().getSelectedItem().toString().toUpperCase().equalsIgnoreCase("AÇÃO")) {
                // Exporta
                int seq = 1;
                String LF = "\r\n";

                String output = ""; String header = ""; String tipo2 = "";

                // Arquivo tipo H - Informações gerais do calculo
                ResultSet dbRecibos = conn.OpenTable("SELECT * FROM recibo r WHERE r.rgprp = '" + VariaveisGlobais.rgprp + "' AND r.rgimv = '" + iNewRgImv + "' AND r.tag <> 'X' ORDER BY r.dtvencimento;", null);

                Date dtInicial = null; Date DtFinal = null; String sContrato = "";
                try {
                    dbRecibos.first();
                    sContrato = dbRecibos.getString("contrato");
                    dtInicial = dbRecibos.getDate("dtvencimento");
                    dbRecibos.last();
                    DtFinal =  dbRecibos.getDate("dtvencimento");
                } catch (Exception e) {}
                conn.CloseTable(dbRecibos);

                Calculos rc = new Calculos();
                try {
                    rc.Inicializa(VariaveisGlobais.rgprp, String.valueOf(iNewRgImv).replace(".0",""), sContrato);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }

                ResultSet dbCarteira = conn.OpenTable("SELECT dtinicio FROM carteira WHERE contrato = '" + sContrato + "';", null);
                String dtContrato = null;
                try {
                    while (dbCarteira.next()) {
                        dtContrato = Dates.StringtoString(dbCarteira.getString("dtinicio"),"dd-MM-yyyy", "MM");
                    }
                } catch (Exception e) {}
                conn.CloseTable(dbCarteira);

                header = "H";                                                                   // H - para Header
                header += FuncoesGlobais.StrZero(String.valueOf(seq).replace(".0", ""), 10);    // sequencial
                header += Dates.DateFormata("yyyyMMdd", new Date());                            // Data Processamento
                header += Dates.DateFormata("yyyyMMdd", dtInicial);                             // dtinicial
                header += Dates.DateFormata("yyyyMMdd", DtFinal);                               // dtdinal
                header += FuncoesGlobais.GravaValores(LerValor.FloatToString(rc.multa_res), 4); // Multa contratual %
                header += FuncoesGlobais.StrZero(dtContrato, 2);                                // Mês de Reajuste
                header += FuncoesGlobais.GravaValores(LerValor.FloatToString(rc.per_jur), 4);   // Juros Processual %
                header += FuncoesGlobais.GravaValores("0,0000", 4);                             // Honorarios %
                header += FuncoesGlobais.GravaValores("0,00", 2);                               // Custas $
                header += FuncoesGlobais.myLetra(new Pad("", 60).RPad());                       // Nome do Advogado
                header += FuncoesGlobais.myLetra(new Pad("", 15).RPad());                       // OAB/EST
                header += FuncoesGlobais.Space(248);                                            // RESERVADO (Espaços em branco)

                seq++;

                // Arquivo Tipo 2 - Informações Prop/Inq/Imovel
                ResultSet dbDados = conn.OpenTable("SELECT p.rgprp, p.nome, p.cpfcnpj, i.rgimv, i.`end` as ende, i.`num` as numero, i.compl, i.bairro, i.cidade, i.estado, i.cep, l.contrato, l.nomerazao, l.cpfcnpj FROM proprietarios p, imoveis i, locatarios l WHERE p.rgprp = i.rgprp and i.rgimv = l.rgimv and l.contrato = '" + sContrato + "';", null);
                String prgprp = "", pnome = "", pcpfcnpj = "", irgimv = "", iend = "", inum = "";
                String icompl = "", ibairro = "", icidade = "", iestado = "", icep = "";
                String lcontrato = "", lnomerazao = "", lcpfcnpj = "";
                try {
                    while (dbDados.next()) {
                        prgprp = dbDados.getString("p.rgprp"); 
                        pnome =  dbDados.getString("p.nome"); 
                        pcpfcnpj =  dbDados.getString("p.cpfcnpj");
                        irgimv =  dbDados.getString("i.rgimv"); 
                        iend =  dbDados.getString("i.ende");
                        inum =  dbDados.getString("i.numero"); 
                        icompl =  dbDados.getString("i.compl");
                        ibairro =  dbDados.getString("i.bairro"); 
                        icidade =  dbDados.getString("i.cidade"); 
                        iestado =  dbDados.getString("i.estado"); 
                        icep =  dbDados.getString("i.cep"); 
                        lcontrato =  dbDados.getString("l.contrato"); 
                        lnomerazao =  dbDados.getString("l.nomerazao"); 
                        lcpfcnpj =  dbDados.getString("l.cpfcnpj"); 
                    }
                } catch (Exception e) {}
                conn.CloseTable(dbDados);

                tipo2 = "2";                                                                     // Tipo 2
                tipo2 += FuncoesGlobais.StrZero(String.valueOf(seq).replace(".0", ""), 10);      // sequencial
                tipo2 += FuncoesGlobais.StrZero(prgprp, 6);                                      // Registro do proprietário
                tipo2 += FuncoesGlobais.myLetra(new Pad(pnome, 60).RPad());                      // Nome do proprietário
                tipo2 += FuncoesGlobais.StrZero(FuncoesGlobais.rmvNumero(pcpfcnpj.trim()), 18);  // CPF ou CNPJ do proprietário
                tipo2 += FuncoesGlobais.StrZero(irgimv, 6);                                      // Registro do imóvel
                tipo2 += FuncoesGlobais.myLetra(new Pad(iend, 60).RPad());                       // Endereço do imóvel
                tipo2 += FuncoesGlobais.myLetra(new Pad(inum, 25).RPad());                       // Número do imóvel
                tipo2 += FuncoesGlobais.myLetra(new Pad(icompl, 25).RPad());                     // Complemento do imóvel
                tipo2 += FuncoesGlobais.myLetra(new Pad(ibairro, 25).RPad());                    // Bairro do imóvel
                tipo2 += FuncoesGlobais.myLetra(new Pad(icidade, 25).RPad());                    // Cidade do imóvel
                tipo2 += FuncoesGlobais.myLetra(new Pad(iestado, 2).RPad());                     // Estado do imóvel
                tipo2 += FuncoesGlobais.StrZero(FuncoesGlobais.rmvNumero(icep.trim()), 8);       // Cep do imóvel
                tipo2 += FuncoesGlobais.StrZero(lcontrato, 6);                                   // Contrato do locatário
                tipo2 += FuncoesGlobais.myLetra(new Pad(lnomerazao, 60).RPad());                 // Nome do locatário
                tipo2 += FuncoesGlobais.StrZero(FuncoesGlobais.rmvNumero(lcpfcnpj.trim()), 18);  // CPF ou CNPJ do locatário
                tipo2 += FuncoesGlobais.Space(45);                                               // RESERVADO (Espaços em branco)
                    
                seq++;

                if (!new File("acao").exists()) {
                    boolean sucess = new File("acao").mkdirs();
                    if (!sucess) { System.out.println("Não consegui criar acao"); System.exit(1); }
                }
                
                StreamFile filler = new StreamFile(new String[] {"acao/" + prgprp + "_" + irgimv + "_" + lcontrato + "_" + FuncoesGlobais.myLetra(pnome.trim()) + "_X_" + FuncoesGlobais.myLetra(lnomerazao.trim()) + ".cal"});
                if (filler.Open()) {
                    
                    filler.Print(header + LF);
                    filler.Print(tipo2 + LF);

                    // Arquivo Tipo 3 - Informações Iniciais
                    dbRecibos = conn.OpenTable("SELECT * FROM recibo r WHERE r.rgprp = '" + prgprp + "' AND r.rgimv = '" + irgimv + "' AND r.contrato = '" + lcontrato + "' AND r.tag <> 'X' ORDER BY r.dtvencimento;", null);
                    
                    try {
                        while (dbRecibos.next()) {
                            Date rvencimento = null; String rcampo = null; 
                            String rmulta = "0", rjuros = "1", rcorrecao = "1";
                            rvencimento = dbRecibos.getDate("dtvencimento");
                            rcampo = dbRecibos.getString("campo");
                            String[][] rcampos = FuncoesGlobais.treeArray(rcampo, true);

                            for (int i=0;i<rcampo.length();i++) {
                                output = "3";                                                                             // Tipo 3
                                output += FuncoesGlobais.StrZero(String.valueOf(seq).replace(".0", ""), 10);              // sequencial
                                output += Dates.DateFormata("yyyyMMdd", rvencimento);                                     // vencimento
                                output += FuncoesGlobais.myLetra(new Pad(rcampos[i][rcampos[i].length - 1], 20).RPad());  // descrição
                                output += FuncoesGlobais.GravaValores(LerValor.FormatNumber(rcampos[i][2], 2), 2);        // valor $
                                output += rcampos[i][4].equalsIgnoreCase("AL") ? "1" : "0";                               // multa (0 - não, 1 - sim)
                                output += "1";                                                                            // juros (0 - não, 1 - sim)
                                output += "1";                                                                            // correção (0 - não, 1 - sim)
                                output += FuncoesGlobais.Space(348);                                                      // RESERVADO (Espaços em branco)

                                filler.Print(output + LF);

                                seq++;
                            }
                        }
                    } catch (Exception e) {}
                    
                    // Arquivo Tipo 4 - Informações Finais
                    
                    // Arquivo Tipo T - Trayler
                    output = "T";                                                                 // Tipo T - Trayler
                    output += FuncoesGlobais.StrZero(String.valueOf(seq).replace(".0", ""), 10);  // sequencial
                    output += "0000000001";                                                       // Total Arquivos Tipo T
                    output += "0000000001";                                                       // Total Arquivos Tipo 2
                    output += FuncoesGlobais.StrZero(String.valueOf("0").replace(".0", ""), 10);  // Total Arquivos Tipo 3
                    output += "0000000001";                                                       // Total Arquivos Tipo 4
                    output += FuncoesGlobais.StrZero(String.valueOf(--seq).replace(".0", ""), 10);  // Total de Linhas
                    output += FuncoesGlobais.Space(339);                                          // RESERVADO (Espaços em branco)
                    
                    filler.Print(output + LF);
                }
                filler.Close();        
            }
        }
    }

    private void LimpaDados() {
        iRgimv.setText("");
        iTipoImv.setSelectedIndex(0);
        iUrbRural.setSelectedIndex(0);
        iSituacao.setSelectedIndex(0);
        iEndereco.setText("");
        iNumero.setText("");
        iCplto.setText("");
        iBairro.setText("");
        iCidade.setText("");
        iCodCidade.setText("");
        iEstado.setText("");
        iCep.setText("");
        iDescricao.setText("");
        iMsg.setText("");
        iObs.setText("");
        
        // atualização de 07/07/2014
        jctCampos.removeAll();
        jctCampos.repaint();
        iReter.setSelected(false);
        iMatriculas.removeAllItems();
    }

    private void LerDados(boolean bFirst) throws SQLException {
        if (conn.RecordCount(pResult) <= 0) {return;}

        if (bFirst) pResult.first();
        iRgimv.setText(pResult.getString("rgimv"));

        String pTipoImv = pResult.getString("tpimovel").trim().toLowerCase();
        String sTipoImv[] = {"residencial","não residencial","comercial"};
        Integer nPos = FuncoesGlobais.IndexOf(sTipoImv,pTipoImv) ;
        if (nPos == -1) {
            nPos = 0;
        }
        iTipoImv.setSelectedIndex(nPos);

        String pUrbRural = pResult.getString("tpurbrural").trim().toLowerCase();
        String sUrbRural[] = {"urbano","rural"};
        Integer nPos2 = FuncoesGlobais.IndexOf(sUrbRural,pUrbRural) ;
        if (nPos2 == -1) {
            nPos2 = 0;
        }
        iUrbRural.setSelectedIndex(nPos2);

        String pSituacao = pResult.getString("situacao").trim().toLowerCase();
//        String sSituacao[] = {"vazio","ocupado", "ação", "pendencia", "reservado"};
//        Integer nPos3 = FuncoesGlobais.IndexOf(sSituacao,pSituacao);
//        if (nPos3 == -1) {
//            nPos3 = 0;
//        }
//        iSituacao.setSelectedIndex(nPos3);

        iSituacao.getModel().setSelectedItem(pSituacao);
        
        iEndereco.setText(pResult.getString("end"));
        iNumero.setText(pResult.getString("num"));
        iCplto.setText(pResult.getString("compl"));
        iBairro.setText(pResult.getString("bairro"));
        iCidade.setText(pResult.getString("cidade"));
        iCodCidade.setText(pResult.getString("codcid"));
        iEstado.setText(pResult.getString("estado").toUpperCase());
        iCep.setText(pResult.getString("cep"));

        iDescricao.setText(pResult.getString("especifica"));
        iMsg.setText(pResult.getString("menssagem"));
        iObs.setText(pResult.getString("obs"));
        
        // Atualização de 07/07/2014
        try {
            iReter.setSelected(pResult.getBoolean("reter"));
            String matr = pResult.getString("matriculas");
            if (matr != null) {
                String mtr[] = matr.split(";");
                for (int i=0;i<mtr.length;i++) {
                    String mtc[] = mtr[i].split(":");
                    iMatriculas.addItem(mtc[0] + " - " + mtc[1]);
                }
            }
            try {MontaTela(pResult.getString("fotos"));} catch (Exception e) {e.printStackTrace();}
        } catch (Exception e) {e.printStackTrace();}
    }

    public void viewFotoFrame(String foto) {
        jPhotoPreview pp = null;
        
        try { pp = new jPhotoPreview(null, true);} catch (Exception e) {e.printStackTrace();}
        pp.setPhoto(foto);
        pp.setVisible(true);
        pp = null;
    }    

    private String ListaFotos() {
        int i = 0; int maxcpos = jctCampos.getComponentCount(); int j = 0;
        String[] saida = {}; String nmFoto = ""; String retorno = "";
        for (i=0; i <= maxcpos - 1; i++) {
            if (jctCampos.getComponent(i) instanceof JButton) {
                //saida = ((JLabel) jctCampos.getComponent(i)).getText();
                nmFoto = ((JButton) jctCampos.getComponent(i)).getToolTipText();
                
                saida = FuncoesGlobais.ArrayAdd(saida, nmFoto);
            }
        }
        
        retorno = FuncoesGlobais.join(saida, ";");
        return retorno;
    }    
    
    public void MontaTela(String fotos) throws SQLException, ParseException {
        if (fotos == null) return;
        if ("".equals(fotos.trim())) { return; }

        // Limpa campos
        jctCampos.removeAll();
        jctCampos.repaint();

        String[] foto = fotos.split(";");
        if (foto.length > 0) {
            // Monta campos
            int i = 0;
            for (i=0; i<= foto.length - 1; i++) {
                MontaCampos(foto[i], i);
            }
        }
    }

    private void MontaCampos(String foto, int i) {
        UIDefaults defaults = javax.swing.UIManager.getDefaults();

        int at = 80; int llg = 100;

        JButton lb = new JButton();
        lb.setText(null);
        lb.setToolTipText(foto);
        lb.setIcon(new ResizeImageIcon("E", "fotos/" + foto + ".jpg", llg, at).getImg());
        lb.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb.setVisible(true);
        lb.setForeground(defaults.getColor("Label.Foreground")); 
        lb.setBounds(0 + (llg * i), 0, llg, at);
        lb.setName("Button" + i);
        lb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                int i = 0; int maxcpos = jctCampos.getComponentCount();
                for (i=0; i <= maxcpos - 1; i++) {
                    if (jctCampos.getComponent(i) instanceof JButton) {
                        ((JButton) jctCampos.getComponent(i)).setBorder(null);
                        ((JButton) jctCampos.getComponent(i)).setFocusable(false);
                    }
                }
                ((JButton) evt.getSource()).setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(51, 51, 255), java.awt.Color.blue));
                viewFotoFrame(((JButton) evt.getSource()).getToolTipText());
                ((JButton) evt.getSource()).setFocusable(true);
            }
        });
        jctCampos.add(lb);

        jctCampos.repaint();
    }
    
    private boolean MoveToImovel(String srgprp, String srgimv) throws SQLException {
        boolean achei = false;
        pResult.first();
        while (pResult.next()) {
            if (pResult.getInt("rgprp") == Integer.parseInt(srgprp) && pResult.getInt("rgimv") == Integer.parseInt(srgimv)) {
                achei = true;
                break;
            }
        }
        if (!achei) pResult.first();
        LerDados(false);
        return achei;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField iBairro;
    private javax.swing.JButton iBtCarteira;
    private javax.swing.JButton iBtExcluir;
    private javax.swing.JButton iBtGravar;
    private javax.swing.JButton iBtIncluir;
    private javax.swing.JButton iBtRetornar;
    private javax.swing.JFormattedTextField iCep;
    private javax.swing.JTextField iCidade;
    private javax.swing.JTextField iCodCidade;
    private javax.swing.JTextField iCplto;
    private javax.swing.JTextArea iDescricao;
    private javax.swing.JTextField iEndereco;
    private javax.swing.JFormattedTextField iEstado;
    private javax.swing.JComboBox iMatriculas;
    private javax.swing.JTextField iMsg;
    private javax.swing.JTextField iNumero;
    private javax.swing.JTextField iObs;
    private javax.swing.JCheckBox iReter;
    private javax.swing.JTextField iRgimv;
    private javax.swing.JComboBox iSituacao;
    private javax.swing.JComboBox iTipoImv;
    private javax.swing.JComboBox iUrbRural;
    private javax.swing.JButton ifoto_adc;
    private javax.swing.JButton ifoto_del;
    private javax.swing.JButton ifoto_frente;
    private javax.swing.JButton ifoto_tras;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneFotos;
    private javax.swing.JButton jbtBaixar;
    private javax.swing.JButton jbtBuscaCep;
    private javax.swing.JPanel jctCampos;
    private javax.swing.JButton mtDel;
    // End of variables declaration//GEN-END:variables

}
